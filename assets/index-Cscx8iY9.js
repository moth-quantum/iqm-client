(function(){const l=document.createElement("link").relList;if(l&&l.supports&&l.supports("modulepreload"))return;for(const y of document.querySelectorAll('link[rel="modulepreload"]'))w(y);new MutationObserver(y=>{for(const x of y)if(x.type==="childList")for(const C of x.addedNodes)C.tagName==="LINK"&&C.rel==="modulepreload"&&w(C)}).observe(document,{childList:!0,subtree:!0});function s(y){const x={};return y.integrity&&(x.integrity=y.integrity),y.referrerPolicy&&(x.referrerPolicy=y.referrerPolicy),y.crossOrigin==="use-credentials"?x.credentials="include":y.crossOrigin==="anonymous"?x.credentials="omit":x.credentials="same-origin",x}function w(y){if(y.ep)return;y.ep=!0;const x=s(y);fetch(y.href,x)}})();var Ba={exports:{}},Eo={},La={exports:{}},X={};/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var $u;function pm(){if($u)return X;$u=1;var c=Symbol.for("react.element"),l=Symbol.for("react.portal"),s=Symbol.for("react.fragment"),w=Symbol.for("react.strict_mode"),y=Symbol.for("react.profiler"),x=Symbol.for("react.provider"),C=Symbol.for("react.context"),I=Symbol.for("react.forward_ref"),q=Symbol.for("react.suspense"),M=Symbol.for("react.memo"),Q=Symbol.for("react.lazy"),P=Symbol.iterator;function R(p){return p===null||typeof p!="object"?null:(p=P&&p[P]||p["@@iterator"],typeof p=="function"?p:null)}var $={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Y=Object.assign,G={};function V(p,k,H){this.props=p,this.context=k,this.refs=G,this.updater=H||$}V.prototype.isReactComponent={},V.prototype.setState=function(p,k){if(typeof p!="object"&&typeof p!="function"&&p!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,p,k,"setState")},V.prototype.forceUpdate=function(p){this.updater.enqueueForceUpdate(this,p,"forceUpdate")};function qe(){}qe.prototype=V.prototype;function xe(p,k,H){this.props=p,this.context=k,this.refs=G,this.updater=H||$}var Se=xe.prototype=new qe;Se.constructor=xe,Y(Se,V.prototype),Se.isPureReactComponent=!0;var ue=Array.isArray,Ke=Object.prototype.hasOwnProperty,_e={current:null},re={key:!0,ref:!0,__self:!0,__source:!0};function ye(p,k,H){var K,J={},ee=null,ie=null;if(k!=null)for(K in k.ref!==void 0&&(ie=k.ref),k.key!==void 0&&(ee=""+k.key),k)Ke.call(k,K)&&!re.hasOwnProperty(K)&&(J[K]=k[K]);var ne=arguments.length-2;if(ne===1)J.children=H;else if(1<ne){for(var ce=Array(ne),Ye=0;Ye<ne;Ye++)ce[Ye]=arguments[Ye+2];J.children=ce}if(p&&p.defaultProps)for(K in ne=p.defaultProps,ne)J[K]===void 0&&(J[K]=ne[K]);return{$$typeof:c,type:p,key:ee,ref:ie,props:J,_owner:_e.current}}function Pe(p,k){return{$$typeof:c,type:p.type,key:k,ref:p.ref,props:p.props,_owner:p._owner}}function ot(p){return typeof p=="object"&&p!==null&&p.$$typeof===c}function ct(p){var k={"=":"=0",":":"=2"};return"$"+p.replace(/[=:]/g,function(H){return k[H]})}var Te=/\/+/g;function Ue(p,k){return typeof p=="object"&&p!==null&&p.key!=null?ct(""+p.key):k.toString(36)}function me(p,k,H,K,J){var ee=typeof p;(ee==="undefined"||ee==="boolean")&&(p=null);var ie=!1;if(p===null)ie=!0;else switch(ee){case"string":case"number":ie=!0;break;case"object":switch(p.$$typeof){case c:case l:ie=!0}}if(ie)return ie=p,J=J(ie),p=K===""?"."+Ue(ie,0):K,ue(J)?(H="",p!=null&&(H=p.replace(Te,"$&/")+"/"),me(J,k,H,"",function(Ye){return Ye})):J!=null&&(ot(J)&&(J=Pe(J,H+(!J.key||ie&&ie.key===J.key?"":(""+J.key).replace(Te,"$&/")+"/")+p)),k.push(J)),1;if(ie=0,K=K===""?".":K+":",ue(p))for(var ne=0;ne<p.length;ne++){ee=p[ne];var ce=K+Ue(ee,ne);ie+=me(ee,k,H,ce,J)}else if(ce=R(p),typeof ce=="function")for(p=ce.call(p),ne=0;!(ee=p.next()).done;)ee=ee.value,ce=K+Ue(ee,ne++),ie+=me(ee,k,H,ce,J);else if(ee==="object")throw k=String(p),Error("Objects are not valid as a React child (found: "+(k==="[object Object]"?"object with keys {"+Object.keys(p).join(", ")+"}":k)+"). If you meant to render a collection of children, use an array instead.");return ie}function De(p,k,H){if(p==null)return p;var K=[],J=0;return me(p,K,"","",function(ee){return k.call(H,ee,J++)}),K}function Qe(p){if(p._status===-1){var k=p._result;k=k(),k.then(function(H){(p._status===0||p._status===-1)&&(p._status=1,p._result=H)},function(H){(p._status===0||p._status===-1)&&(p._status=2,p._result=H)}),p._status===-1&&(p._status=0,p._result=k)}if(p._status===1)return p._result.default;throw p._result}var fe={current:null},T={transition:null},z={ReactCurrentDispatcher:fe,ReactCurrentBatchConfig:T,ReactCurrentOwner:_e};function B(){throw Error("act(...) is not supported in production builds of React.")}return X.Children={map:De,forEach:function(p,k,H){De(p,function(){k.apply(this,arguments)},H)},count:function(p){var k=0;return De(p,function(){k++}),k},toArray:function(p){return De(p,function(k){return k})||[]},only:function(p){if(!ot(p))throw Error("React.Children.only expected to receive a single React element child.");return p}},X.Component=V,X.Fragment=s,X.Profiler=y,X.PureComponent=xe,X.StrictMode=w,X.Suspense=q,X.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=z,X.act=B,X.cloneElement=function(p,k,H){if(p==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+p+".");var K=Y({},p.props),J=p.key,ee=p.ref,ie=p._owner;if(k!=null){if(k.ref!==void 0&&(ee=k.ref,ie=_e.current),k.key!==void 0&&(J=""+k.key),p.type&&p.type.defaultProps)var ne=p.type.defaultProps;for(ce in k)Ke.call(k,ce)&&!re.hasOwnProperty(ce)&&(K[ce]=k[ce]===void 0&&ne!==void 0?ne[ce]:k[ce])}var ce=arguments.length-2;if(ce===1)K.children=H;else if(1<ce){ne=Array(ce);for(var Ye=0;Ye<ce;Ye++)ne[Ye]=arguments[Ye+2];K.children=ne}return{$$typeof:c,type:p.type,key:J,ref:ee,props:K,_owner:ie}},X.createContext=function(p){return p={$$typeof:C,_currentValue:p,_currentValue2:p,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},p.Provider={$$typeof:x,_context:p},p.Consumer=p},X.createElement=ye,X.createFactory=function(p){var k=ye.bind(null,p);return k.type=p,k},X.createRef=function(){return{current:null}},X.forwardRef=function(p){return{$$typeof:I,render:p}},X.isValidElement=ot,X.lazy=function(p){return{$$typeof:Q,_payload:{_status:-1,_result:p},_init:Qe}},X.memo=function(p,k){return{$$typeof:M,type:p,compare:k===void 0?null:k}},X.startTransition=function(p){var k=T.transition;T.transition={};try{p()}finally{T.transition=k}},X.unstable_act=B,X.useCallback=function(p,k){return fe.current.useCallback(p,k)},X.useContext=function(p){return fe.current.useContext(p)},X.useDebugValue=function(){},X.useDeferredValue=function(p){return fe.current.useDeferredValue(p)},X.useEffect=function(p,k){return fe.current.useEffect(p,k)},X.useId=function(){return fe.current.useId()},X.useImperativeHandle=function(p,k,H){return fe.current.useImperativeHandle(p,k,H)},X.useInsertionEffect=function(p,k){return fe.current.useInsertionEffect(p,k)},X.useLayoutEffect=function(p,k){return fe.current.useLayoutEffect(p,k)},X.useMemo=function(p,k){return fe.current.useMemo(p,k)},X.useReducer=function(p,k,H){return fe.current.useReducer(p,k,H)},X.useRef=function(p){return fe.current.useRef(p)},X.useState=function(p){return fe.current.useState(p)},X.useSyncExternalStore=function(p,k,H){return fe.current.useSyncExternalStore(p,k,H)},X.useTransition=function(){return fe.current.useTransition()},X.version="18.3.1",X}var Vu;function Xa(){return Vu||(Vu=1,La.exports=pm()),La.exports}/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Hu;function hm(){if(Hu)return Eo;Hu=1;var c=Xa(),l=Symbol.for("react.element"),s=Symbol.for("react.fragment"),w=Object.prototype.hasOwnProperty,y=c.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,x={key:!0,ref:!0,__self:!0,__source:!0};function C(I,q,M){var Q,P={},R=null,$=null;M!==void 0&&(R=""+M),q.key!==void 0&&(R=""+q.key),q.ref!==void 0&&($=q.ref);for(Q in q)w.call(q,Q)&&!x.hasOwnProperty(Q)&&(P[Q]=q[Q]);if(I&&I.defaultProps)for(Q in q=I.defaultProps,q)P[Q]===void 0&&(P[Q]=q[Q]);return{$$typeof:l,type:I,key:R,ref:$,props:P,_owner:y.current}}return Eo.Fragment=s,Eo.jsx=C,Eo.jsxs=C,Eo}var Gu;function fm(){return Gu||(Gu=1,Ba.exports=hm()),Ba.exports}var v=fm(),ze=Xa(),Dr={},Na={exports:{}},Xe={},Da={exports:{}},Oa={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Xu;function gm(){return Xu||(Xu=1,function(c){function l(T,z){var B=T.length;T.push(z);e:for(;0<B;){var p=B-1>>>1,k=T[p];if(0<y(k,z))T[p]=z,T[B]=k,B=p;else break e}}function s(T){return T.length===0?null:T[0]}function w(T){if(T.length===0)return null;var z=T[0],B=T.pop();if(B!==z){T[0]=B;e:for(var p=0,k=T.length,H=k>>>1;p<H;){var K=2*(p+1)-1,J=T[K],ee=K+1,ie=T[ee];if(0>y(J,B))ee<k&&0>y(ie,J)?(T[p]=ie,T[ee]=B,p=ee):(T[p]=J,T[K]=B,p=K);else if(ee<k&&0>y(ie,B))T[p]=ie,T[ee]=B,p=ee;else break e}}return z}function y(T,z){var B=T.sortIndex-z.sortIndex;return B!==0?B:T.id-z.id}if(typeof performance=="object"&&typeof performance.now=="function"){var x=performance;c.unstable_now=function(){return x.now()}}else{var C=Date,I=C.now();c.unstable_now=function(){return C.now()-I}}var q=[],M=[],Q=1,P=null,R=3,$=!1,Y=!1,G=!1,V=typeof setTimeout=="function"?setTimeout:null,qe=typeof clearTimeout=="function"?clearTimeout:null,xe=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function Se(T){for(var z=s(M);z!==null;){if(z.callback===null)w(M);else if(z.startTime<=T)w(M),z.sortIndex=z.expirationTime,l(q,z);else break;z=s(M)}}function ue(T){if(G=!1,Se(T),!Y)if(s(q)!==null)Y=!0,Qe(Ke);else{var z=s(M);z!==null&&fe(ue,z.startTime-T)}}function Ke(T,z){Y=!1,G&&(G=!1,qe(ye),ye=-1),$=!0;var B=R;try{for(Se(z),P=s(q);P!==null&&(!(P.expirationTime>z)||T&&!ct());){var p=P.callback;if(typeof p=="function"){P.callback=null,R=P.priorityLevel;var k=p(P.expirationTime<=z);z=c.unstable_now(),typeof k=="function"?P.callback=k:P===s(q)&&w(q),Se(z)}else w(q);P=s(q)}if(P!==null)var H=!0;else{var K=s(M);K!==null&&fe(ue,K.startTime-z),H=!1}return H}finally{P=null,R=B,$=!1}}var _e=!1,re=null,ye=-1,Pe=5,ot=-1;function ct(){return!(c.unstable_now()-ot<Pe)}function Te(){if(re!==null){var T=c.unstable_now();ot=T;var z=!0;try{z=re(!0,T)}finally{z?Ue():(_e=!1,re=null)}}else _e=!1}var Ue;if(typeof xe=="function")Ue=function(){xe(Te)};else if(typeof MessageChannel<"u"){var me=new MessageChannel,De=me.port2;me.port1.onmessage=Te,Ue=function(){De.postMessage(null)}}else Ue=function(){V(Te,0)};function Qe(T){re=T,_e||(_e=!0,Ue())}function fe(T,z){ye=V(function(){T(c.unstable_now())},z)}c.unstable_IdlePriority=5,c.unstable_ImmediatePriority=1,c.unstable_LowPriority=4,c.unstable_NormalPriority=3,c.unstable_Profiling=null,c.unstable_UserBlockingPriority=2,c.unstable_cancelCallback=function(T){T.callback=null},c.unstable_continueExecution=function(){Y||$||(Y=!0,Qe(Ke))},c.unstable_forceFrameRate=function(T){0>T||125<T?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):Pe=0<T?Math.floor(1e3/T):5},c.unstable_getCurrentPriorityLevel=function(){return R},c.unstable_getFirstCallbackNode=function(){return s(q)},c.unstable_next=function(T){switch(R){case 1:case 2:case 3:var z=3;break;default:z=R}var B=R;R=z;try{return T()}finally{R=B}},c.unstable_pauseExecution=function(){},c.unstable_requestPaint=function(){},c.unstable_runWithPriority=function(T,z){switch(T){case 1:case 2:case 3:case 4:case 5:break;default:T=3}var B=R;R=T;try{return z()}finally{R=B}},c.unstable_scheduleCallback=function(T,z,B){var p=c.unstable_now();switch(typeof B=="object"&&B!==null?(B=B.delay,B=typeof B=="number"&&0<B?p+B:p):B=p,T){case 1:var k=-1;break;case 2:k=250;break;case 5:k=1073741823;break;case 4:k=1e4;break;default:k=5e3}return k=B+k,T={id:Q++,callback:z,priorityLevel:T,startTime:B,expirationTime:k,sortIndex:-1},B>p?(T.sortIndex=B,l(M,T),s(q)===null&&T===s(M)&&(G?(qe(ye),ye=-1):G=!0,fe(ue,B-p))):(T.sortIndex=k,l(q,T),Y||$||(Y=!0,Qe(Ke))),T},c.unstable_shouldYield=ct,c.unstable_wrapCallback=function(T){var z=R;return function(){var B=R;R=z;try{return T.apply(this,arguments)}finally{R=B}}}}(Oa)),Oa}var Ku;function ym(){return Ku||(Ku=1,Da.exports=gm()),Da.exports}/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Yu;function vm(){if(Yu)return Xe;Yu=1;var c=Xa(),l=ym();function s(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var w=new Set,y={};function x(e,t){C(e,t),C(e+"Capture",t)}function C(e,t){for(y[e]=t,e=0;e<t.length;e++)w.add(t[e])}var I=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),q=Object.prototype.hasOwnProperty,M=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Q={},P={};function R(e){return q.call(P,e)?!0:q.call(Q,e)?!1:M.test(e)?P[e]=!0:(Q[e]=!0,!1)}function $(e,t,n,o){if(n!==null&&n.type===0)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return o?!1:n!==null?!n.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function Y(e,t,n,o){if(t===null||typeof t>"u"||$(e,t,n,o))return!0;if(o)return!1;if(n!==null)switch(n.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function G(e,t,n,o,r,i,a){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=o,this.attributeNamespace=r,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var V={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){V[e]=new G(e,0,!1,e,null,!1,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];V[t]=new G(t,1,!1,e[1],null,!1,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){V[e]=new G(e,2,!1,e.toLowerCase(),null,!1,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){V[e]=new G(e,2,!1,e,null,!1,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){V[e]=new G(e,3,!1,e.toLowerCase(),null,!1,!1)}),["checked","multiple","muted","selected"].forEach(function(e){V[e]=new G(e,3,!0,e,null,!1,!1)}),["capture","download"].forEach(function(e){V[e]=new G(e,4,!1,e,null,!1,!1)}),["cols","rows","size","span"].forEach(function(e){V[e]=new G(e,6,!1,e,null,!1,!1)}),["rowSpan","start"].forEach(function(e){V[e]=new G(e,5,!1,e.toLowerCase(),null,!1,!1)});var qe=/[\-:]([a-z])/g;function xe(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(qe,xe);V[t]=new G(t,1,!1,e,null,!1,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(qe,xe);V[t]=new G(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(qe,xe);V[t]=new G(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)}),["tabIndex","crossOrigin"].forEach(function(e){V[e]=new G(e,1,!1,e.toLowerCase(),null,!1,!1)}),V.xlinkHref=new G("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach(function(e){V[e]=new G(e,1,!1,e.toLowerCase(),null,!0,!0)});function Se(e,t,n,o){var r=V.hasOwnProperty(t)?V[t]:null;(r!==null?r.type!==0:o||!(2<t.length)||t[0]!=="o"&&t[0]!=="O"||t[1]!=="n"&&t[1]!=="N")&&(Y(t,n,r,o)&&(n=null),o||r===null?R(t)&&(n===null?e.removeAttribute(t):e.setAttribute(t,""+n)):r.mustUseProperty?e[r.propertyName]=n===null?r.type===3?!1:"":n:(t=r.attributeName,o=r.attributeNamespace,n===null?e.removeAttribute(t):(r=r.type,n=r===3||r===4&&n===!0?"":""+n,o?e.setAttributeNS(o,t,n):e.setAttribute(t,n))))}var ue=c.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Ke=Symbol.for("react.element"),_e=Symbol.for("react.portal"),re=Symbol.for("react.fragment"),ye=Symbol.for("react.strict_mode"),Pe=Symbol.for("react.profiler"),ot=Symbol.for("react.provider"),ct=Symbol.for("react.context"),Te=Symbol.for("react.forward_ref"),Ue=Symbol.for("react.suspense"),me=Symbol.for("react.suspense_list"),De=Symbol.for("react.memo"),Qe=Symbol.for("react.lazy"),fe=Symbol.for("react.offscreen"),T=Symbol.iterator;function z(e){return e===null||typeof e!="object"?null:(e=T&&e[T]||e["@@iterator"],typeof e=="function"?e:null)}var B=Object.assign,p;function k(e){if(p===void 0)try{throw Error()}catch(n){var t=n.stack.trim().match(/\n( *(at )?)/);p=t&&t[1]||""}return`
`+p+e}var H=!1;function K(e,t){if(!e||H)return"";H=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(t,[])}catch(g){var o=g}Reflect.construct(e,[],t)}else{try{t.call()}catch(g){o=g}e.call(t.prototype)}else{try{throw Error()}catch(g){o=g}e()}}catch(g){if(g&&o&&typeof g.stack=="string"){for(var r=g.stack.split(`
`),i=o.stack.split(`
`),a=r.length-1,u=i.length-1;1<=a&&0<=u&&r[a]!==i[u];)u--;for(;1<=a&&0<=u;a--,u--)if(r[a]!==i[u]){if(a!==1||u!==1)do if(a--,u--,0>u||r[a]!==i[u]){var d=`
`+r[a].replace(" at new "," at ");return e.displayName&&d.includes("<anonymous>")&&(d=d.replace("<anonymous>",e.displayName)),d}while(1<=a&&0<=u);break}}}finally{H=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?k(e):""}function J(e){switch(e.tag){case 5:return k(e.type);case 16:return k("Lazy");case 13:return k("Suspense");case 19:return k("SuspenseList");case 0:case 2:case 15:return e=K(e.type,!1),e;case 11:return e=K(e.type.render,!1),e;case 1:return e=K(e.type,!0),e;default:return""}}function ee(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case re:return"Fragment";case _e:return"Portal";case Pe:return"Profiler";case ye:return"StrictMode";case Ue:return"Suspense";case me:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case ct:return(e.displayName||"Context")+".Consumer";case ot:return(e._context.displayName||"Context")+".Provider";case Te:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case De:return t=e.displayName||null,t!==null?t:ee(e.type)||"Memo";case Qe:t=e._payload,e=e._init;try{return ee(e(t))}catch{}}return null}function ie(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=t.render,e=e.displayName||e.name||"",t.displayName||(e!==""?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return ee(t);case 8:return t===ye?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t}return null}function ne(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function ce(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function Ye(e){var t=ce(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),o=""+e[t];if(!e.hasOwnProperty(t)&&typeof n<"u"&&typeof n.get=="function"&&typeof n.set=="function"){var r=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return r.call(this)},set:function(a){o=""+a,i.call(this,a)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return o},setValue:function(a){o=""+a},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function Mo(e){e._valueTracker||(e._valueTracker=Ye(e))}function Ya(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),o="";return e&&(o=ce(e)?e.checked?"true":"false":e.value),e=o,e!==n?(t.setValue(e),!0):!1}function Po(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}function Ur(e,t){var n=t.checked;return B({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:n??e._wrapperState.initialChecked})}function Za(e,t){var n=t.defaultValue==null?"":t.defaultValue,o=t.checked!=null?t.checked:t.defaultChecked;n=ne(t.value!=null?t.value:n),e._wrapperState={initialChecked:o,initialValue:n,controlled:t.type==="checkbox"||t.type==="radio"?t.checked!=null:t.value!=null}}function Ja(e,t){t=t.checked,t!=null&&Se(e,"checked",t,!1)}function Wr(e,t){Ja(e,t);var n=ne(t.value),o=t.type;if(n!=null)o==="number"?(n===0&&e.value===""||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if(o==="submit"||o==="reset"){e.removeAttribute("value");return}t.hasOwnProperty("value")?$r(e,t.type,n):t.hasOwnProperty("defaultValue")&&$r(e,t.type,ne(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function es(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var o=t.type;if(!(o!=="submit"&&o!=="reset"||t.value!==void 0&&t.value!==null))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}n=e.name,n!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,n!==""&&(e.name=n)}function $r(e,t,n){(t!=="number"||Po(e.ownerDocument)!==e)&&(n==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var zn=Array.isArray;function fn(e,t,n,o){if(e=e.options,t){t={};for(var r=0;r<n.length;r++)t["$"+n[r]]=!0;for(n=0;n<e.length;n++)r=t.hasOwnProperty("$"+e[n].value),e[n].selected!==r&&(e[n].selected=r),r&&o&&(e[n].defaultSelected=!0)}else{for(n=""+ne(n),t=null,r=0;r<e.length;r++){if(e[r].value===n){e[r].selected=!0,o&&(e[r].defaultSelected=!0);return}t!==null||e[r].disabled||(t=e[r])}t!==null&&(t.selected=!0)}}function Vr(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(s(91));return B({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ts(e,t){var n=t.value;if(n==null){if(n=t.children,t=t.defaultValue,n!=null){if(t!=null)throw Error(s(92));if(zn(n)){if(1<n.length)throw Error(s(93));n=n[0]}t=n}t==null&&(t=""),n=t}e._wrapperState={initialValue:ne(n)}}function ns(e,t){var n=ne(t.value),o=ne(t.defaultValue);n!=null&&(n=""+n,n!==e.value&&(e.value=n),t.defaultValue==null&&e.defaultValue!==n&&(e.defaultValue=n)),o!=null&&(e.defaultValue=""+o)}function os(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==""&&t!==null&&(e.value=t)}function rs(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Hr(e,t){return e==null||e==="http://www.w3.org/1999/xhtml"?rs(t):e==="http://www.w3.org/2000/svg"&&t==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var To,is=function(e){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(t,n,o,r){MSApp.execUnsafeLocalFunction(function(){return e(t,n,o,r)})}:e}(function(e,t){if(e.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in e)e.innerHTML=t;else{for(To=To||document.createElement("div"),To.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=To.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function Un(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===3){n.nodeValue=t;return}}e.textContent=t}var Wn={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},yc=["Webkit","ms","Moz","O"];Object.keys(Wn).forEach(function(e){yc.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Wn[t]=Wn[e]})});function as(e,t,n){return t==null||typeof t=="boolean"||t===""?"":n||typeof t!="number"||t===0||Wn.hasOwnProperty(e)&&Wn[e]?(""+t).trim():t+"px"}function ss(e,t){e=e.style;for(var n in t)if(t.hasOwnProperty(n)){var o=n.indexOf("--")===0,r=as(n,t[n],o);n==="float"&&(n="cssFloat"),o?e.setProperty(n,r):e[n]=r}}var vc=B({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Gr(e,t){if(t){if(vc[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(s(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(s(60));if(typeof t.dangerouslySetInnerHTML!="object"||!("__html"in t.dangerouslySetInnerHTML))throw Error(s(61))}if(t.style!=null&&typeof t.style!="object")throw Error(s(62))}}function Xr(e,t){if(e.indexOf("-")===-1)return typeof t.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Kr=null;function Yr(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var Zr=null,gn=null,yn=null;function ls(e){if(e=po(e)){if(typeof Zr!="function")throw Error(s(280));var t=e.stateNode;t&&(t=er(t),Zr(e.stateNode,e.type,t))}}function us(e){gn?yn?yn.push(e):yn=[e]:gn=e}function cs(){if(gn){var e=gn,t=yn;if(yn=gn=null,ls(e),t)for(e=0;e<t.length;e++)ls(t[e])}}function ds(e,t){return e(t)}function ms(){}var Jr=!1;function ps(e,t,n){if(Jr)return e(t,n);Jr=!0;try{return ds(e,t,n)}finally{Jr=!1,(gn!==null||yn!==null)&&(ms(),cs())}}function $n(e,t){var n=e.stateNode;if(n===null)return null;var o=er(n);if(o===null)return null;n=o[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(o=!o.disabled)||(e=e.type,o=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!o;break e;default:e=!1}if(e)return null;if(n&&typeof n!="function")throw Error(s(231,t,typeof n));return n}var ei=!1;if(I)try{var Vn={};Object.defineProperty(Vn,"passive",{get:function(){ei=!0}}),window.addEventListener("test",Vn,Vn),window.removeEventListener("test",Vn,Vn)}catch{ei=!1}function wc(e,t,n,o,r,i,a,u,d){var g=Array.prototype.slice.call(arguments,3);try{t.apply(n,g)}catch(b){this.onError(b)}}var Hn=!1,Qo=null,Ro=!1,ti=null,xc={onError:function(e){Hn=!0,Qo=e}};function Cc(e,t,n,o,r,i,a,u,d){Hn=!1,Qo=null,wc.apply(xc,arguments)}function _c(e,t,n,o,r,i,a,u,d){if(Cc.apply(this,arguments),Hn){if(Hn){var g=Qo;Hn=!1,Qo=null}else throw Error(s(198));Ro||(Ro=!0,ti=g)}}function Jt(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,(t.flags&4098)!==0&&(n=t.return),e=t.return;while(e)}return t.tag===3?n:null}function hs(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function fs(e){if(Jt(e)!==e)throw Error(s(188))}function kc(e){var t=e.alternate;if(!t){if(t=Jt(e),t===null)throw Error(s(188));return t!==e?null:e}for(var n=e,o=t;;){var r=n.return;if(r===null)break;var i=r.alternate;if(i===null){if(o=r.return,o!==null){n=o;continue}break}if(r.child===i.child){for(i=r.child;i;){if(i===n)return fs(r),e;if(i===o)return fs(r),t;i=i.sibling}throw Error(s(188))}if(n.return!==o.return)n=r,o=i;else{for(var a=!1,u=r.child;u;){if(u===n){a=!0,n=r,o=i;break}if(u===o){a=!0,o=r,n=i;break}u=u.sibling}if(!a){for(u=i.child;u;){if(u===n){a=!0,n=i,o=r;break}if(u===o){a=!0,o=i,n=r;break}u=u.sibling}if(!a)throw Error(s(189))}}if(n.alternate!==o)throw Error(s(190))}if(n.tag!==3)throw Error(s(188));return n.stateNode.current===n?e:t}function gs(e){return e=kc(e),e!==null?ys(e):null}function ys(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=ys(e);if(t!==null)return t;e=e.sibling}return null}var vs=l.unstable_scheduleCallback,ws=l.unstable_cancelCallback,bc=l.unstable_shouldYield,qc=l.unstable_requestPaint,ve=l.unstable_now,Sc=l.unstable_getCurrentPriorityLevel,ni=l.unstable_ImmediatePriority,xs=l.unstable_UserBlockingPriority,Fo=l.unstable_NormalPriority,Ic=l.unstable_LowPriority,Cs=l.unstable_IdlePriority,Ao=null,vt=null;function Ec(e){if(vt&&typeof vt.onCommitFiberRoot=="function")try{vt.onCommitFiberRoot(Ao,e,void 0,(e.current.flags&128)===128)}catch{}}var dt=Math.clz32?Math.clz32:Tc,Mc=Math.log,Pc=Math.LN2;function Tc(e){return e>>>=0,e===0?32:31-(Mc(e)/Pc|0)|0}var Bo=64,Lo=4194304;function Gn(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function No(e,t){var n=e.pendingLanes;if(n===0)return 0;var o=0,r=e.suspendedLanes,i=e.pingedLanes,a=n&268435455;if(a!==0){var u=a&~r;u!==0?o=Gn(u):(i&=a,i!==0&&(o=Gn(i)))}else a=n&~r,a!==0?o=Gn(a):i!==0&&(o=Gn(i));if(o===0)return 0;if(t!==0&&t!==o&&(t&r)===0&&(r=o&-o,i=t&-t,r>=i||r===16&&(i&4194240)!==0))return t;if((o&4)!==0&&(o|=n&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=o;0<t;)n=31-dt(t),r=1<<n,o|=e[n],t&=~r;return o}function Qc(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function Rc(e,t){for(var n=e.suspendedLanes,o=e.pingedLanes,r=e.expirationTimes,i=e.pendingLanes;0<i;){var a=31-dt(i),u=1<<a,d=r[a];d===-1?((u&n)===0||(u&o)!==0)&&(r[a]=Qc(u,t)):d<=t&&(e.expiredLanes|=u),i&=~u}}function oi(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function _s(){var e=Bo;return Bo<<=1,(Bo&4194240)===0&&(Bo=64),e}function ri(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Xn(e,t,n){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-dt(t),e[t]=n}function Fc(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var o=e.eventTimes;for(e=e.expirationTimes;0<n;){var r=31-dt(n),i=1<<r;t[r]=0,o[r]=-1,e[r]=-1,n&=~i}}function ii(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var o=31-dt(n),r=1<<o;r&t|e[o]&t&&(e[o]|=t),n&=~r}}var oe=0;function ks(e){return e&=-e,1<e?4<e?(e&268435455)!==0?16:536870912:4:1}var bs,ai,qs,Ss,Is,si=!1,Do=[],Rt=null,Ft=null,At=null,Kn=new Map,Yn=new Map,Bt=[],Ac="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Es(e,t){switch(e){case"focusin":case"focusout":Rt=null;break;case"dragenter":case"dragleave":Ft=null;break;case"mouseover":case"mouseout":At=null;break;case"pointerover":case"pointerout":Kn.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Yn.delete(t.pointerId)}}function Zn(e,t,n,o,r,i){return e===null||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:o,nativeEvent:i,targetContainers:[r]},t!==null&&(t=po(t),t!==null&&ai(t)),e):(e.eventSystemFlags|=o,t=e.targetContainers,r!==null&&t.indexOf(r)===-1&&t.push(r),e)}function Bc(e,t,n,o,r){switch(t){case"focusin":return Rt=Zn(Rt,e,t,n,o,r),!0;case"dragenter":return Ft=Zn(Ft,e,t,n,o,r),!0;case"mouseover":return At=Zn(At,e,t,n,o,r),!0;case"pointerover":var i=r.pointerId;return Kn.set(i,Zn(Kn.get(i)||null,e,t,n,o,r)),!0;case"gotpointercapture":return i=r.pointerId,Yn.set(i,Zn(Yn.get(i)||null,e,t,n,o,r)),!0}return!1}function Ms(e){var t=en(e.target);if(t!==null){var n=Jt(t);if(n!==null){if(t=n.tag,t===13){if(t=hs(n),t!==null){e.blockedOn=t,Is(e.priority,function(){qs(n)});return}}else if(t===3&&n.stateNode.current.memoizedState.isDehydrated){e.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}e.blockedOn=null}function Oo(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var n=ui(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(n===null){n=e.nativeEvent;var o=new n.constructor(n.type,n);Kr=o,n.target.dispatchEvent(o),Kr=null}else return t=po(n),t!==null&&ai(t),e.blockedOn=n,!1;t.shift()}return!0}function Ps(e,t,n){Oo(e)&&n.delete(t)}function Lc(){si=!1,Rt!==null&&Oo(Rt)&&(Rt=null),Ft!==null&&Oo(Ft)&&(Ft=null),At!==null&&Oo(At)&&(At=null),Kn.forEach(Ps),Yn.forEach(Ps)}function Jn(e,t){e.blockedOn===t&&(e.blockedOn=null,si||(si=!0,l.unstable_scheduleCallback(l.unstable_NormalPriority,Lc)))}function eo(e){function t(r){return Jn(r,e)}if(0<Do.length){Jn(Do[0],e);for(var n=1;n<Do.length;n++){var o=Do[n];o.blockedOn===e&&(o.blockedOn=null)}}for(Rt!==null&&Jn(Rt,e),Ft!==null&&Jn(Ft,e),At!==null&&Jn(At,e),Kn.forEach(t),Yn.forEach(t),n=0;n<Bt.length;n++)o=Bt[n],o.blockedOn===e&&(o.blockedOn=null);for(;0<Bt.length&&(n=Bt[0],n.blockedOn===null);)Ms(n),n.blockedOn===null&&Bt.shift()}var vn=ue.ReactCurrentBatchConfig,jo=!0;function Nc(e,t,n,o){var r=oe,i=vn.transition;vn.transition=null;try{oe=1,li(e,t,n,o)}finally{oe=r,vn.transition=i}}function Dc(e,t,n,o){var r=oe,i=vn.transition;vn.transition=null;try{oe=4,li(e,t,n,o)}finally{oe=r,vn.transition=i}}function li(e,t,n,o){if(jo){var r=ui(e,t,n,o);if(r===null)Si(e,t,o,zo,n),Es(e,o);else if(Bc(r,e,t,n,o))o.stopPropagation();else if(Es(e,o),t&4&&-1<Ac.indexOf(e)){for(;r!==null;){var i=po(r);if(i!==null&&bs(i),i=ui(e,t,n,o),i===null&&Si(e,t,o,zo,n),i===r)break;r=i}r!==null&&o.stopPropagation()}else Si(e,t,o,null,n)}}var zo=null;function ui(e,t,n,o){if(zo=null,e=Yr(o),e=en(e),e!==null)if(t=Jt(e),t===null)e=null;else if(n=t.tag,n===13){if(e=hs(t),e!==null)return e;e=null}else if(n===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return zo=e,null}function Ts(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Sc()){case ni:return 1;case xs:return 4;case Fo:case Ic:return 16;case Cs:return 536870912;default:return 16}default:return 16}}var Lt=null,ci=null,Uo=null;function Qs(){if(Uo)return Uo;var e,t=ci,n=t.length,o,r="value"in Lt?Lt.value:Lt.textContent,i=r.length;for(e=0;e<n&&t[e]===r[e];e++);var a=n-e;for(o=1;o<=a&&t[n-o]===r[i-o];o++);return Uo=r.slice(e,1<o?1-o:void 0)}function Wo(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function $o(){return!0}function Rs(){return!1}function Ze(e){function t(n,o,r,i,a){this._reactName=n,this._targetInst=r,this.type=o,this.nativeEvent=i,this.target=a,this.currentTarget=null;for(var u in e)e.hasOwnProperty(u)&&(n=e[u],this[u]=n?n(i):i[u]);return this.isDefaultPrevented=(i.defaultPrevented!=null?i.defaultPrevented:i.returnValue===!1)?$o:Rs,this.isPropagationStopped=Rs,this}return B(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!="unknown"&&(n.returnValue=!1),this.isDefaultPrevented=$o)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!="unknown"&&(n.cancelBubble=!0),this.isPropagationStopped=$o)},persist:function(){},isPersistent:$o}),t}var wn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},di=Ze(wn),to=B({},wn,{view:0,detail:0}),Oc=Ze(to),mi,pi,no,Vo=B({},to,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:fi,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==no&&(no&&e.type==="mousemove"?(mi=e.screenX-no.screenX,pi=e.screenY-no.screenY):pi=mi=0,no=e),mi)},movementY:function(e){return"movementY"in e?e.movementY:pi}}),Fs=Ze(Vo),jc=B({},Vo,{dataTransfer:0}),zc=Ze(jc),Uc=B({},to,{relatedTarget:0}),hi=Ze(Uc),Wc=B({},wn,{animationName:0,elapsedTime:0,pseudoElement:0}),$c=Ze(Wc),Vc=B({},wn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Hc=Ze(Vc),Gc=B({},wn,{data:0}),As=Ze(Gc),Xc={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Kc={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Yc={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Zc(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=Yc[e])?!!t[e]:!1}function fi(){return Zc}var Jc=B({},to,{key:function(e){if(e.key){var t=Xc[e.key]||e.key;if(t!=="Unidentified")return t}return e.type==="keypress"?(e=Wo(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?Kc[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:fi,charCode:function(e){return e.type==="keypress"?Wo(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?Wo(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),ed=Ze(Jc),td=B({},Vo,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Bs=Ze(td),nd=B({},to,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:fi}),od=Ze(nd),rd=B({},wn,{propertyName:0,elapsedTime:0,pseudoElement:0}),id=Ze(rd),ad=B({},Vo,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),sd=Ze(ad),ld=[9,13,27,32],gi=I&&"CompositionEvent"in window,oo=null;I&&"documentMode"in document&&(oo=document.documentMode);var ud=I&&"TextEvent"in window&&!oo,Ls=I&&(!gi||oo&&8<oo&&11>=oo),Ns=" ",Ds=!1;function Os(e,t){switch(e){case"keyup":return ld.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function js(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var xn=!1;function cd(e,t){switch(e){case"compositionend":return js(t);case"keypress":return t.which!==32?null:(Ds=!0,Ns);case"textInput":return e=t.data,e===Ns&&Ds?null:e;default:return null}}function dd(e,t){if(xn)return e==="compositionend"||!gi&&Os(e,t)?(e=Qs(),Uo=ci=Lt=null,xn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ls&&t.locale!=="ko"?null:t.data;default:return null}}var md={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function zs(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t==="input"?!!md[e.type]:t==="textarea"}function Us(e,t,n,o){us(o),t=Yo(t,"onChange"),0<t.length&&(n=new di("onChange","change",null,n,o),e.push({event:n,listeners:t}))}var ro=null,io=null;function pd(e){sl(e,0)}function Ho(e){var t=qn(e);if(Ya(t))return e}function hd(e,t){if(e==="change")return t}var Ws=!1;if(I){var yi;if(I){var vi="oninput"in document;if(!vi){var $s=document.createElement("div");$s.setAttribute("oninput","return;"),vi=typeof $s.oninput=="function"}yi=vi}else yi=!1;Ws=yi&&(!document.documentMode||9<document.documentMode)}function Vs(){ro&&(ro.detachEvent("onpropertychange",Hs),io=ro=null)}function Hs(e){if(e.propertyName==="value"&&Ho(io)){var t=[];Us(t,io,e,Yr(e)),ps(pd,t)}}function fd(e,t,n){e==="focusin"?(Vs(),ro=t,io=n,ro.attachEvent("onpropertychange",Hs)):e==="focusout"&&Vs()}function gd(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return Ho(io)}function yd(e,t){if(e==="click")return Ho(t)}function vd(e,t){if(e==="input"||e==="change")return Ho(t)}function wd(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var mt=typeof Object.is=="function"?Object.is:wd;function ao(e,t){if(mt(e,t))return!0;if(typeof e!="object"||e===null||typeof t!="object"||t===null)return!1;var n=Object.keys(e),o=Object.keys(t);if(n.length!==o.length)return!1;for(o=0;o<n.length;o++){var r=n[o];if(!q.call(t,r)||!mt(e[r],t[r]))return!1}return!0}function Gs(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Xs(e,t){var n=Gs(e);e=0;for(var o;n;){if(n.nodeType===3){if(o=e+n.textContent.length,e<=t&&o>=t)return{node:n,offset:t-e};e=o}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=Gs(n)}}function Ks(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?Ks(e,t.parentNode):"contains"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function Ys(){for(var e=window,t=Po();t instanceof e.HTMLIFrameElement;){try{var n=typeof t.contentWindow.location.href=="string"}catch{n=!1}if(n)e=t.contentWindow;else break;t=Po(e.document)}return t}function wi(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||t==="textarea"||e.contentEditable==="true")}function xd(e){var t=Ys(),n=e.focusedElem,o=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&Ks(n.ownerDocument.documentElement,n)){if(o!==null&&wi(n)){if(t=o.start,e=o.end,e===void 0&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(e=(t=n.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var r=n.textContent.length,i=Math.min(o.start,r);o=o.end===void 0?i:Math.min(o.end,r),!e.extend&&i>o&&(r=o,o=i,i=r),r=Xs(n,i);var a=Xs(n,o);r&&a&&(e.rangeCount!==1||e.anchorNode!==r.node||e.anchorOffset!==r.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&(t=t.createRange(),t.setStart(r.node,r.offset),e.removeAllRanges(),i>o?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}}for(t=[],e=n;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof n.focus=="function"&&n.focus(),n=0;n<t.length;n++)e=t[n],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Cd=I&&"documentMode"in document&&11>=document.documentMode,Cn=null,xi=null,so=null,Ci=!1;function Zs(e,t,n){var o=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;Ci||Cn==null||Cn!==Po(o)||(o=Cn,"selectionStart"in o&&wi(o)?o={start:o.selectionStart,end:o.selectionEnd}:(o=(o.ownerDocument&&o.ownerDocument.defaultView||window).getSelection(),o={anchorNode:o.anchorNode,anchorOffset:o.anchorOffset,focusNode:o.focusNode,focusOffset:o.focusOffset}),so&&ao(so,o)||(so=o,o=Yo(xi,"onSelect"),0<o.length&&(t=new di("onSelect","select",null,t,n),e.push({event:t,listeners:o}),t.target=Cn)))}function Go(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var _n={animationend:Go("Animation","AnimationEnd"),animationiteration:Go("Animation","AnimationIteration"),animationstart:Go("Animation","AnimationStart"),transitionend:Go("Transition","TransitionEnd")},_i={},Js={};I&&(Js=document.createElement("div").style,"AnimationEvent"in window||(delete _n.animationend.animation,delete _n.animationiteration.animation,delete _n.animationstart.animation),"TransitionEvent"in window||delete _n.transitionend.transition);function Xo(e){if(_i[e])return _i[e];if(!_n[e])return e;var t=_n[e],n;for(n in t)if(t.hasOwnProperty(n)&&n in Js)return _i[e]=t[n];return e}var el=Xo("animationend"),tl=Xo("animationiteration"),nl=Xo("animationstart"),ol=Xo("transitionend"),rl=new Map,il="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Nt(e,t){rl.set(e,t),x(t,[e])}for(var ki=0;ki<il.length;ki++){var bi=il[ki],_d=bi.toLowerCase(),kd=bi[0].toUpperCase()+bi.slice(1);Nt(_d,"on"+kd)}Nt(el,"onAnimationEnd"),Nt(tl,"onAnimationIteration"),Nt(nl,"onAnimationStart"),Nt("dblclick","onDoubleClick"),Nt("focusin","onFocus"),Nt("focusout","onBlur"),Nt(ol,"onTransitionEnd"),C("onMouseEnter",["mouseout","mouseover"]),C("onMouseLeave",["mouseout","mouseover"]),C("onPointerEnter",["pointerout","pointerover"]),C("onPointerLeave",["pointerout","pointerover"]),x("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),x("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),x("onBeforeInput",["compositionend","keypress","textInput","paste"]),x("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),x("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),x("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var lo="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),bd=new Set("cancel close invalid load scroll toggle".split(" ").concat(lo));function al(e,t,n){var o=e.type||"unknown-event";e.currentTarget=n,_c(o,t,void 0,e),e.currentTarget=null}function sl(e,t){t=(t&4)!==0;for(var n=0;n<e.length;n++){var o=e[n],r=o.event;o=o.listeners;e:{var i=void 0;if(t)for(var a=o.length-1;0<=a;a--){var u=o[a],d=u.instance,g=u.currentTarget;if(u=u.listener,d!==i&&r.isPropagationStopped())break e;al(r,u,g),i=d}else for(a=0;a<o.length;a++){if(u=o[a],d=u.instance,g=u.currentTarget,u=u.listener,d!==i&&r.isPropagationStopped())break e;al(r,u,g),i=d}}}if(Ro)throw e=ti,Ro=!1,ti=null,e}function se(e,t){var n=t[Qi];n===void 0&&(n=t[Qi]=new Set);var o=e+"__bubble";n.has(o)||(ll(t,e,2,!1),n.add(o))}function qi(e,t,n){var o=0;t&&(o|=4),ll(n,e,o,t)}var Ko="_reactListening"+Math.random().toString(36).slice(2);function uo(e){if(!e[Ko]){e[Ko]=!0,w.forEach(function(n){n!=="selectionchange"&&(bd.has(n)||qi(n,!1,e),qi(n,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[Ko]||(t[Ko]=!0,qi("selectionchange",!1,t))}}function ll(e,t,n,o){switch(Ts(t)){case 1:var r=Nc;break;case 4:r=Dc;break;default:r=li}n=r.bind(null,t,n,e),r=void 0,!ei||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(r=!0),o?r!==void 0?e.addEventListener(t,n,{capture:!0,passive:r}):e.addEventListener(t,n,!0):r!==void 0?e.addEventListener(t,n,{passive:r}):e.addEventListener(t,n,!1)}function Si(e,t,n,o,r){var i=o;if((t&1)===0&&(t&2)===0&&o!==null)e:for(;;){if(o===null)return;var a=o.tag;if(a===3||a===4){var u=o.stateNode.containerInfo;if(u===r||u.nodeType===8&&u.parentNode===r)break;if(a===4)for(a=o.return;a!==null;){var d=a.tag;if((d===3||d===4)&&(d=a.stateNode.containerInfo,d===r||d.nodeType===8&&d.parentNode===r))return;a=a.return}for(;u!==null;){if(a=en(u),a===null)return;if(d=a.tag,d===5||d===6){o=i=a;continue e}u=u.parentNode}}o=o.return}ps(function(){var g=i,b=Yr(n),S=[];e:{var _=rl.get(e);if(_!==void 0){var F=di,L=e;switch(e){case"keypress":if(Wo(n)===0)break e;case"keydown":case"keyup":F=ed;break;case"focusin":L="focus",F=hi;break;case"focusout":L="blur",F=hi;break;case"beforeblur":case"afterblur":F=hi;break;case"click":if(n.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":F=Fs;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":F=zc;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":F=od;break;case el:case tl:case nl:F=$c;break;case ol:F=id;break;case"scroll":F=Oc;break;case"wheel":F=sd;break;case"copy":case"cut":case"paste":F=Hc;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":F=Bs}var N=(t&4)!==0,we=!N&&e==="scroll",h=N?_!==null?_+"Capture":null:_;N=[];for(var m=g,f;m!==null;){f=m;var E=f.stateNode;if(f.tag===5&&E!==null&&(f=E,h!==null&&(E=$n(m,h),E!=null&&N.push(co(m,E,f)))),we)break;m=m.return}0<N.length&&(_=new F(_,L,null,n,b),S.push({event:_,listeners:N}))}}if((t&7)===0){e:{if(_=e==="mouseover"||e==="pointerover",F=e==="mouseout"||e==="pointerout",_&&n!==Kr&&(L=n.relatedTarget||n.fromElement)&&(en(L)||L[bt]))break e;if((F||_)&&(_=b.window===b?b:(_=b.ownerDocument)?_.defaultView||_.parentWindow:window,F?(L=n.relatedTarget||n.toElement,F=g,L=L?en(L):null,L!==null&&(we=Jt(L),L!==we||L.tag!==5&&L.tag!==6)&&(L=null)):(F=null,L=g),F!==L)){if(N=Fs,E="onMouseLeave",h="onMouseEnter",m="mouse",(e==="pointerout"||e==="pointerover")&&(N=Bs,E="onPointerLeave",h="onPointerEnter",m="pointer"),we=F==null?_:qn(F),f=L==null?_:qn(L),_=new N(E,m+"leave",F,n,b),_.target=we,_.relatedTarget=f,E=null,en(b)===g&&(N=new N(h,m+"enter",L,n,b),N.target=f,N.relatedTarget=we,E=N),we=E,F&&L)t:{for(N=F,h=L,m=0,f=N;f;f=kn(f))m++;for(f=0,E=h;E;E=kn(E))f++;for(;0<m-f;)N=kn(N),m--;for(;0<f-m;)h=kn(h),f--;for(;m--;){if(N===h||h!==null&&N===h.alternate)break t;N=kn(N),h=kn(h)}N=null}else N=null;F!==null&&ul(S,_,F,N,!1),L!==null&&we!==null&&ul(S,we,L,N,!0)}}e:{if(_=g?qn(g):window,F=_.nodeName&&_.nodeName.toLowerCase(),F==="select"||F==="input"&&_.type==="file")var D=hd;else if(zs(_))if(Ws)D=vd;else{D=gd;var O=fd}else(F=_.nodeName)&&F.toLowerCase()==="input"&&(_.type==="checkbox"||_.type==="radio")&&(D=yd);if(D&&(D=D(e,g))){Us(S,D,n,b);break e}O&&O(e,_,g),e==="focusout"&&(O=_._wrapperState)&&O.controlled&&_.type==="number"&&$r(_,"number",_.value)}switch(O=g?qn(g):window,e){case"focusin":(zs(O)||O.contentEditable==="true")&&(Cn=O,xi=g,so=null);break;case"focusout":so=xi=Cn=null;break;case"mousedown":Ci=!0;break;case"contextmenu":case"mouseup":case"dragend":Ci=!1,Zs(S,n,b);break;case"selectionchange":if(Cd)break;case"keydown":case"keyup":Zs(S,n,b)}var j;if(gi)e:{switch(e){case"compositionstart":var W="onCompositionStart";break e;case"compositionend":W="onCompositionEnd";break e;case"compositionupdate":W="onCompositionUpdate";break e}W=void 0}else xn?Os(e,n)&&(W="onCompositionEnd"):e==="keydown"&&n.keyCode===229&&(W="onCompositionStart");W&&(Ls&&n.locale!=="ko"&&(xn||W!=="onCompositionStart"?W==="onCompositionEnd"&&xn&&(j=Qs()):(Lt=b,ci="value"in Lt?Lt.value:Lt.textContent,xn=!0)),O=Yo(g,W),0<O.length&&(W=new As(W,e,null,n,b),S.push({event:W,listeners:O}),j?W.data=j:(j=js(n),j!==null&&(W.data=j)))),(j=ud?cd(e,n):dd(e,n))&&(g=Yo(g,"onBeforeInput"),0<g.length&&(b=new As("onBeforeInput","beforeinput",null,n,b),S.push({event:b,listeners:g}),b.data=j))}sl(S,t)})}function co(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Yo(e,t){for(var n=t+"Capture",o=[];e!==null;){var r=e,i=r.stateNode;r.tag===5&&i!==null&&(r=i,i=$n(e,n),i!=null&&o.unshift(co(e,i,r)),i=$n(e,t),i!=null&&o.push(co(e,i,r))),e=e.return}return o}function kn(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function ul(e,t,n,o,r){for(var i=t._reactName,a=[];n!==null&&n!==o;){var u=n,d=u.alternate,g=u.stateNode;if(d!==null&&d===o)break;u.tag===5&&g!==null&&(u=g,r?(d=$n(n,i),d!=null&&a.unshift(co(n,d,u))):r||(d=$n(n,i),d!=null&&a.push(co(n,d,u)))),n=n.return}a.length!==0&&e.push({event:t,listeners:a})}var qd=/\r\n?/g,Sd=/\u0000|\uFFFD/g;function cl(e){return(typeof e=="string"?e:""+e).replace(qd,`
`).replace(Sd,"")}function Zo(e,t,n){if(t=cl(t),cl(e)!==t&&n)throw Error(s(425))}function Jo(){}var Ii=null,Ei=null;function Mi(e,t){return e==="textarea"||e==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var Pi=typeof setTimeout=="function"?setTimeout:void 0,Id=typeof clearTimeout=="function"?clearTimeout:void 0,dl=typeof Promise=="function"?Promise:void 0,Ed=typeof queueMicrotask=="function"?queueMicrotask:typeof dl<"u"?function(e){return dl.resolve(null).then(e).catch(Md)}:Pi;function Md(e){setTimeout(function(){throw e})}function Ti(e,t){var n=t,o=0;do{var r=n.nextSibling;if(e.removeChild(n),r&&r.nodeType===8)if(n=r.data,n==="/$"){if(o===0){e.removeChild(r),eo(t);return}o--}else n!=="$"&&n!=="$?"&&n!=="$!"||o++;n=r}while(n);eo(t)}function Dt(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t==="$"||t==="$!"||t==="$?")break;if(t==="/$")return null}}return e}function ml(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="$"||n==="$!"||n==="$?"){if(t===0)return e;t--}else n==="/$"&&t++}e=e.previousSibling}return null}var bn=Math.random().toString(36).slice(2),wt="__reactFiber$"+bn,mo="__reactProps$"+bn,bt="__reactContainer$"+bn,Qi="__reactEvents$"+bn,Pd="__reactListeners$"+bn,Td="__reactHandles$"+bn;function en(e){var t=e[wt];if(t)return t;for(var n=e.parentNode;n;){if(t=n[bt]||n[wt]){if(n=t.alternate,t.child!==null||n!==null&&n.child!==null)for(e=ml(e);e!==null;){if(n=e[wt])return n;e=ml(e)}return t}e=n,n=e.parentNode}return null}function po(e){return e=e[wt]||e[bt],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function qn(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(s(33))}function er(e){return e[mo]||null}var Ri=[],Sn=-1;function Ot(e){return{current:e}}function le(e){0>Sn||(e.current=Ri[Sn],Ri[Sn]=null,Sn--)}function ae(e,t){Sn++,Ri[Sn]=e.current,e.current=t}var jt={},Ae=Ot(jt),We=Ot(!1),tn=jt;function In(e,t){var n=e.type.contextTypes;if(!n)return jt;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===t)return o.__reactInternalMemoizedMaskedChildContext;var r={},i;for(i in n)r[i]=t[i];return o&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=r),r}function $e(e){return e=e.childContextTypes,e!=null}function tr(){le(We),le(Ae)}function pl(e,t,n){if(Ae.current!==jt)throw Error(s(168));ae(Ae,t),ae(We,n)}function hl(e,t,n){var o=e.stateNode;if(t=t.childContextTypes,typeof o.getChildContext!="function")return n;o=o.getChildContext();for(var r in o)if(!(r in t))throw Error(s(108,ie(e)||"Unknown",r));return B({},n,o)}function nr(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||jt,tn=Ae.current,ae(Ae,e),ae(We,We.current),!0}function fl(e,t,n){var o=e.stateNode;if(!o)throw Error(s(169));n?(e=hl(e,t,tn),o.__reactInternalMemoizedMergedChildContext=e,le(We),le(Ae),ae(Ae,e)):le(We),ae(We,n)}var qt=null,or=!1,Fi=!1;function gl(e){qt===null?qt=[e]:qt.push(e)}function Qd(e){or=!0,gl(e)}function zt(){if(!Fi&&qt!==null){Fi=!0;var e=0,t=oe;try{var n=qt;for(oe=1;e<n.length;e++){var o=n[e];do o=o(!0);while(o!==null)}qt=null,or=!1}catch(r){throw qt!==null&&(qt=qt.slice(e+1)),vs(ni,zt),r}finally{oe=t,Fi=!1}}return null}var En=[],Mn=0,rr=null,ir=0,rt=[],it=0,nn=null,St=1,It="";function on(e,t){En[Mn++]=ir,En[Mn++]=rr,rr=e,ir=t}function yl(e,t,n){rt[it++]=St,rt[it++]=It,rt[it++]=nn,nn=e;var o=St;e=It;var r=32-dt(o)-1;o&=~(1<<r),n+=1;var i=32-dt(t)+r;if(30<i){var a=r-r%5;i=(o&(1<<a)-1).toString(32),o>>=a,r-=a,St=1<<32-dt(t)+r|n<<r|o,It=i+e}else St=1<<i|n<<r|o,It=e}function Ai(e){e.return!==null&&(on(e,1),yl(e,1,0))}function Bi(e){for(;e===rr;)rr=En[--Mn],En[Mn]=null,ir=En[--Mn],En[Mn]=null;for(;e===nn;)nn=rt[--it],rt[it]=null,It=rt[--it],rt[it]=null,St=rt[--it],rt[it]=null}var Je=null,et=null,de=!1,pt=null;function vl(e,t){var n=ut(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,t=e.deletions,t===null?(e.deletions=[n],e.flags|=16):t.push(n)}function wl(e,t){switch(e.tag){case 5:var n=e.type;return t=t.nodeType!==1||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,Je=e,et=Dt(t.firstChild),!0):!1;case 6:return t=e.pendingProps===""||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,Je=e,et=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(n=nn!==null?{id:St,overflow:It}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},n=ut(18,null,null,0),n.stateNode=t,n.return=e,e.child=n,Je=e,et=null,!0):!1;default:return!1}}function Li(e){return(e.mode&1)!==0&&(e.flags&128)===0}function Ni(e){if(de){var t=et;if(t){var n=t;if(!wl(e,t)){if(Li(e))throw Error(s(418));t=Dt(n.nextSibling);var o=Je;t&&wl(e,t)?vl(o,n):(e.flags=e.flags&-4097|2,de=!1,Je=e)}}else{if(Li(e))throw Error(s(418));e.flags=e.flags&-4097|2,de=!1,Je=e}}}function xl(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;Je=e}function ar(e){if(e!==Je)return!1;if(!de)return xl(e),de=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!=="head"&&t!=="body"&&!Mi(e.type,e.memoizedProps)),t&&(t=et)){if(Li(e))throw Cl(),Error(s(418));for(;t;)vl(e,t),t=Dt(t.nextSibling)}if(xl(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(s(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="/$"){if(t===0){et=Dt(e.nextSibling);break e}t--}else n!=="$"&&n!=="$!"&&n!=="$?"||t++}e=e.nextSibling}et=null}}else et=Je?Dt(e.stateNode.nextSibling):null;return!0}function Cl(){for(var e=et;e;)e=Dt(e.nextSibling)}function Pn(){et=Je=null,de=!1}function Di(e){pt===null?pt=[e]:pt.push(e)}var Rd=ue.ReactCurrentBatchConfig;function ho(e,t,n){if(e=n.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(n._owner){if(n=n._owner,n){if(n.tag!==1)throw Error(s(309));var o=n.stateNode}if(!o)throw Error(s(147,e));var r=o,i=""+e;return t!==null&&t.ref!==null&&typeof t.ref=="function"&&t.ref._stringRef===i?t.ref:(t=function(a){var u=r.refs;a===null?delete u[i]:u[i]=a},t._stringRef=i,t)}if(typeof e!="string")throw Error(s(284));if(!n._owner)throw Error(s(290,e))}return e}function sr(e,t){throw e=Object.prototype.toString.call(t),Error(s(31,e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function _l(e){var t=e._init;return t(e._payload)}function kl(e){function t(h,m){if(e){var f=h.deletions;f===null?(h.deletions=[m],h.flags|=16):f.push(m)}}function n(h,m){if(!e)return null;for(;m!==null;)t(h,m),m=m.sibling;return null}function o(h,m){for(h=new Map;m!==null;)m.key!==null?h.set(m.key,m):h.set(m.index,m),m=m.sibling;return h}function r(h,m){return h=Kt(h,m),h.index=0,h.sibling=null,h}function i(h,m,f){return h.index=f,e?(f=h.alternate,f!==null?(f=f.index,f<m?(h.flags|=2,m):f):(h.flags|=2,m)):(h.flags|=1048576,m)}function a(h){return e&&h.alternate===null&&(h.flags|=2),h}function u(h,m,f,E){return m===null||m.tag!==6?(m=Pa(f,h.mode,E),m.return=h,m):(m=r(m,f),m.return=h,m)}function d(h,m,f,E){var D=f.type;return D===re?b(h,m,f.props.children,E,f.key):m!==null&&(m.elementType===D||typeof D=="object"&&D!==null&&D.$$typeof===Qe&&_l(D)===m.type)?(E=r(m,f.props),E.ref=ho(h,m,f),E.return=h,E):(E=Tr(f.type,f.key,f.props,null,h.mode,E),E.ref=ho(h,m,f),E.return=h,E)}function g(h,m,f,E){return m===null||m.tag!==4||m.stateNode.containerInfo!==f.containerInfo||m.stateNode.implementation!==f.implementation?(m=Ta(f,h.mode,E),m.return=h,m):(m=r(m,f.children||[]),m.return=h,m)}function b(h,m,f,E,D){return m===null||m.tag!==7?(m=mn(f,h.mode,E,D),m.return=h,m):(m=r(m,f),m.return=h,m)}function S(h,m,f){if(typeof m=="string"&&m!==""||typeof m=="number")return m=Pa(""+m,h.mode,f),m.return=h,m;if(typeof m=="object"&&m!==null){switch(m.$$typeof){case Ke:return f=Tr(m.type,m.key,m.props,null,h.mode,f),f.ref=ho(h,null,m),f.return=h,f;case _e:return m=Ta(m,h.mode,f),m.return=h,m;case Qe:var E=m._init;return S(h,E(m._payload),f)}if(zn(m)||z(m))return m=mn(m,h.mode,f,null),m.return=h,m;sr(h,m)}return null}function _(h,m,f,E){var D=m!==null?m.key:null;if(typeof f=="string"&&f!==""||typeof f=="number")return D!==null?null:u(h,m,""+f,E);if(typeof f=="object"&&f!==null){switch(f.$$typeof){case Ke:return f.key===D?d(h,m,f,E):null;case _e:return f.key===D?g(h,m,f,E):null;case Qe:return D=f._init,_(h,m,D(f._payload),E)}if(zn(f)||z(f))return D!==null?null:b(h,m,f,E,null);sr(h,f)}return null}function F(h,m,f,E,D){if(typeof E=="string"&&E!==""||typeof E=="number")return h=h.get(f)||null,u(m,h,""+E,D);if(typeof E=="object"&&E!==null){switch(E.$$typeof){case Ke:return h=h.get(E.key===null?f:E.key)||null,d(m,h,E,D);case _e:return h=h.get(E.key===null?f:E.key)||null,g(m,h,E,D);case Qe:var O=E._init;return F(h,m,f,O(E._payload),D)}if(zn(E)||z(E))return h=h.get(f)||null,b(m,h,E,D,null);sr(m,E)}return null}function L(h,m,f,E){for(var D=null,O=null,j=m,W=m=0,Me=null;j!==null&&W<f.length;W++){j.index>W?(Me=j,j=null):Me=j.sibling;var te=_(h,j,f[W],E);if(te===null){j===null&&(j=Me);break}e&&j&&te.alternate===null&&t(h,j),m=i(te,m,W),O===null?D=te:O.sibling=te,O=te,j=Me}if(W===f.length)return n(h,j),de&&on(h,W),D;if(j===null){for(;W<f.length;W++)j=S(h,f[W],E),j!==null&&(m=i(j,m,W),O===null?D=j:O.sibling=j,O=j);return de&&on(h,W),D}for(j=o(h,j);W<f.length;W++)Me=F(j,h,W,f[W],E),Me!==null&&(e&&Me.alternate!==null&&j.delete(Me.key===null?W:Me.key),m=i(Me,m,W),O===null?D=Me:O.sibling=Me,O=Me);return e&&j.forEach(function(Yt){return t(h,Yt)}),de&&on(h,W),D}function N(h,m,f,E){var D=z(f);if(typeof D!="function")throw Error(s(150));if(f=D.call(f),f==null)throw Error(s(151));for(var O=D=null,j=m,W=m=0,Me=null,te=f.next();j!==null&&!te.done;W++,te=f.next()){j.index>W?(Me=j,j=null):Me=j.sibling;var Yt=_(h,j,te.value,E);if(Yt===null){j===null&&(j=Me);break}e&&j&&Yt.alternate===null&&t(h,j),m=i(Yt,m,W),O===null?D=Yt:O.sibling=Yt,O=Yt,j=Me}if(te.done)return n(h,j),de&&on(h,W),D;if(j===null){for(;!te.done;W++,te=f.next())te=S(h,te.value,E),te!==null&&(m=i(te,m,W),O===null?D=te:O.sibling=te,O=te);return de&&on(h,W),D}for(j=o(h,j);!te.done;W++,te=f.next())te=F(j,h,W,te.value,E),te!==null&&(e&&te.alternate!==null&&j.delete(te.key===null?W:te.key),m=i(te,m,W),O===null?D=te:O.sibling=te,O=te);return e&&j.forEach(function(mm){return t(h,mm)}),de&&on(h,W),D}function we(h,m,f,E){if(typeof f=="object"&&f!==null&&f.type===re&&f.key===null&&(f=f.props.children),typeof f=="object"&&f!==null){switch(f.$$typeof){case Ke:e:{for(var D=f.key,O=m;O!==null;){if(O.key===D){if(D=f.type,D===re){if(O.tag===7){n(h,O.sibling),m=r(O,f.props.children),m.return=h,h=m;break e}}else if(O.elementType===D||typeof D=="object"&&D!==null&&D.$$typeof===Qe&&_l(D)===O.type){n(h,O.sibling),m=r(O,f.props),m.ref=ho(h,O,f),m.return=h,h=m;break e}n(h,O);break}else t(h,O);O=O.sibling}f.type===re?(m=mn(f.props.children,h.mode,E,f.key),m.return=h,h=m):(E=Tr(f.type,f.key,f.props,null,h.mode,E),E.ref=ho(h,m,f),E.return=h,h=E)}return a(h);case _e:e:{for(O=f.key;m!==null;){if(m.key===O)if(m.tag===4&&m.stateNode.containerInfo===f.containerInfo&&m.stateNode.implementation===f.implementation){n(h,m.sibling),m=r(m,f.children||[]),m.return=h,h=m;break e}else{n(h,m);break}else t(h,m);m=m.sibling}m=Ta(f,h.mode,E),m.return=h,h=m}return a(h);case Qe:return O=f._init,we(h,m,O(f._payload),E)}if(zn(f))return L(h,m,f,E);if(z(f))return N(h,m,f,E);sr(h,f)}return typeof f=="string"&&f!==""||typeof f=="number"?(f=""+f,m!==null&&m.tag===6?(n(h,m.sibling),m=r(m,f),m.return=h,h=m):(n(h,m),m=Pa(f,h.mode,E),m.return=h,h=m),a(h)):n(h,m)}return we}var Tn=kl(!0),bl=kl(!1),lr=Ot(null),ur=null,Qn=null,Oi=null;function ji(){Oi=Qn=ur=null}function zi(e){var t=lr.current;le(lr),e._currentValue=t}function Ui(e,t,n){for(;e!==null;){var o=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,o!==null&&(o.childLanes|=t)):o!==null&&(o.childLanes&t)!==t&&(o.childLanes|=t),e===n)break;e=e.return}}function Rn(e,t){ur=e,Oi=Qn=null,e=e.dependencies,e!==null&&e.firstContext!==null&&((e.lanes&t)!==0&&(Ve=!0),e.firstContext=null)}function at(e){var t=e._currentValue;if(Oi!==e)if(e={context:e,memoizedValue:t,next:null},Qn===null){if(ur===null)throw Error(s(308));Qn=e,ur.dependencies={lanes:0,firstContext:e}}else Qn=Qn.next=e;return t}var rn=null;function Wi(e){rn===null?rn=[e]:rn.push(e)}function ql(e,t,n,o){var r=t.interleaved;return r===null?(n.next=n,Wi(t)):(n.next=r.next,r.next=n),t.interleaved=n,Et(e,o)}function Et(e,t){e.lanes|=t;var n=e.alternate;for(n!==null&&(n.lanes|=t),n=e,e=e.return;e!==null;)e.childLanes|=t,n=e.alternate,n!==null&&(n.childLanes|=t),n=e,e=e.return;return n.tag===3?n.stateNode:null}var Ut=!1;function $i(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Sl(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Mt(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Wt(e,t,n){var o=e.updateQueue;if(o===null)return null;if(o=o.shared,(Z&2)!==0){var r=o.pending;return r===null?t.next=t:(t.next=r.next,r.next=t),o.pending=t,Et(e,n)}return r=o.interleaved,r===null?(t.next=t,Wi(o)):(t.next=r.next,r.next=t),o.interleaved=t,Et(e,n)}function cr(e,t,n){if(t=t.updateQueue,t!==null&&(t=t.shared,(n&4194240)!==0)){var o=t.lanes;o&=e.pendingLanes,n|=o,t.lanes=n,ii(e,n)}}function Il(e,t){var n=e.updateQueue,o=e.alternate;if(o!==null&&(o=o.updateQueue,n===o)){var r=null,i=null;if(n=n.firstBaseUpdate,n!==null){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};i===null?r=i=a:i=i.next=a,n=n.next}while(n!==null);i===null?r=i=t:i=i.next=t}else r=i=t;n={baseState:o.baseState,firstBaseUpdate:r,lastBaseUpdate:i,shared:o.shared,effects:o.effects},e.updateQueue=n;return}e=n.lastBaseUpdate,e===null?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function dr(e,t,n,o){var r=e.updateQueue;Ut=!1;var i=r.firstBaseUpdate,a=r.lastBaseUpdate,u=r.shared.pending;if(u!==null){r.shared.pending=null;var d=u,g=d.next;d.next=null,a===null?i=g:a.next=g,a=d;var b=e.alternate;b!==null&&(b=b.updateQueue,u=b.lastBaseUpdate,u!==a&&(u===null?b.firstBaseUpdate=g:u.next=g,b.lastBaseUpdate=d))}if(i!==null){var S=r.baseState;a=0,b=g=d=null,u=i;do{var _=u.lane,F=u.eventTime;if((o&_)===_){b!==null&&(b=b.next={eventTime:F,lane:0,tag:u.tag,payload:u.payload,callback:u.callback,next:null});e:{var L=e,N=u;switch(_=t,F=n,N.tag){case 1:if(L=N.payload,typeof L=="function"){S=L.call(F,S,_);break e}S=L;break e;case 3:L.flags=L.flags&-65537|128;case 0:if(L=N.payload,_=typeof L=="function"?L.call(F,S,_):L,_==null)break e;S=B({},S,_);break e;case 2:Ut=!0}}u.callback!==null&&u.lane!==0&&(e.flags|=64,_=r.effects,_===null?r.effects=[u]:_.push(u))}else F={eventTime:F,lane:_,tag:u.tag,payload:u.payload,callback:u.callback,next:null},b===null?(g=b=F,d=S):b=b.next=F,a|=_;if(u=u.next,u===null){if(u=r.shared.pending,u===null)break;_=u,u=_.next,_.next=null,r.lastBaseUpdate=_,r.shared.pending=null}}while(!0);if(b===null&&(d=S),r.baseState=d,r.firstBaseUpdate=g,r.lastBaseUpdate=b,t=r.shared.interleaved,t!==null){r=t;do a|=r.lane,r=r.next;while(r!==t)}else i===null&&(r.shared.lanes=0);ln|=a,e.lanes=a,e.memoizedState=S}}function El(e,t,n){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var o=e[t],r=o.callback;if(r!==null){if(o.callback=null,o=n,typeof r!="function")throw Error(s(191,r));r.call(o)}}}var fo={},xt=Ot(fo),go=Ot(fo),yo=Ot(fo);function an(e){if(e===fo)throw Error(s(174));return e}function Vi(e,t){switch(ae(yo,t),ae(go,e),ae(xt,fo),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Hr(null,"");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=Hr(t,e)}le(xt),ae(xt,t)}function Fn(){le(xt),le(go),le(yo)}function Ml(e){an(yo.current);var t=an(xt.current),n=Hr(t,e.type);t!==n&&(ae(go,e),ae(xt,n))}function Hi(e){go.current===e&&(le(xt),le(go))}var pe=Ot(0);function mr(e){for(var t=e;t!==null;){if(t.tag===13){var n=t.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data==="$?"||n.data==="$!"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if((t.flags&128)!==0)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Gi=[];function Xi(){for(var e=0;e<Gi.length;e++)Gi[e]._workInProgressVersionPrimary=null;Gi.length=0}var pr=ue.ReactCurrentDispatcher,Ki=ue.ReactCurrentBatchConfig,sn=0,he=null,ke=null,Ie=null,hr=!1,vo=!1,wo=0,Fd=0;function Be(){throw Error(s(321))}function Yi(e,t){if(t===null)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!mt(e[n],t[n]))return!1;return!0}function Zi(e,t,n,o,r,i){if(sn=i,he=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,pr.current=e===null||e.memoizedState===null?Nd:Dd,e=n(o,r),vo){i=0;do{if(vo=!1,wo=0,25<=i)throw Error(s(301));i+=1,Ie=ke=null,t.updateQueue=null,pr.current=Od,e=n(o,r)}while(vo)}if(pr.current=yr,t=ke!==null&&ke.next!==null,sn=0,Ie=ke=he=null,hr=!1,t)throw Error(s(300));return e}function Ji(){var e=wo!==0;return wo=0,e}function Ct(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return Ie===null?he.memoizedState=Ie=e:Ie=Ie.next=e,Ie}function st(){if(ke===null){var e=he.alternate;e=e!==null?e.memoizedState:null}else e=ke.next;var t=Ie===null?he.memoizedState:Ie.next;if(t!==null)Ie=t,ke=e;else{if(e===null)throw Error(s(310));ke=e,e={memoizedState:ke.memoizedState,baseState:ke.baseState,baseQueue:ke.baseQueue,queue:ke.queue,next:null},Ie===null?he.memoizedState=Ie=e:Ie=Ie.next=e}return Ie}function xo(e,t){return typeof t=="function"?t(e):t}function ea(e){var t=st(),n=t.queue;if(n===null)throw Error(s(311));n.lastRenderedReducer=e;var o=ke,r=o.baseQueue,i=n.pending;if(i!==null){if(r!==null){var a=r.next;r.next=i.next,i.next=a}o.baseQueue=r=i,n.pending=null}if(r!==null){i=r.next,o=o.baseState;var u=a=null,d=null,g=i;do{var b=g.lane;if((sn&b)===b)d!==null&&(d=d.next={lane:0,action:g.action,hasEagerState:g.hasEagerState,eagerState:g.eagerState,next:null}),o=g.hasEagerState?g.eagerState:e(o,g.action);else{var S={lane:b,action:g.action,hasEagerState:g.hasEagerState,eagerState:g.eagerState,next:null};d===null?(u=d=S,a=o):d=d.next=S,he.lanes|=b,ln|=b}g=g.next}while(g!==null&&g!==i);d===null?a=o:d.next=u,mt(o,t.memoizedState)||(Ve=!0),t.memoizedState=o,t.baseState=a,t.baseQueue=d,n.lastRenderedState=o}if(e=n.interleaved,e!==null){r=e;do i=r.lane,he.lanes|=i,ln|=i,r=r.next;while(r!==e)}else r===null&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function ta(e){var t=st(),n=t.queue;if(n===null)throw Error(s(311));n.lastRenderedReducer=e;var o=n.dispatch,r=n.pending,i=t.memoizedState;if(r!==null){n.pending=null;var a=r=r.next;do i=e(i,a.action),a=a.next;while(a!==r);mt(i,t.memoizedState)||(Ve=!0),t.memoizedState=i,t.baseQueue===null&&(t.baseState=i),n.lastRenderedState=i}return[i,o]}function Pl(){}function Tl(e,t){var n=he,o=st(),r=t(),i=!mt(o.memoizedState,r);if(i&&(o.memoizedState=r,Ve=!0),o=o.queue,na(Fl.bind(null,n,o,e),[e]),o.getSnapshot!==t||i||Ie!==null&&Ie.memoizedState.tag&1){if(n.flags|=2048,Co(9,Rl.bind(null,n,o,r,t),void 0,null),Ee===null)throw Error(s(349));(sn&30)!==0||Ql(n,t,r)}return r}function Ql(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},t=he.updateQueue,t===null?(t={lastEffect:null,stores:null},he.updateQueue=t,t.stores=[e]):(n=t.stores,n===null?t.stores=[e]:n.push(e))}function Rl(e,t,n,o){t.value=n,t.getSnapshot=o,Al(t)&&Bl(e)}function Fl(e,t,n){return n(function(){Al(t)&&Bl(e)})}function Al(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!mt(e,n)}catch{return!0}}function Bl(e){var t=Et(e,1);t!==null&&yt(t,e,1,-1)}function Ll(e){var t=Ct();return typeof e=="function"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:xo,lastRenderedState:e},t.queue=e,e=e.dispatch=Ld.bind(null,he,e),[t.memoizedState,e]}function Co(e,t,n,o){return e={tag:e,create:t,destroy:n,deps:o,next:null},t=he.updateQueue,t===null?(t={lastEffect:null,stores:null},he.updateQueue=t,t.lastEffect=e.next=e):(n=t.lastEffect,n===null?t.lastEffect=e.next=e:(o=n.next,n.next=e,e.next=o,t.lastEffect=e)),e}function Nl(){return st().memoizedState}function fr(e,t,n,o){var r=Ct();he.flags|=e,r.memoizedState=Co(1|t,n,void 0,o===void 0?null:o)}function gr(e,t,n,o){var r=st();o=o===void 0?null:o;var i=void 0;if(ke!==null){var a=ke.memoizedState;if(i=a.destroy,o!==null&&Yi(o,a.deps)){r.memoizedState=Co(t,n,i,o);return}}he.flags|=e,r.memoizedState=Co(1|t,n,i,o)}function Dl(e,t){return fr(8390656,8,e,t)}function na(e,t){return gr(2048,8,e,t)}function Ol(e,t){return gr(4,2,e,t)}function jl(e,t){return gr(4,4,e,t)}function zl(e,t){if(typeof t=="function")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function Ul(e,t,n){return n=n!=null?n.concat([e]):null,gr(4,4,zl.bind(null,t,e),n)}function oa(){}function Wl(e,t){var n=st();t=t===void 0?null:t;var o=n.memoizedState;return o!==null&&t!==null&&Yi(t,o[1])?o[0]:(n.memoizedState=[e,t],e)}function $l(e,t){var n=st();t=t===void 0?null:t;var o=n.memoizedState;return o!==null&&t!==null&&Yi(t,o[1])?o[0]:(e=e(),n.memoizedState=[e,t],e)}function Vl(e,t,n){return(sn&21)===0?(e.baseState&&(e.baseState=!1,Ve=!0),e.memoizedState=n):(mt(n,t)||(n=_s(),he.lanes|=n,ln|=n,e.baseState=!0),t)}function Ad(e,t){var n=oe;oe=n!==0&&4>n?n:4,e(!0);var o=Ki.transition;Ki.transition={};try{e(!1),t()}finally{oe=n,Ki.transition=o}}function Hl(){return st().memoizedState}function Bd(e,t,n){var o=Gt(e);if(n={lane:o,action:n,hasEagerState:!1,eagerState:null,next:null},Gl(e))Xl(t,n);else if(n=ql(e,t,n,o),n!==null){var r=je();yt(n,e,o,r),Kl(n,t,o)}}function Ld(e,t,n){var o=Gt(e),r={lane:o,action:n,hasEagerState:!1,eagerState:null,next:null};if(Gl(e))Xl(t,r);else{var i=e.alternate;if(e.lanes===0&&(i===null||i.lanes===0)&&(i=t.lastRenderedReducer,i!==null))try{var a=t.lastRenderedState,u=i(a,n);if(r.hasEagerState=!0,r.eagerState=u,mt(u,a)){var d=t.interleaved;d===null?(r.next=r,Wi(t)):(r.next=d.next,d.next=r),t.interleaved=r;return}}catch{}finally{}n=ql(e,t,r,o),n!==null&&(r=je(),yt(n,e,o,r),Kl(n,t,o))}}function Gl(e){var t=e.alternate;return e===he||t!==null&&t===he}function Xl(e,t){vo=hr=!0;var n=e.pending;n===null?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Kl(e,t,n){if((n&4194240)!==0){var o=t.lanes;o&=e.pendingLanes,n|=o,t.lanes=n,ii(e,n)}}var yr={readContext:at,useCallback:Be,useContext:Be,useEffect:Be,useImperativeHandle:Be,useInsertionEffect:Be,useLayoutEffect:Be,useMemo:Be,useReducer:Be,useRef:Be,useState:Be,useDebugValue:Be,useDeferredValue:Be,useTransition:Be,useMutableSource:Be,useSyncExternalStore:Be,useId:Be,unstable_isNewReconciler:!1},Nd={readContext:at,useCallback:function(e,t){return Ct().memoizedState=[e,t===void 0?null:t],e},useContext:at,useEffect:Dl,useImperativeHandle:function(e,t,n){return n=n!=null?n.concat([e]):null,fr(4194308,4,zl.bind(null,t,e),n)},useLayoutEffect:function(e,t){return fr(4194308,4,e,t)},useInsertionEffect:function(e,t){return fr(4,2,e,t)},useMemo:function(e,t){var n=Ct();return t=t===void 0?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var o=Ct();return t=n!==void 0?n(t):t,o.memoizedState=o.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},o.queue=e,e=e.dispatch=Bd.bind(null,he,e),[o.memoizedState,e]},useRef:function(e){var t=Ct();return e={current:e},t.memoizedState=e},useState:Ll,useDebugValue:oa,useDeferredValue:function(e){return Ct().memoizedState=e},useTransition:function(){var e=Ll(!1),t=e[0];return e=Ad.bind(null,e[1]),Ct().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var o=he,r=Ct();if(de){if(n===void 0)throw Error(s(407));n=n()}else{if(n=t(),Ee===null)throw Error(s(349));(sn&30)!==0||Ql(o,t,n)}r.memoizedState=n;var i={value:n,getSnapshot:t};return r.queue=i,Dl(Fl.bind(null,o,i,e),[e]),o.flags|=2048,Co(9,Rl.bind(null,o,i,n,t),void 0,null),n},useId:function(){var e=Ct(),t=Ee.identifierPrefix;if(de){var n=It,o=St;n=(o&~(1<<32-dt(o)-1)).toString(32)+n,t=":"+t+"R"+n,n=wo++,0<n&&(t+="H"+n.toString(32)),t+=":"}else n=Fd++,t=":"+t+"r"+n.toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},Dd={readContext:at,useCallback:Wl,useContext:at,useEffect:na,useImperativeHandle:Ul,useInsertionEffect:Ol,useLayoutEffect:jl,useMemo:$l,useReducer:ea,useRef:Nl,useState:function(){return ea(xo)},useDebugValue:oa,useDeferredValue:function(e){var t=st();return Vl(t,ke.memoizedState,e)},useTransition:function(){var e=ea(xo)[0],t=st().memoizedState;return[e,t]},useMutableSource:Pl,useSyncExternalStore:Tl,useId:Hl,unstable_isNewReconciler:!1},Od={readContext:at,useCallback:Wl,useContext:at,useEffect:na,useImperativeHandle:Ul,useInsertionEffect:Ol,useLayoutEffect:jl,useMemo:$l,useReducer:ta,useRef:Nl,useState:function(){return ta(xo)},useDebugValue:oa,useDeferredValue:function(e){var t=st();return ke===null?t.memoizedState=e:Vl(t,ke.memoizedState,e)},useTransition:function(){var e=ta(xo)[0],t=st().memoizedState;return[e,t]},useMutableSource:Pl,useSyncExternalStore:Tl,useId:Hl,unstable_isNewReconciler:!1};function ht(e,t){if(e&&e.defaultProps){t=B({},t),e=e.defaultProps;for(var n in e)t[n]===void 0&&(t[n]=e[n]);return t}return t}function ra(e,t,n,o){t=e.memoizedState,n=n(o,t),n=n==null?t:B({},t,n),e.memoizedState=n,e.lanes===0&&(e.updateQueue.baseState=n)}var vr={isMounted:function(e){return(e=e._reactInternals)?Jt(e)===e:!1},enqueueSetState:function(e,t,n){e=e._reactInternals;var o=je(),r=Gt(e),i=Mt(o,r);i.payload=t,n!=null&&(i.callback=n),t=Wt(e,i,r),t!==null&&(yt(t,e,r,o),cr(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var o=je(),r=Gt(e),i=Mt(o,r);i.tag=1,i.payload=t,n!=null&&(i.callback=n),t=Wt(e,i,r),t!==null&&(yt(t,e,r,o),cr(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=je(),o=Gt(e),r=Mt(n,o);r.tag=2,t!=null&&(r.callback=t),t=Wt(e,r,o),t!==null&&(yt(t,e,o,n),cr(t,e,o))}};function Yl(e,t,n,o,r,i,a){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(o,i,a):t.prototype&&t.prototype.isPureReactComponent?!ao(n,o)||!ao(r,i):!0}function Zl(e,t,n){var o=!1,r=jt,i=t.contextType;return typeof i=="object"&&i!==null?i=at(i):(r=$e(t)?tn:Ae.current,o=t.contextTypes,i=(o=o!=null)?In(e,r):jt),t=new t(n,i),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=vr,e.stateNode=t,t._reactInternals=e,o&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=r,e.__reactInternalMemoizedMaskedChildContext=i),t}function Jl(e,t,n,o){e=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(n,o),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(n,o),t.state!==e&&vr.enqueueReplaceState(t,t.state,null)}function ia(e,t,n,o){var r=e.stateNode;r.props=n,r.state=e.memoizedState,r.refs={},$i(e);var i=t.contextType;typeof i=="object"&&i!==null?r.context=at(i):(i=$e(t)?tn:Ae.current,r.context=In(e,i)),r.state=e.memoizedState,i=t.getDerivedStateFromProps,typeof i=="function"&&(ra(e,t,i,n),r.state=e.memoizedState),typeof t.getDerivedStateFromProps=="function"||typeof r.getSnapshotBeforeUpdate=="function"||typeof r.UNSAFE_componentWillMount!="function"&&typeof r.componentWillMount!="function"||(t=r.state,typeof r.componentWillMount=="function"&&r.componentWillMount(),typeof r.UNSAFE_componentWillMount=="function"&&r.UNSAFE_componentWillMount(),t!==r.state&&vr.enqueueReplaceState(r,r.state,null),dr(e,n,r,o),r.state=e.memoizedState),typeof r.componentDidMount=="function"&&(e.flags|=4194308)}function An(e,t){try{var n="",o=t;do n+=J(o),o=o.return;while(o);var r=n}catch(i){r=`
Error generating stack: `+i.message+`
`+i.stack}return{value:e,source:t,stack:r,digest:null}}function aa(e,t,n){return{value:e,source:null,stack:n??null,digest:t??null}}function sa(e,t){try{console.error(t.value)}catch(n){setTimeout(function(){throw n})}}var jd=typeof WeakMap=="function"?WeakMap:Map;function eu(e,t,n){n=Mt(-1,n),n.tag=3,n.payload={element:null};var o=t.value;return n.callback=function(){qr||(qr=!0,_a=o),sa(e,t)},n}function tu(e,t,n){n=Mt(-1,n),n.tag=3;var o=e.type.getDerivedStateFromError;if(typeof o=="function"){var r=t.value;n.payload=function(){return o(r)},n.callback=function(){sa(e,t)}}var i=e.stateNode;return i!==null&&typeof i.componentDidCatch=="function"&&(n.callback=function(){sa(e,t),typeof o!="function"&&(Vt===null?Vt=new Set([this]):Vt.add(this));var a=t.stack;this.componentDidCatch(t.value,{componentStack:a!==null?a:""})}),n}function nu(e,t,n){var o=e.pingCache;if(o===null){o=e.pingCache=new jd;var r=new Set;o.set(t,r)}else r=o.get(t),r===void 0&&(r=new Set,o.set(t,r));r.has(n)||(r.add(n),e=tm.bind(null,e,t,n),t.then(e,e))}function ou(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function ru(e,t,n,o,r){return(e.mode&1)===0?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,n.tag===1&&(n.alternate===null?n.tag=17:(t=Mt(-1,1),t.tag=2,Wt(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=r,e)}var zd=ue.ReactCurrentOwner,Ve=!1;function Oe(e,t,n,o){t.child=e===null?bl(t,null,n,o):Tn(t,e.child,n,o)}function iu(e,t,n,o,r){n=n.render;var i=t.ref;return Rn(t,r),o=Zi(e,t,n,o,i,r),n=Ji(),e!==null&&!Ve?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~r,Pt(e,t,r)):(de&&n&&Ai(t),t.flags|=1,Oe(e,t,o,r),t.child)}function au(e,t,n,o,r){if(e===null){var i=n.type;return typeof i=="function"&&!Ma(i)&&i.defaultProps===void 0&&n.compare===null&&n.defaultProps===void 0?(t.tag=15,t.type=i,su(e,t,i,o,r)):(e=Tr(n.type,null,o,t,t.mode,r),e.ref=t.ref,e.return=t,t.child=e)}if(i=e.child,(e.lanes&r)===0){var a=i.memoizedProps;if(n=n.compare,n=n!==null?n:ao,n(a,o)&&e.ref===t.ref)return Pt(e,t,r)}return t.flags|=1,e=Kt(i,o),e.ref=t.ref,e.return=t,t.child=e}function su(e,t,n,o,r){if(e!==null){var i=e.memoizedProps;if(ao(i,o)&&e.ref===t.ref)if(Ve=!1,t.pendingProps=o=i,(e.lanes&r)!==0)(e.flags&131072)!==0&&(Ve=!0);else return t.lanes=e.lanes,Pt(e,t,r)}return la(e,t,n,o,r)}function lu(e,t,n){var o=t.pendingProps,r=o.children,i=e!==null?e.memoizedState:null;if(o.mode==="hidden")if((t.mode&1)===0)t.memoizedState={baseLanes:0,cachePool:null,transitions:null},ae(Ln,tt),tt|=n;else{if((n&1073741824)===0)return e=i!==null?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,ae(Ln,tt),tt|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},o=i!==null?i.baseLanes:n,ae(Ln,tt),tt|=o}else i!==null?(o=i.baseLanes|n,t.memoizedState=null):o=n,ae(Ln,tt),tt|=o;return Oe(e,t,r,n),t.child}function uu(e,t){var n=t.ref;(e===null&&n!==null||e!==null&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function la(e,t,n,o,r){var i=$e(n)?tn:Ae.current;return i=In(t,i),Rn(t,r),n=Zi(e,t,n,o,i,r),o=Ji(),e!==null&&!Ve?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~r,Pt(e,t,r)):(de&&o&&Ai(t),t.flags|=1,Oe(e,t,n,r),t.child)}function cu(e,t,n,o,r){if($e(n)){var i=!0;nr(t)}else i=!1;if(Rn(t,r),t.stateNode===null)xr(e,t),Zl(t,n,o),ia(t,n,o,r),o=!0;else if(e===null){var a=t.stateNode,u=t.memoizedProps;a.props=u;var d=a.context,g=n.contextType;typeof g=="object"&&g!==null?g=at(g):(g=$e(n)?tn:Ae.current,g=In(t,g));var b=n.getDerivedStateFromProps,S=typeof b=="function"||typeof a.getSnapshotBeforeUpdate=="function";S||typeof a.UNSAFE_componentWillReceiveProps!="function"&&typeof a.componentWillReceiveProps!="function"||(u!==o||d!==g)&&Jl(t,a,o,g),Ut=!1;var _=t.memoizedState;a.state=_,dr(t,o,a,r),d=t.memoizedState,u!==o||_!==d||We.current||Ut?(typeof b=="function"&&(ra(t,n,b,o),d=t.memoizedState),(u=Ut||Yl(t,n,u,o,_,d,g))?(S||typeof a.UNSAFE_componentWillMount!="function"&&typeof a.componentWillMount!="function"||(typeof a.componentWillMount=="function"&&a.componentWillMount(),typeof a.UNSAFE_componentWillMount=="function"&&a.UNSAFE_componentWillMount()),typeof a.componentDidMount=="function"&&(t.flags|=4194308)):(typeof a.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=o,t.memoizedState=d),a.props=o,a.state=d,a.context=g,o=u):(typeof a.componentDidMount=="function"&&(t.flags|=4194308),o=!1)}else{a=t.stateNode,Sl(e,t),u=t.memoizedProps,g=t.type===t.elementType?u:ht(t.type,u),a.props=g,S=t.pendingProps,_=a.context,d=n.contextType,typeof d=="object"&&d!==null?d=at(d):(d=$e(n)?tn:Ae.current,d=In(t,d));var F=n.getDerivedStateFromProps;(b=typeof F=="function"||typeof a.getSnapshotBeforeUpdate=="function")||typeof a.UNSAFE_componentWillReceiveProps!="function"&&typeof a.componentWillReceiveProps!="function"||(u!==S||_!==d)&&Jl(t,a,o,d),Ut=!1,_=t.memoizedState,a.state=_,dr(t,o,a,r);var L=t.memoizedState;u!==S||_!==L||We.current||Ut?(typeof F=="function"&&(ra(t,n,F,o),L=t.memoizedState),(g=Ut||Yl(t,n,g,o,_,L,d)||!1)?(b||typeof a.UNSAFE_componentWillUpdate!="function"&&typeof a.componentWillUpdate!="function"||(typeof a.componentWillUpdate=="function"&&a.componentWillUpdate(o,L,d),typeof a.UNSAFE_componentWillUpdate=="function"&&a.UNSAFE_componentWillUpdate(o,L,d)),typeof a.componentDidUpdate=="function"&&(t.flags|=4),typeof a.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof a.componentDidUpdate!="function"||u===e.memoizedProps&&_===e.memoizedState||(t.flags|=4),typeof a.getSnapshotBeforeUpdate!="function"||u===e.memoizedProps&&_===e.memoizedState||(t.flags|=1024),t.memoizedProps=o,t.memoizedState=L),a.props=o,a.state=L,a.context=d,o=g):(typeof a.componentDidUpdate!="function"||u===e.memoizedProps&&_===e.memoizedState||(t.flags|=4),typeof a.getSnapshotBeforeUpdate!="function"||u===e.memoizedProps&&_===e.memoizedState||(t.flags|=1024),o=!1)}return ua(e,t,n,o,i,r)}function ua(e,t,n,o,r,i){uu(e,t);var a=(t.flags&128)!==0;if(!o&&!a)return r&&fl(t,n,!1),Pt(e,t,i);o=t.stateNode,zd.current=t;var u=a&&typeof n.getDerivedStateFromError!="function"?null:o.render();return t.flags|=1,e!==null&&a?(t.child=Tn(t,e.child,null,i),t.child=Tn(t,null,u,i)):Oe(e,t,u,i),t.memoizedState=o.state,r&&fl(t,n,!0),t.child}function du(e){var t=e.stateNode;t.pendingContext?pl(e,t.pendingContext,t.pendingContext!==t.context):t.context&&pl(e,t.context,!1),Vi(e,t.containerInfo)}function mu(e,t,n,o,r){return Pn(),Di(r),t.flags|=256,Oe(e,t,n,o),t.child}var ca={dehydrated:null,treeContext:null,retryLane:0};function da(e){return{baseLanes:e,cachePool:null,transitions:null}}function pu(e,t,n){var o=t.pendingProps,r=pe.current,i=!1,a=(t.flags&128)!==0,u;if((u=a)||(u=e!==null&&e.memoizedState===null?!1:(r&2)!==0),u?(i=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(r|=1),ae(pe,r&1),e===null)return Ni(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?((t.mode&1)===0?t.lanes=1:e.data==="$!"?t.lanes=8:t.lanes=1073741824,null):(a=o.children,e=o.fallback,i?(o=t.mode,i=t.child,a={mode:"hidden",children:a},(o&1)===0&&i!==null?(i.childLanes=0,i.pendingProps=a):i=Qr(a,o,0,null),e=mn(e,o,n,null),i.return=t,e.return=t,i.sibling=e,t.child=i,t.child.memoizedState=da(n),t.memoizedState=ca,e):ma(t,a));if(r=e.memoizedState,r!==null&&(u=r.dehydrated,u!==null))return Ud(e,t,a,o,u,r,n);if(i){i=o.fallback,a=t.mode,r=e.child,u=r.sibling;var d={mode:"hidden",children:o.children};return(a&1)===0&&t.child!==r?(o=t.child,o.childLanes=0,o.pendingProps=d,t.deletions=null):(o=Kt(r,d),o.subtreeFlags=r.subtreeFlags&14680064),u!==null?i=Kt(u,i):(i=mn(i,a,n,null),i.flags|=2),i.return=t,o.return=t,o.sibling=i,t.child=o,o=i,i=t.child,a=e.child.memoizedState,a=a===null?da(n):{baseLanes:a.baseLanes|n,cachePool:null,transitions:a.transitions},i.memoizedState=a,i.childLanes=e.childLanes&~n,t.memoizedState=ca,o}return i=e.child,e=i.sibling,o=Kt(i,{mode:"visible",children:o.children}),(t.mode&1)===0&&(o.lanes=n),o.return=t,o.sibling=null,e!==null&&(n=t.deletions,n===null?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function ma(e,t){return t=Qr({mode:"visible",children:t},e.mode,0,null),t.return=e,e.child=t}function wr(e,t,n,o){return o!==null&&Di(o),Tn(t,e.child,null,n),e=ma(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function Ud(e,t,n,o,r,i,a){if(n)return t.flags&256?(t.flags&=-257,o=aa(Error(s(422))),wr(e,t,a,o)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(i=o.fallback,r=t.mode,o=Qr({mode:"visible",children:o.children},r,0,null),i=mn(i,r,a,null),i.flags|=2,o.return=t,i.return=t,o.sibling=i,t.child=o,(t.mode&1)!==0&&Tn(t,e.child,null,a),t.child.memoizedState=da(a),t.memoizedState=ca,i);if((t.mode&1)===0)return wr(e,t,a,null);if(r.data==="$!"){if(o=r.nextSibling&&r.nextSibling.dataset,o)var u=o.dgst;return o=u,i=Error(s(419)),o=aa(i,o,void 0),wr(e,t,a,o)}if(u=(a&e.childLanes)!==0,Ve||u){if(o=Ee,o!==null){switch(a&-a){case 4:r=2;break;case 16:r=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:r=32;break;case 536870912:r=268435456;break;default:r=0}r=(r&(o.suspendedLanes|a))!==0?0:r,r!==0&&r!==i.retryLane&&(i.retryLane=r,Et(e,r),yt(o,e,r,-1))}return Ea(),o=aa(Error(s(421))),wr(e,t,a,o)}return r.data==="$?"?(t.flags|=128,t.child=e.child,t=nm.bind(null,e),r._reactRetry=t,null):(e=i.treeContext,et=Dt(r.nextSibling),Je=t,de=!0,pt=null,e!==null&&(rt[it++]=St,rt[it++]=It,rt[it++]=nn,St=e.id,It=e.overflow,nn=t),t=ma(t,o.children),t.flags|=4096,t)}function hu(e,t,n){e.lanes|=t;var o=e.alternate;o!==null&&(o.lanes|=t),Ui(e.return,t,n)}function pa(e,t,n,o,r){var i=e.memoizedState;i===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:o,tail:n,tailMode:r}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=o,i.tail=n,i.tailMode=r)}function fu(e,t,n){var o=t.pendingProps,r=o.revealOrder,i=o.tail;if(Oe(e,t,o.children,n),o=pe.current,(o&2)!==0)o=o&1|2,t.flags|=128;else{if(e!==null&&(e.flags&128)!==0)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&hu(e,n,t);else if(e.tag===19)hu(e,n,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}o&=1}if(ae(pe,o),(t.mode&1)===0)t.memoizedState=null;else switch(r){case"forwards":for(n=t.child,r=null;n!==null;)e=n.alternate,e!==null&&mr(e)===null&&(r=n),n=n.sibling;n=r,n===null?(r=t.child,t.child=null):(r=n.sibling,n.sibling=null),pa(t,!1,r,n,i);break;case"backwards":for(n=null,r=t.child,t.child=null;r!==null;){if(e=r.alternate,e!==null&&mr(e)===null){t.child=r;break}e=r.sibling,r.sibling=n,n=r,r=e}pa(t,!0,n,null,i);break;case"together":pa(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function xr(e,t){(t.mode&1)===0&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Pt(e,t,n){if(e!==null&&(t.dependencies=e.dependencies),ln|=t.lanes,(n&t.childLanes)===0)return null;if(e!==null&&t.child!==e.child)throw Error(s(153));if(t.child!==null){for(e=t.child,n=Kt(e,e.pendingProps),t.child=n,n.return=t;e.sibling!==null;)e=e.sibling,n=n.sibling=Kt(e,e.pendingProps),n.return=t;n.sibling=null}return t.child}function Wd(e,t,n){switch(t.tag){case 3:du(t),Pn();break;case 5:Ml(t);break;case 1:$e(t.type)&&nr(t);break;case 4:Vi(t,t.stateNode.containerInfo);break;case 10:var o=t.type._context,r=t.memoizedProps.value;ae(lr,o._currentValue),o._currentValue=r;break;case 13:if(o=t.memoizedState,o!==null)return o.dehydrated!==null?(ae(pe,pe.current&1),t.flags|=128,null):(n&t.child.childLanes)!==0?pu(e,t,n):(ae(pe,pe.current&1),e=Pt(e,t,n),e!==null?e.sibling:null);ae(pe,pe.current&1);break;case 19:if(o=(n&t.childLanes)!==0,(e.flags&128)!==0){if(o)return fu(e,t,n);t.flags|=128}if(r=t.memoizedState,r!==null&&(r.rendering=null,r.tail=null,r.lastEffect=null),ae(pe,pe.current),o)break;return null;case 22:case 23:return t.lanes=0,lu(e,t,n)}return Pt(e,t,n)}var gu,ha,yu,vu;gu=function(e,t){for(var n=t.child;n!==null;){if(n.tag===5||n.tag===6)e.appendChild(n.stateNode);else if(n.tag!==4&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===t)break;for(;n.sibling===null;){if(n.return===null||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},ha=function(){},yu=function(e,t,n,o){var r=e.memoizedProps;if(r!==o){e=t.stateNode,an(xt.current);var i=null;switch(n){case"input":r=Ur(e,r),o=Ur(e,o),i=[];break;case"select":r=B({},r,{value:void 0}),o=B({},o,{value:void 0}),i=[];break;case"textarea":r=Vr(e,r),o=Vr(e,o),i=[];break;default:typeof r.onClick!="function"&&typeof o.onClick=="function"&&(e.onclick=Jo)}Gr(n,o);var a;n=null;for(g in r)if(!o.hasOwnProperty(g)&&r.hasOwnProperty(g)&&r[g]!=null)if(g==="style"){var u=r[g];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else g!=="dangerouslySetInnerHTML"&&g!=="children"&&g!=="suppressContentEditableWarning"&&g!=="suppressHydrationWarning"&&g!=="autoFocus"&&(y.hasOwnProperty(g)?i||(i=[]):(i=i||[]).push(g,null));for(g in o){var d=o[g];if(u=r!=null?r[g]:void 0,o.hasOwnProperty(g)&&d!==u&&(d!=null||u!=null))if(g==="style")if(u){for(a in u)!u.hasOwnProperty(a)||d&&d.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in d)d.hasOwnProperty(a)&&u[a]!==d[a]&&(n||(n={}),n[a]=d[a])}else n||(i||(i=[]),i.push(g,n)),n=d;else g==="dangerouslySetInnerHTML"?(d=d?d.__html:void 0,u=u?u.__html:void 0,d!=null&&u!==d&&(i=i||[]).push(g,d)):g==="children"?typeof d!="string"&&typeof d!="number"||(i=i||[]).push(g,""+d):g!=="suppressContentEditableWarning"&&g!=="suppressHydrationWarning"&&(y.hasOwnProperty(g)?(d!=null&&g==="onScroll"&&se("scroll",e),i||u===d||(i=[])):(i=i||[]).push(g,d))}n&&(i=i||[]).push("style",n);var g=i;(t.updateQueue=g)&&(t.flags|=4)}},vu=function(e,t,n,o){n!==o&&(t.flags|=4)};function _o(e,t){if(!de)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;t!==null;)t.alternate!==null&&(n=t),t=t.sibling;n===null?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var o=null;n!==null;)n.alternate!==null&&(o=n),n=n.sibling;o===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:o.sibling=null}}function Le(e){var t=e.alternate!==null&&e.alternate.child===e.child,n=0,o=0;if(t)for(var r=e.child;r!==null;)n|=r.lanes|r.childLanes,o|=r.subtreeFlags&14680064,o|=r.flags&14680064,r.return=e,r=r.sibling;else for(r=e.child;r!==null;)n|=r.lanes|r.childLanes,o|=r.subtreeFlags,o|=r.flags,r.return=e,r=r.sibling;return e.subtreeFlags|=o,e.childLanes=n,t}function $d(e,t,n){var o=t.pendingProps;switch(Bi(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Le(t),null;case 1:return $e(t.type)&&tr(),Le(t),null;case 3:return o=t.stateNode,Fn(),le(We),le(Ae),Xi(),o.pendingContext&&(o.context=o.pendingContext,o.pendingContext=null),(e===null||e.child===null)&&(ar(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&(t.flags&256)===0||(t.flags|=1024,pt!==null&&(qa(pt),pt=null))),ha(e,t),Le(t),null;case 5:Hi(t);var r=an(yo.current);if(n=t.type,e!==null&&t.stateNode!=null)yu(e,t,n,o,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!o){if(t.stateNode===null)throw Error(s(166));return Le(t),null}if(e=an(xt.current),ar(t)){o=t.stateNode,n=t.type;var i=t.memoizedProps;switch(o[wt]=t,o[mo]=i,e=(t.mode&1)!==0,n){case"dialog":se("cancel",o),se("close",o);break;case"iframe":case"object":case"embed":se("load",o);break;case"video":case"audio":for(r=0;r<lo.length;r++)se(lo[r],o);break;case"source":se("error",o);break;case"img":case"image":case"link":se("error",o),se("load",o);break;case"details":se("toggle",o);break;case"input":Za(o,i),se("invalid",o);break;case"select":o._wrapperState={wasMultiple:!!i.multiple},se("invalid",o);break;case"textarea":ts(o,i),se("invalid",o)}Gr(n,i),r=null;for(var a in i)if(i.hasOwnProperty(a)){var u=i[a];a==="children"?typeof u=="string"?o.textContent!==u&&(i.suppressHydrationWarning!==!0&&Zo(o.textContent,u,e),r=["children",u]):typeof u=="number"&&o.textContent!==""+u&&(i.suppressHydrationWarning!==!0&&Zo(o.textContent,u,e),r=["children",""+u]):y.hasOwnProperty(a)&&u!=null&&a==="onScroll"&&se("scroll",o)}switch(n){case"input":Mo(o),es(o,i,!0);break;case"textarea":Mo(o),os(o);break;case"select":case"option":break;default:typeof i.onClick=="function"&&(o.onclick=Jo)}o=r,t.updateQueue=o,o!==null&&(t.flags|=4)}else{a=r.nodeType===9?r:r.ownerDocument,e==="http://www.w3.org/1999/xhtml"&&(e=rs(n)),e==="http://www.w3.org/1999/xhtml"?n==="script"?(e=a.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):typeof o.is=="string"?e=a.createElement(n,{is:o.is}):(e=a.createElement(n),n==="select"&&(a=e,o.multiple?a.multiple=!0:o.size&&(a.size=o.size))):e=a.createElementNS(e,n),e[wt]=t,e[mo]=o,gu(e,t,!1,!1),t.stateNode=e;e:{switch(a=Xr(n,o),n){case"dialog":se("cancel",e),se("close",e),r=o;break;case"iframe":case"object":case"embed":se("load",e),r=o;break;case"video":case"audio":for(r=0;r<lo.length;r++)se(lo[r],e);r=o;break;case"source":se("error",e),r=o;break;case"img":case"image":case"link":se("error",e),se("load",e),r=o;break;case"details":se("toggle",e),r=o;break;case"input":Za(e,o),r=Ur(e,o),se("invalid",e);break;case"option":r=o;break;case"select":e._wrapperState={wasMultiple:!!o.multiple},r=B({},o,{value:void 0}),se("invalid",e);break;case"textarea":ts(e,o),r=Vr(e,o),se("invalid",e);break;default:r=o}Gr(n,r),u=r;for(i in u)if(u.hasOwnProperty(i)){var d=u[i];i==="style"?ss(e,d):i==="dangerouslySetInnerHTML"?(d=d?d.__html:void 0,d!=null&&is(e,d)):i==="children"?typeof d=="string"?(n!=="textarea"||d!=="")&&Un(e,d):typeof d=="number"&&Un(e,""+d):i!=="suppressContentEditableWarning"&&i!=="suppressHydrationWarning"&&i!=="autoFocus"&&(y.hasOwnProperty(i)?d!=null&&i==="onScroll"&&se("scroll",e):d!=null&&Se(e,i,d,a))}switch(n){case"input":Mo(e),es(e,o,!1);break;case"textarea":Mo(e),os(e);break;case"option":o.value!=null&&e.setAttribute("value",""+ne(o.value));break;case"select":e.multiple=!!o.multiple,i=o.value,i!=null?fn(e,!!o.multiple,i,!1):o.defaultValue!=null&&fn(e,!!o.multiple,o.defaultValue,!0);break;default:typeof r.onClick=="function"&&(e.onclick=Jo)}switch(n){case"button":case"input":case"select":case"textarea":o=!!o.autoFocus;break e;case"img":o=!0;break e;default:o=!1}}o&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return Le(t),null;case 6:if(e&&t.stateNode!=null)vu(e,t,e.memoizedProps,o);else{if(typeof o!="string"&&t.stateNode===null)throw Error(s(166));if(n=an(yo.current),an(xt.current),ar(t)){if(o=t.stateNode,n=t.memoizedProps,o[wt]=t,(i=o.nodeValue!==n)&&(e=Je,e!==null))switch(e.tag){case 3:Zo(o.nodeValue,n,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&Zo(o.nodeValue,n,(e.mode&1)!==0)}i&&(t.flags|=4)}else o=(n.nodeType===9?n:n.ownerDocument).createTextNode(o),o[wt]=t,t.stateNode=o}return Le(t),null;case 13:if(le(pe),o=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(de&&et!==null&&(t.mode&1)!==0&&(t.flags&128)===0)Cl(),Pn(),t.flags|=98560,i=!1;else if(i=ar(t),o!==null&&o.dehydrated!==null){if(e===null){if(!i)throw Error(s(318));if(i=t.memoizedState,i=i!==null?i.dehydrated:null,!i)throw Error(s(317));i[wt]=t}else Pn(),(t.flags&128)===0&&(t.memoizedState=null),t.flags|=4;Le(t),i=!1}else pt!==null&&(qa(pt),pt=null),i=!0;if(!i)return t.flags&65536?t:null}return(t.flags&128)!==0?(t.lanes=n,t):(o=o!==null,o!==(e!==null&&e.memoizedState!==null)&&o&&(t.child.flags|=8192,(t.mode&1)!==0&&(e===null||(pe.current&1)!==0?be===0&&(be=3):Ea())),t.updateQueue!==null&&(t.flags|=4),Le(t),null);case 4:return Fn(),ha(e,t),e===null&&uo(t.stateNode.containerInfo),Le(t),null;case 10:return zi(t.type._context),Le(t),null;case 17:return $e(t.type)&&tr(),Le(t),null;case 19:if(le(pe),i=t.memoizedState,i===null)return Le(t),null;if(o=(t.flags&128)!==0,a=i.rendering,a===null)if(o)_o(i,!1);else{if(be!==0||e!==null&&(e.flags&128)!==0)for(e=t.child;e!==null;){if(a=mr(e),a!==null){for(t.flags|=128,_o(i,!1),o=a.updateQueue,o!==null&&(t.updateQueue=o,t.flags|=4),t.subtreeFlags=0,o=n,n=t.child;n!==null;)i=n,e=o,i.flags&=14680066,a=i.alternate,a===null?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=a.childLanes,i.lanes=a.lanes,i.child=a.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=a.memoizedProps,i.memoizedState=a.memoizedState,i.updateQueue=a.updateQueue,i.type=a.type,e=a.dependencies,i.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ae(pe,pe.current&1|2),t.child}e=e.sibling}i.tail!==null&&ve()>Nn&&(t.flags|=128,o=!0,_o(i,!1),t.lanes=4194304)}else{if(!o)if(e=mr(a),e!==null){if(t.flags|=128,o=!0,n=e.updateQueue,n!==null&&(t.updateQueue=n,t.flags|=4),_o(i,!0),i.tail===null&&i.tailMode==="hidden"&&!a.alternate&&!de)return Le(t),null}else 2*ve()-i.renderingStartTime>Nn&&n!==1073741824&&(t.flags|=128,o=!0,_o(i,!1),t.lanes=4194304);i.isBackwards?(a.sibling=t.child,t.child=a):(n=i.last,n!==null?n.sibling=a:t.child=a,i.last=a)}return i.tail!==null?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=ve(),t.sibling=null,n=pe.current,ae(pe,o?n&1|2:n&1),t):(Le(t),null);case 22:case 23:return Ia(),o=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==o&&(t.flags|=8192),o&&(t.mode&1)!==0?(tt&1073741824)!==0&&(Le(t),t.subtreeFlags&6&&(t.flags|=8192)):Le(t),null;case 24:return null;case 25:return null}throw Error(s(156,t.tag))}function Vd(e,t){switch(Bi(t),t.tag){case 1:return $e(t.type)&&tr(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return Fn(),le(We),le(Ae),Xi(),e=t.flags,(e&65536)!==0&&(e&128)===0?(t.flags=e&-65537|128,t):null;case 5:return Hi(t),null;case 13:if(le(pe),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(s(340));Pn()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return le(pe),null;case 4:return Fn(),null;case 10:return zi(t.type._context),null;case 22:case 23:return Ia(),null;case 24:return null;default:return null}}var Cr=!1,Ne=!1,Hd=typeof WeakSet=="function"?WeakSet:Set,A=null;function Bn(e,t){var n=e.ref;if(n!==null)if(typeof n=="function")try{n(null)}catch(o){ge(e,t,o)}else n.current=null}function fa(e,t,n){try{n()}catch(o){ge(e,t,o)}}var wu=!1;function Gd(e,t){if(Ii=jo,e=Ys(),wi(e)){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{n=(n=e.ownerDocument)&&n.defaultView||window;var o=n.getSelection&&n.getSelection();if(o&&o.rangeCount!==0){n=o.anchorNode;var r=o.anchorOffset,i=o.focusNode;o=o.focusOffset;try{n.nodeType,i.nodeType}catch{n=null;break e}var a=0,u=-1,d=-1,g=0,b=0,S=e,_=null;t:for(;;){for(var F;S!==n||r!==0&&S.nodeType!==3||(u=a+r),S!==i||o!==0&&S.nodeType!==3||(d=a+o),S.nodeType===3&&(a+=S.nodeValue.length),(F=S.firstChild)!==null;)_=S,S=F;for(;;){if(S===e)break t;if(_===n&&++g===r&&(u=a),_===i&&++b===o&&(d=a),(F=S.nextSibling)!==null)break;S=_,_=S.parentNode}S=F}n=u===-1||d===-1?null:{start:u,end:d}}else n=null}n=n||{start:0,end:0}}else n=null;for(Ei={focusedElem:e,selectionRange:n},jo=!1,A=t;A!==null;)if(t=A,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,A=e;else for(;A!==null;){t=A;try{var L=t.alternate;if((t.flags&1024)!==0)switch(t.tag){case 0:case 11:case 15:break;case 1:if(L!==null){var N=L.memoizedProps,we=L.memoizedState,h=t.stateNode,m=h.getSnapshotBeforeUpdate(t.elementType===t.type?N:ht(t.type,N),we);h.__reactInternalSnapshotBeforeUpdate=m}break;case 3:var f=t.stateNode.containerInfo;f.nodeType===1?f.textContent="":f.nodeType===9&&f.documentElement&&f.removeChild(f.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(s(163))}}catch(E){ge(t,t.return,E)}if(e=t.sibling,e!==null){e.return=t.return,A=e;break}A=t.return}return L=wu,wu=!1,L}function ko(e,t,n){var o=t.updateQueue;if(o=o!==null?o.lastEffect:null,o!==null){var r=o=o.next;do{if((r.tag&e)===e){var i=r.destroy;r.destroy=void 0,i!==void 0&&fa(t,n,i)}r=r.next}while(r!==o)}}function _r(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var n=t=t.next;do{if((n.tag&e)===e){var o=n.create;n.destroy=o()}n=n.next}while(n!==t)}}function ga(e){var t=e.ref;if(t!==null){var n=e.stateNode;switch(e.tag){case 5:e=n;break;default:e=n}typeof t=="function"?t(e):t.current=e}}function xu(e){var t=e.alternate;t!==null&&(e.alternate=null,xu(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[wt],delete t[mo],delete t[Qi],delete t[Pd],delete t[Td])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function Cu(e){return e.tag===5||e.tag===3||e.tag===4}function _u(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||Cu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function ya(e,t,n){var o=e.tag;if(o===5||o===6)e=e.stateNode,t?n.nodeType===8?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(n.nodeType===8?(t=n.parentNode,t.insertBefore(e,n)):(t=n,t.appendChild(e)),n=n._reactRootContainer,n!=null||t.onclick!==null||(t.onclick=Jo));else if(o!==4&&(e=e.child,e!==null))for(ya(e,t,n),e=e.sibling;e!==null;)ya(e,t,n),e=e.sibling}function va(e,t,n){var o=e.tag;if(o===5||o===6)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(o!==4&&(e=e.child,e!==null))for(va(e,t,n),e=e.sibling;e!==null;)va(e,t,n),e=e.sibling}var Re=null,ft=!1;function $t(e,t,n){for(n=n.child;n!==null;)ku(e,t,n),n=n.sibling}function ku(e,t,n){if(vt&&typeof vt.onCommitFiberUnmount=="function")try{vt.onCommitFiberUnmount(Ao,n)}catch{}switch(n.tag){case 5:Ne||Bn(n,t);case 6:var o=Re,r=ft;Re=null,$t(e,t,n),Re=o,ft=r,Re!==null&&(ft?(e=Re,n=n.stateNode,e.nodeType===8?e.parentNode.removeChild(n):e.removeChild(n)):Re.removeChild(n.stateNode));break;case 18:Re!==null&&(ft?(e=Re,n=n.stateNode,e.nodeType===8?Ti(e.parentNode,n):e.nodeType===1&&Ti(e,n),eo(e)):Ti(Re,n.stateNode));break;case 4:o=Re,r=ft,Re=n.stateNode.containerInfo,ft=!0,$t(e,t,n),Re=o,ft=r;break;case 0:case 11:case 14:case 15:if(!Ne&&(o=n.updateQueue,o!==null&&(o=o.lastEffect,o!==null))){r=o=o.next;do{var i=r,a=i.destroy;i=i.tag,a!==void 0&&((i&2)!==0||(i&4)!==0)&&fa(n,t,a),r=r.next}while(r!==o)}$t(e,t,n);break;case 1:if(!Ne&&(Bn(n,t),o=n.stateNode,typeof o.componentWillUnmount=="function"))try{o.props=n.memoizedProps,o.state=n.memoizedState,o.componentWillUnmount()}catch(u){ge(n,t,u)}$t(e,t,n);break;case 21:$t(e,t,n);break;case 22:n.mode&1?(Ne=(o=Ne)||n.memoizedState!==null,$t(e,t,n),Ne=o):$t(e,t,n);break;default:$t(e,t,n)}}function bu(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var n=e.stateNode;n===null&&(n=e.stateNode=new Hd),t.forEach(function(o){var r=om.bind(null,e,o);n.has(o)||(n.add(o),o.then(r,r))})}}function gt(e,t){var n=t.deletions;if(n!==null)for(var o=0;o<n.length;o++){var r=n[o];try{var i=e,a=t,u=a;e:for(;u!==null;){switch(u.tag){case 5:Re=u.stateNode,ft=!1;break e;case 3:Re=u.stateNode.containerInfo,ft=!0;break e;case 4:Re=u.stateNode.containerInfo,ft=!0;break e}u=u.return}if(Re===null)throw Error(s(160));ku(i,a,r),Re=null,ft=!1;var d=r.alternate;d!==null&&(d.return=null),r.return=null}catch(g){ge(r,t,g)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)qu(t,e),t=t.sibling}function qu(e,t){var n=e.alternate,o=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gt(t,e),_t(e),o&4){try{ko(3,e,e.return),_r(3,e)}catch(N){ge(e,e.return,N)}try{ko(5,e,e.return)}catch(N){ge(e,e.return,N)}}break;case 1:gt(t,e),_t(e),o&512&&n!==null&&Bn(n,n.return);break;case 5:if(gt(t,e),_t(e),o&512&&n!==null&&Bn(n,n.return),e.flags&32){var r=e.stateNode;try{Un(r,"")}catch(N){ge(e,e.return,N)}}if(o&4&&(r=e.stateNode,r!=null)){var i=e.memoizedProps,a=n!==null?n.memoizedProps:i,u=e.type,d=e.updateQueue;if(e.updateQueue=null,d!==null)try{u==="input"&&i.type==="radio"&&i.name!=null&&Ja(r,i),Xr(u,a);var g=Xr(u,i);for(a=0;a<d.length;a+=2){var b=d[a],S=d[a+1];b==="style"?ss(r,S):b==="dangerouslySetInnerHTML"?is(r,S):b==="children"?Un(r,S):Se(r,b,S,g)}switch(u){case"input":Wr(r,i);break;case"textarea":ns(r,i);break;case"select":var _=r._wrapperState.wasMultiple;r._wrapperState.wasMultiple=!!i.multiple;var F=i.value;F!=null?fn(r,!!i.multiple,F,!1):_!==!!i.multiple&&(i.defaultValue!=null?fn(r,!!i.multiple,i.defaultValue,!0):fn(r,!!i.multiple,i.multiple?[]:"",!1))}r[mo]=i}catch(N){ge(e,e.return,N)}}break;case 6:if(gt(t,e),_t(e),o&4){if(e.stateNode===null)throw Error(s(162));r=e.stateNode,i=e.memoizedProps;try{r.nodeValue=i}catch(N){ge(e,e.return,N)}}break;case 3:if(gt(t,e),_t(e),o&4&&n!==null&&n.memoizedState.isDehydrated)try{eo(t.containerInfo)}catch(N){ge(e,e.return,N)}break;case 4:gt(t,e),_t(e);break;case 13:gt(t,e),_t(e),r=e.child,r.flags&8192&&(i=r.memoizedState!==null,r.stateNode.isHidden=i,!i||r.alternate!==null&&r.alternate.memoizedState!==null||(Ca=ve())),o&4&&bu(e);break;case 22:if(b=n!==null&&n.memoizedState!==null,e.mode&1?(Ne=(g=Ne)||b,gt(t,e),Ne=g):gt(t,e),_t(e),o&8192){if(g=e.memoizedState!==null,(e.stateNode.isHidden=g)&&!b&&(e.mode&1)!==0)for(A=e,b=e.child;b!==null;){for(S=A=b;A!==null;){switch(_=A,F=_.child,_.tag){case 0:case 11:case 14:case 15:ko(4,_,_.return);break;case 1:Bn(_,_.return);var L=_.stateNode;if(typeof L.componentWillUnmount=="function"){o=_,n=_.return;try{t=o,L.props=t.memoizedProps,L.state=t.memoizedState,L.componentWillUnmount()}catch(N){ge(o,n,N)}}break;case 5:Bn(_,_.return);break;case 22:if(_.memoizedState!==null){Eu(S);continue}}F!==null?(F.return=_,A=F):Eu(S)}b=b.sibling}e:for(b=null,S=e;;){if(S.tag===5){if(b===null){b=S;try{r=S.stateNode,g?(i=r.style,typeof i.setProperty=="function"?i.setProperty("display","none","important"):i.display="none"):(u=S.stateNode,d=S.memoizedProps.style,a=d!=null&&d.hasOwnProperty("display")?d.display:null,u.style.display=as("display",a))}catch(N){ge(e,e.return,N)}}}else if(S.tag===6){if(b===null)try{S.stateNode.nodeValue=g?"":S.memoizedProps}catch(N){ge(e,e.return,N)}}else if((S.tag!==22&&S.tag!==23||S.memoizedState===null||S===e)&&S.child!==null){S.child.return=S,S=S.child;continue}if(S===e)break e;for(;S.sibling===null;){if(S.return===null||S.return===e)break e;b===S&&(b=null),S=S.return}b===S&&(b=null),S.sibling.return=S.return,S=S.sibling}}break;case 19:gt(t,e),_t(e),o&4&&bu(e);break;case 21:break;default:gt(t,e),_t(e)}}function _t(e){var t=e.flags;if(t&2){try{e:{for(var n=e.return;n!==null;){if(Cu(n)){var o=n;break e}n=n.return}throw Error(s(160))}switch(o.tag){case 5:var r=o.stateNode;o.flags&32&&(Un(r,""),o.flags&=-33);var i=_u(e);va(e,i,r);break;case 3:case 4:var a=o.stateNode.containerInfo,u=_u(e);ya(e,u,a);break;default:throw Error(s(161))}}catch(d){ge(e,e.return,d)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function Xd(e,t,n){A=e,Su(e)}function Su(e,t,n){for(var o=(e.mode&1)!==0;A!==null;){var r=A,i=r.child;if(r.tag===22&&o){var a=r.memoizedState!==null||Cr;if(!a){var u=r.alternate,d=u!==null&&u.memoizedState!==null||Ne;u=Cr;var g=Ne;if(Cr=a,(Ne=d)&&!g)for(A=r;A!==null;)a=A,d=a.child,a.tag===22&&a.memoizedState!==null?Mu(r):d!==null?(d.return=a,A=d):Mu(r);for(;i!==null;)A=i,Su(i),i=i.sibling;A=r,Cr=u,Ne=g}Iu(e)}else(r.subtreeFlags&8772)!==0&&i!==null?(i.return=r,A=i):Iu(e)}}function Iu(e){for(;A!==null;){var t=A;if((t.flags&8772)!==0){var n=t.alternate;try{if((t.flags&8772)!==0)switch(t.tag){case 0:case 11:case 15:Ne||_r(5,t);break;case 1:var o=t.stateNode;if(t.flags&4&&!Ne)if(n===null)o.componentDidMount();else{var r=t.elementType===t.type?n.memoizedProps:ht(t.type,n.memoizedProps);o.componentDidUpdate(r,n.memoizedState,o.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;i!==null&&El(t,i,o);break;case 3:var a=t.updateQueue;if(a!==null){if(n=null,t.child!==null)switch(t.child.tag){case 5:n=t.child.stateNode;break;case 1:n=t.child.stateNode}El(t,a,n)}break;case 5:var u=t.stateNode;if(n===null&&t.flags&4){n=u;var d=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":d.autoFocus&&n.focus();break;case"img":d.src&&(n.src=d.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var g=t.alternate;if(g!==null){var b=g.memoizedState;if(b!==null){var S=b.dehydrated;S!==null&&eo(S)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(s(163))}Ne||t.flags&512&&ga(t)}catch(_){ge(t,t.return,_)}}if(t===e){A=null;break}if(n=t.sibling,n!==null){n.return=t.return,A=n;break}A=t.return}}function Eu(e){for(;A!==null;){var t=A;if(t===e){A=null;break}var n=t.sibling;if(n!==null){n.return=t.return,A=n;break}A=t.return}}function Mu(e){for(;A!==null;){var t=A;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{_r(4,t)}catch(d){ge(t,n,d)}break;case 1:var o=t.stateNode;if(typeof o.componentDidMount=="function"){var r=t.return;try{o.componentDidMount()}catch(d){ge(t,r,d)}}var i=t.return;try{ga(t)}catch(d){ge(t,i,d)}break;case 5:var a=t.return;try{ga(t)}catch(d){ge(t,a,d)}}}catch(d){ge(t,t.return,d)}if(t===e){A=null;break}var u=t.sibling;if(u!==null){u.return=t.return,A=u;break}A=t.return}}var Kd=Math.ceil,kr=ue.ReactCurrentDispatcher,wa=ue.ReactCurrentOwner,lt=ue.ReactCurrentBatchConfig,Z=0,Ee=null,Ce=null,Fe=0,tt=0,Ln=Ot(0),be=0,bo=null,ln=0,br=0,xa=0,qo=null,He=null,Ca=0,Nn=1/0,Tt=null,qr=!1,_a=null,Vt=null,Sr=!1,Ht=null,Ir=0,So=0,ka=null,Er=-1,Mr=0;function je(){return(Z&6)!==0?ve():Er!==-1?Er:Er=ve()}function Gt(e){return(e.mode&1)===0?1:(Z&2)!==0&&Fe!==0?Fe&-Fe:Rd.transition!==null?(Mr===0&&(Mr=_s()),Mr):(e=oe,e!==0||(e=window.event,e=e===void 0?16:Ts(e.type)),e)}function yt(e,t,n,o){if(50<So)throw So=0,ka=null,Error(s(185));Xn(e,n,o),((Z&2)===0||e!==Ee)&&(e===Ee&&((Z&2)===0&&(br|=n),be===4&&Xt(e,Fe)),Ge(e,o),n===1&&Z===0&&(t.mode&1)===0&&(Nn=ve()+500,or&&zt()))}function Ge(e,t){var n=e.callbackNode;Rc(e,t);var o=No(e,e===Ee?Fe:0);if(o===0)n!==null&&ws(n),e.callbackNode=null,e.callbackPriority=0;else if(t=o&-o,e.callbackPriority!==t){if(n!=null&&ws(n),t===1)e.tag===0?Qd(Tu.bind(null,e)):gl(Tu.bind(null,e)),Ed(function(){(Z&6)===0&&zt()}),n=null;else{switch(ks(o)){case 1:n=ni;break;case 4:n=xs;break;case 16:n=Fo;break;case 536870912:n=Cs;break;default:n=Fo}n=Du(n,Pu.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function Pu(e,t){if(Er=-1,Mr=0,(Z&6)!==0)throw Error(s(327));var n=e.callbackNode;if(Dn()&&e.callbackNode!==n)return null;var o=No(e,e===Ee?Fe:0);if(o===0)return null;if((o&30)!==0||(o&e.expiredLanes)!==0||t)t=Pr(e,o);else{t=o;var r=Z;Z|=2;var i=Ru();(Ee!==e||Fe!==t)&&(Tt=null,Nn=ve()+500,cn(e,t));do try{Jd();break}catch(u){Qu(e,u)}while(!0);ji(),kr.current=i,Z=r,Ce!==null?t=0:(Ee=null,Fe=0,t=be)}if(t!==0){if(t===2&&(r=oi(e),r!==0&&(o=r,t=ba(e,r))),t===1)throw n=bo,cn(e,0),Xt(e,o),Ge(e,ve()),n;if(t===6)Xt(e,o);else{if(r=e.current.alternate,(o&30)===0&&!Yd(r)&&(t=Pr(e,o),t===2&&(i=oi(e),i!==0&&(o=i,t=ba(e,i))),t===1))throw n=bo,cn(e,0),Xt(e,o),Ge(e,ve()),n;switch(e.finishedWork=r,e.finishedLanes=o,t){case 0:case 1:throw Error(s(345));case 2:dn(e,He,Tt);break;case 3:if(Xt(e,o),(o&130023424)===o&&(t=Ca+500-ve(),10<t)){if(No(e,0)!==0)break;if(r=e.suspendedLanes,(r&o)!==o){je(),e.pingedLanes|=e.suspendedLanes&r;break}e.timeoutHandle=Pi(dn.bind(null,e,He,Tt),t);break}dn(e,He,Tt);break;case 4:if(Xt(e,o),(o&4194240)===o)break;for(t=e.eventTimes,r=-1;0<o;){var a=31-dt(o);i=1<<a,a=t[a],a>r&&(r=a),o&=~i}if(o=r,o=ve()-o,o=(120>o?120:480>o?480:1080>o?1080:1920>o?1920:3e3>o?3e3:4320>o?4320:1960*Kd(o/1960))-o,10<o){e.timeoutHandle=Pi(dn.bind(null,e,He,Tt),o);break}dn(e,He,Tt);break;case 5:dn(e,He,Tt);break;default:throw Error(s(329))}}}return Ge(e,ve()),e.callbackNode===n?Pu.bind(null,e):null}function ba(e,t){var n=qo;return e.current.memoizedState.isDehydrated&&(cn(e,t).flags|=256),e=Pr(e,t),e!==2&&(t=He,He=n,t!==null&&qa(t)),e}function qa(e){He===null?He=e:He.push.apply(He,e)}function Yd(e){for(var t=e;;){if(t.flags&16384){var n=t.updateQueue;if(n!==null&&(n=n.stores,n!==null))for(var o=0;o<n.length;o++){var r=n[o],i=r.getSnapshot;r=r.value;try{if(!mt(i(),r))return!1}catch{return!1}}}if(n=t.child,t.subtreeFlags&16384&&n!==null)n.return=t,t=n;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Xt(e,t){for(t&=~xa,t&=~br,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-dt(t),o=1<<n;e[n]=-1,t&=~o}}function Tu(e){if((Z&6)!==0)throw Error(s(327));Dn();var t=No(e,0);if((t&1)===0)return Ge(e,ve()),null;var n=Pr(e,t);if(e.tag!==0&&n===2){var o=oi(e);o!==0&&(t=o,n=ba(e,o))}if(n===1)throw n=bo,cn(e,0),Xt(e,t),Ge(e,ve()),n;if(n===6)throw Error(s(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,dn(e,He,Tt),Ge(e,ve()),null}function Sa(e,t){var n=Z;Z|=1;try{return e(t)}finally{Z=n,Z===0&&(Nn=ve()+500,or&&zt())}}function un(e){Ht!==null&&Ht.tag===0&&(Z&6)===0&&Dn();var t=Z;Z|=1;var n=lt.transition,o=oe;try{if(lt.transition=null,oe=1,e)return e()}finally{oe=o,lt.transition=n,Z=t,(Z&6)===0&&zt()}}function Ia(){tt=Ln.current,le(Ln)}function cn(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(n!==-1&&(e.timeoutHandle=-1,Id(n)),Ce!==null)for(n=Ce.return;n!==null;){var o=n;switch(Bi(o),o.tag){case 1:o=o.type.childContextTypes,o!=null&&tr();break;case 3:Fn(),le(We),le(Ae),Xi();break;case 5:Hi(o);break;case 4:Fn();break;case 13:le(pe);break;case 19:le(pe);break;case 10:zi(o.type._context);break;case 22:case 23:Ia()}n=n.return}if(Ee=e,Ce=e=Kt(e.current,null),Fe=tt=t,be=0,bo=null,xa=br=ln=0,He=qo=null,rn!==null){for(t=0;t<rn.length;t++)if(n=rn[t],o=n.interleaved,o!==null){n.interleaved=null;var r=o.next,i=n.pending;if(i!==null){var a=i.next;i.next=r,o.next=a}n.pending=o}rn=null}return e}function Qu(e,t){do{var n=Ce;try{if(ji(),pr.current=yr,hr){for(var o=he.memoizedState;o!==null;){var r=o.queue;r!==null&&(r.pending=null),o=o.next}hr=!1}if(sn=0,Ie=ke=he=null,vo=!1,wo=0,wa.current=null,n===null||n.return===null){be=1,bo=t,Ce=null;break}e:{var i=e,a=n.return,u=n,d=t;if(t=Fe,u.flags|=32768,d!==null&&typeof d=="object"&&typeof d.then=="function"){var g=d,b=u,S=b.tag;if((b.mode&1)===0&&(S===0||S===11||S===15)){var _=b.alternate;_?(b.updateQueue=_.updateQueue,b.memoizedState=_.memoizedState,b.lanes=_.lanes):(b.updateQueue=null,b.memoizedState=null)}var F=ou(a);if(F!==null){F.flags&=-257,ru(F,a,u,i,t),F.mode&1&&nu(i,g,t),t=F,d=g;var L=t.updateQueue;if(L===null){var N=new Set;N.add(d),t.updateQueue=N}else L.add(d);break e}else{if((t&1)===0){nu(i,g,t),Ea();break e}d=Error(s(426))}}else if(de&&u.mode&1){var we=ou(a);if(we!==null){(we.flags&65536)===0&&(we.flags|=256),ru(we,a,u,i,t),Di(An(d,u));break e}}i=d=An(d,u),be!==4&&(be=2),qo===null?qo=[i]:qo.push(i),i=a;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t;var h=eu(i,d,t);Il(i,h);break e;case 1:u=d;var m=i.type,f=i.stateNode;if((i.flags&128)===0&&(typeof m.getDerivedStateFromError=="function"||f!==null&&typeof f.componentDidCatch=="function"&&(Vt===null||!Vt.has(f)))){i.flags|=65536,t&=-t,i.lanes|=t;var E=tu(i,u,t);Il(i,E);break e}}i=i.return}while(i!==null)}Au(n)}catch(D){t=D,Ce===n&&n!==null&&(Ce=n=n.return);continue}break}while(!0)}function Ru(){var e=kr.current;return kr.current=yr,e===null?yr:e}function Ea(){(be===0||be===3||be===2)&&(be=4),Ee===null||(ln&268435455)===0&&(br&268435455)===0||Xt(Ee,Fe)}function Pr(e,t){var n=Z;Z|=2;var o=Ru();(Ee!==e||Fe!==t)&&(Tt=null,cn(e,t));do try{Zd();break}catch(r){Qu(e,r)}while(!0);if(ji(),Z=n,kr.current=o,Ce!==null)throw Error(s(261));return Ee=null,Fe=0,be}function Zd(){for(;Ce!==null;)Fu(Ce)}function Jd(){for(;Ce!==null&&!bc();)Fu(Ce)}function Fu(e){var t=Nu(e.alternate,e,tt);e.memoizedProps=e.pendingProps,t===null?Au(e):Ce=t,wa.current=null}function Au(e){var t=e;do{var n=t.alternate;if(e=t.return,(t.flags&32768)===0){if(n=$d(n,t,tt),n!==null){Ce=n;return}}else{if(n=Vd(n,t),n!==null){n.flags&=32767,Ce=n;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{be=6,Ce=null;return}}if(t=t.sibling,t!==null){Ce=t;return}Ce=t=e}while(t!==null);be===0&&(be=5)}function dn(e,t,n){var o=oe,r=lt.transition;try{lt.transition=null,oe=1,em(e,t,n,o)}finally{lt.transition=r,oe=o}return null}function em(e,t,n,o){do Dn();while(Ht!==null);if((Z&6)!==0)throw Error(s(327));n=e.finishedWork;var r=e.finishedLanes;if(n===null)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(s(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(Fc(e,i),e===Ee&&(Ce=Ee=null,Fe=0),(n.subtreeFlags&2064)===0&&(n.flags&2064)===0||Sr||(Sr=!0,Du(Fo,function(){return Dn(),null})),i=(n.flags&15990)!==0,(n.subtreeFlags&15990)!==0||i){i=lt.transition,lt.transition=null;var a=oe;oe=1;var u=Z;Z|=4,wa.current=null,Gd(e,n),qu(n,e),xd(Ei),jo=!!Ii,Ei=Ii=null,e.current=n,Xd(n),qc(),Z=u,oe=a,lt.transition=i}else e.current=n;if(Sr&&(Sr=!1,Ht=e,Ir=r),i=e.pendingLanes,i===0&&(Vt=null),Ec(n.stateNode),Ge(e,ve()),t!==null)for(o=e.onRecoverableError,n=0;n<t.length;n++)r=t[n],o(r.value,{componentStack:r.stack,digest:r.digest});if(qr)throw qr=!1,e=_a,_a=null,e;return(Ir&1)!==0&&e.tag!==0&&Dn(),i=e.pendingLanes,(i&1)!==0?e===ka?So++:(So=0,ka=e):So=0,zt(),null}function Dn(){if(Ht!==null){var e=ks(Ir),t=lt.transition,n=oe;try{if(lt.transition=null,oe=16>e?16:e,Ht===null)var o=!1;else{if(e=Ht,Ht=null,Ir=0,(Z&6)!==0)throw Error(s(331));var r=Z;for(Z|=4,A=e.current;A!==null;){var i=A,a=i.child;if((A.flags&16)!==0){var u=i.deletions;if(u!==null){for(var d=0;d<u.length;d++){var g=u[d];for(A=g;A!==null;){var b=A;switch(b.tag){case 0:case 11:case 15:ko(8,b,i)}var S=b.child;if(S!==null)S.return=b,A=S;else for(;A!==null;){b=A;var _=b.sibling,F=b.return;if(xu(b),b===g){A=null;break}if(_!==null){_.return=F,A=_;break}A=F}}}var L=i.alternate;if(L!==null){var N=L.child;if(N!==null){L.child=null;do{var we=N.sibling;N.sibling=null,N=we}while(N!==null)}}A=i}}if((i.subtreeFlags&2064)!==0&&a!==null)a.return=i,A=a;else e:for(;A!==null;){if(i=A,(i.flags&2048)!==0)switch(i.tag){case 0:case 11:case 15:ko(9,i,i.return)}var h=i.sibling;if(h!==null){h.return=i.return,A=h;break e}A=i.return}}var m=e.current;for(A=m;A!==null;){a=A;var f=a.child;if((a.subtreeFlags&2064)!==0&&f!==null)f.return=a,A=f;else e:for(a=m;A!==null;){if(u=A,(u.flags&2048)!==0)try{switch(u.tag){case 0:case 11:case 15:_r(9,u)}}catch(D){ge(u,u.return,D)}if(u===a){A=null;break e}var E=u.sibling;if(E!==null){E.return=u.return,A=E;break e}A=u.return}}if(Z=r,zt(),vt&&typeof vt.onPostCommitFiberRoot=="function")try{vt.onPostCommitFiberRoot(Ao,e)}catch{}o=!0}return o}finally{oe=n,lt.transition=t}}return!1}function Bu(e,t,n){t=An(n,t),t=eu(e,t,1),e=Wt(e,t,1),t=je(),e!==null&&(Xn(e,1,t),Ge(e,t))}function ge(e,t,n){if(e.tag===3)Bu(e,e,n);else for(;t!==null;){if(t.tag===3){Bu(t,e,n);break}else if(t.tag===1){var o=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof o.componentDidCatch=="function"&&(Vt===null||!Vt.has(o))){e=An(n,e),e=tu(t,e,1),t=Wt(t,e,1),e=je(),t!==null&&(Xn(t,1,e),Ge(t,e));break}}t=t.return}}function tm(e,t,n){var o=e.pingCache;o!==null&&o.delete(t),t=je(),e.pingedLanes|=e.suspendedLanes&n,Ee===e&&(Fe&n)===n&&(be===4||be===3&&(Fe&130023424)===Fe&&500>ve()-Ca?cn(e,0):xa|=n),Ge(e,t)}function Lu(e,t){t===0&&((e.mode&1)===0?t=1:(t=Lo,Lo<<=1,(Lo&130023424)===0&&(Lo=4194304)));var n=je();e=Et(e,t),e!==null&&(Xn(e,t,n),Ge(e,n))}function nm(e){var t=e.memoizedState,n=0;t!==null&&(n=t.retryLane),Lu(e,n)}function om(e,t){var n=0;switch(e.tag){case 13:var o=e.stateNode,r=e.memoizedState;r!==null&&(n=r.retryLane);break;case 19:o=e.stateNode;break;default:throw Error(s(314))}o!==null&&o.delete(t),Lu(e,n)}var Nu;Nu=function(e,t,n){if(e!==null)if(e.memoizedProps!==t.pendingProps||We.current)Ve=!0;else{if((e.lanes&n)===0&&(t.flags&128)===0)return Ve=!1,Wd(e,t,n);Ve=(e.flags&131072)!==0}else Ve=!1,de&&(t.flags&1048576)!==0&&yl(t,ir,t.index);switch(t.lanes=0,t.tag){case 2:var o=t.type;xr(e,t),e=t.pendingProps;var r=In(t,Ae.current);Rn(t,n),r=Zi(null,t,o,e,r,n);var i=Ji();return t.flags|=1,typeof r=="object"&&r!==null&&typeof r.render=="function"&&r.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,$e(o)?(i=!0,nr(t)):i=!1,t.memoizedState=r.state!==null&&r.state!==void 0?r.state:null,$i(t),r.updater=vr,t.stateNode=r,r._reactInternals=t,ia(t,o,e,n),t=ua(null,t,o,!0,i,n)):(t.tag=0,de&&i&&Ai(t),Oe(null,t,r,n),t=t.child),t;case 16:o=t.elementType;e:{switch(xr(e,t),e=t.pendingProps,r=o._init,o=r(o._payload),t.type=o,r=t.tag=im(o),e=ht(o,e),r){case 0:t=la(null,t,o,e,n);break e;case 1:t=cu(null,t,o,e,n);break e;case 11:t=iu(null,t,o,e,n);break e;case 14:t=au(null,t,o,ht(o.type,e),n);break e}throw Error(s(306,o,""))}return t;case 0:return o=t.type,r=t.pendingProps,r=t.elementType===o?r:ht(o,r),la(e,t,o,r,n);case 1:return o=t.type,r=t.pendingProps,r=t.elementType===o?r:ht(o,r),cu(e,t,o,r,n);case 3:e:{if(du(t),e===null)throw Error(s(387));o=t.pendingProps,i=t.memoizedState,r=i.element,Sl(e,t),dr(t,o,null,n);var a=t.memoizedState;if(o=a.element,i.isDehydrated)if(i={element:o,isDehydrated:!1,cache:a.cache,pendingSuspenseBoundaries:a.pendingSuspenseBoundaries,transitions:a.transitions},t.updateQueue.baseState=i,t.memoizedState=i,t.flags&256){r=An(Error(s(423)),t),t=mu(e,t,o,n,r);break e}else if(o!==r){r=An(Error(s(424)),t),t=mu(e,t,o,n,r);break e}else for(et=Dt(t.stateNode.containerInfo.firstChild),Je=t,de=!0,pt=null,n=bl(t,null,o,n),t.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling;else{if(Pn(),o===r){t=Pt(e,t,n);break e}Oe(e,t,o,n)}t=t.child}return t;case 5:return Ml(t),e===null&&Ni(t),o=t.type,r=t.pendingProps,i=e!==null?e.memoizedProps:null,a=r.children,Mi(o,r)?a=null:i!==null&&Mi(o,i)&&(t.flags|=32),uu(e,t),Oe(e,t,a,n),t.child;case 6:return e===null&&Ni(t),null;case 13:return pu(e,t,n);case 4:return Vi(t,t.stateNode.containerInfo),o=t.pendingProps,e===null?t.child=Tn(t,null,o,n):Oe(e,t,o,n),t.child;case 11:return o=t.type,r=t.pendingProps,r=t.elementType===o?r:ht(o,r),iu(e,t,o,r,n);case 7:return Oe(e,t,t.pendingProps,n),t.child;case 8:return Oe(e,t,t.pendingProps.children,n),t.child;case 12:return Oe(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(o=t.type._context,r=t.pendingProps,i=t.memoizedProps,a=r.value,ae(lr,o._currentValue),o._currentValue=a,i!==null)if(mt(i.value,a)){if(i.children===r.children&&!We.current){t=Pt(e,t,n);break e}}else for(i=t.child,i!==null&&(i.return=t);i!==null;){var u=i.dependencies;if(u!==null){a=i.child;for(var d=u.firstContext;d!==null;){if(d.context===o){if(i.tag===1){d=Mt(-1,n&-n),d.tag=2;var g=i.updateQueue;if(g!==null){g=g.shared;var b=g.pending;b===null?d.next=d:(d.next=b.next,b.next=d),g.pending=d}}i.lanes|=n,d=i.alternate,d!==null&&(d.lanes|=n),Ui(i.return,n,t),u.lanes|=n;break}d=d.next}}else if(i.tag===10)a=i.type===t.type?null:i.child;else if(i.tag===18){if(a=i.return,a===null)throw Error(s(341));a.lanes|=n,u=a.alternate,u!==null&&(u.lanes|=n),Ui(a,n,t),a=i.sibling}else a=i.child;if(a!==null)a.return=i;else for(a=i;a!==null;){if(a===t){a=null;break}if(i=a.sibling,i!==null){i.return=a.return,a=i;break}a=a.return}i=a}Oe(e,t,r.children,n),t=t.child}return t;case 9:return r=t.type,o=t.pendingProps.children,Rn(t,n),r=at(r),o=o(r),t.flags|=1,Oe(e,t,o,n),t.child;case 14:return o=t.type,r=ht(o,t.pendingProps),r=ht(o.type,r),au(e,t,o,r,n);case 15:return su(e,t,t.type,t.pendingProps,n);case 17:return o=t.type,r=t.pendingProps,r=t.elementType===o?r:ht(o,r),xr(e,t),t.tag=1,$e(o)?(e=!0,nr(t)):e=!1,Rn(t,n),Zl(t,o,r),ia(t,o,r,n),ua(null,t,o,!0,e,n);case 19:return fu(e,t,n);case 22:return lu(e,t,n)}throw Error(s(156,t.tag))};function Du(e,t){return vs(e,t)}function rm(e,t,n,o){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=o,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function ut(e,t,n,o){return new rm(e,t,n,o)}function Ma(e){return e=e.prototype,!(!e||!e.isReactComponent)}function im(e){if(typeof e=="function")return Ma(e)?1:0;if(e!=null){if(e=e.$$typeof,e===Te)return 11;if(e===De)return 14}return 2}function Kt(e,t){var n=e.alternate;return n===null?(n=ut(e.tag,t,e.key,e.mode),n.elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=e.flags&14680064,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Tr(e,t,n,o,r,i){var a=2;if(o=e,typeof e=="function")Ma(e)&&(a=1);else if(typeof e=="string")a=5;else e:switch(e){case re:return mn(n.children,r,i,t);case ye:a=8,r|=8;break;case Pe:return e=ut(12,n,t,r|2),e.elementType=Pe,e.lanes=i,e;case Ue:return e=ut(13,n,t,r),e.elementType=Ue,e.lanes=i,e;case me:return e=ut(19,n,t,r),e.elementType=me,e.lanes=i,e;case fe:return Qr(n,r,i,t);default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case ot:a=10;break e;case ct:a=9;break e;case Te:a=11;break e;case De:a=14;break e;case Qe:a=16,o=null;break e}throw Error(s(130,e==null?e:typeof e,""))}return t=ut(a,n,t,r),t.elementType=e,t.type=o,t.lanes=i,t}function mn(e,t,n,o){return e=ut(7,e,o,t),e.lanes=n,e}function Qr(e,t,n,o){return e=ut(22,e,o,t),e.elementType=fe,e.lanes=n,e.stateNode={isHidden:!1},e}function Pa(e,t,n){return e=ut(6,e,null,t),e.lanes=n,e}function Ta(e,t,n){return t=ut(4,e.children!==null?e.children:[],e.key,t),t.lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function am(e,t,n,o,r){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=ri(0),this.expirationTimes=ri(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=ri(0),this.identifierPrefix=o,this.onRecoverableError=r,this.mutableSourceEagerHydrationData=null}function Qa(e,t,n,o,r,i,a,u,d){return e=new am(e,t,n,u,d),t===1?(t=1,i===!0&&(t|=8)):t=0,i=ut(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:o,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},$i(i),e}function sm(e,t,n){var o=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:_e,key:o==null?null:""+o,children:e,containerInfo:t,implementation:n}}function Ou(e){if(!e)return jt;e=e._reactInternals;e:{if(Jt(e)!==e||e.tag!==1)throw Error(s(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if($e(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(s(171))}if(e.tag===1){var n=e.type;if($e(n))return hl(e,n,t)}return t}function ju(e,t,n,o,r,i,a,u,d){return e=Qa(n,o,!0,e,r,i,a,u,d),e.context=Ou(null),n=e.current,o=je(),r=Gt(n),i=Mt(o,r),i.callback=t??null,Wt(n,i,r),e.current.lanes=r,Xn(e,r,o),Ge(e,o),e}function Rr(e,t,n,o){var r=t.current,i=je(),a=Gt(r);return n=Ou(n),t.context===null?t.context=n:t.pendingContext=n,t=Mt(i,a),t.payload={element:e},o=o===void 0?null:o,o!==null&&(t.callback=o),e=Wt(r,t,a),e!==null&&(yt(e,r,a,i),cr(e,r,a)),a}function Fr(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function zu(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var n=e.retryLane;e.retryLane=n!==0&&n<t?n:t}}function Ra(e,t){zu(e,t),(e=e.alternate)&&zu(e,t)}function lm(){return null}var Uu=typeof reportError=="function"?reportError:function(e){console.error(e)};function Fa(e){this._internalRoot=e}Ar.prototype.render=Fa.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(s(409));Rr(e,t,null,null)},Ar.prototype.unmount=Fa.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;un(function(){Rr(null,e,null,null)}),t[bt]=null}};function Ar(e){this._internalRoot=e}Ar.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ss();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Bt.length&&t!==0&&t<Bt[n].priority;n++);Bt.splice(n,0,e),n===0&&Ms(e)}};function Aa(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function Br(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function Wu(){}function um(e,t,n,o,r){if(r){if(typeof o=="function"){var i=o;o=function(){var g=Fr(a);i.call(g)}}var a=ju(t,o,e,0,null,!1,!1,"",Wu);return e._reactRootContainer=a,e[bt]=a.current,uo(e.nodeType===8?e.parentNode:e),un(),a}for(;r=e.lastChild;)e.removeChild(r);if(typeof o=="function"){var u=o;o=function(){var g=Fr(d);u.call(g)}}var d=Qa(e,0,!1,null,null,!1,!1,"",Wu);return e._reactRootContainer=d,e[bt]=d.current,uo(e.nodeType===8?e.parentNode:e),un(function(){Rr(t,d,n,o)}),d}function Lr(e,t,n,o,r){var i=n._reactRootContainer;if(i){var a=i;if(typeof r=="function"){var u=r;r=function(){var d=Fr(a);u.call(d)}}Rr(t,a,e,r)}else a=um(n,t,e,r,o);return Fr(a)}bs=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=Gn(t.pendingLanes);n!==0&&(ii(t,n|1),Ge(t,ve()),(Z&6)===0&&(Nn=ve()+500,zt()))}break;case 13:un(function(){var o=Et(e,1);if(o!==null){var r=je();yt(o,e,1,r)}}),Ra(e,1)}},ai=function(e){if(e.tag===13){var t=Et(e,134217728);if(t!==null){var n=je();yt(t,e,134217728,n)}Ra(e,134217728)}},qs=function(e){if(e.tag===13){var t=Gt(e),n=Et(e,t);if(n!==null){var o=je();yt(n,e,t,o)}Ra(e,t)}},Ss=function(){return oe},Is=function(e,t){var n=oe;try{return oe=e,t()}finally{oe=n}},Zr=function(e,t,n){switch(t){case"input":if(Wr(e,n),t=n.name,n.type==="radio"&&t!=null){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var o=n[t];if(o!==e&&o.form===e.form){var r=er(o);if(!r)throw Error(s(90));Ya(o),Wr(o,r)}}}break;case"textarea":ns(e,n);break;case"select":t=n.value,t!=null&&fn(e,!!n.multiple,t,!1)}},ds=Sa,ms=un;var cm={usingClientEntryPoint:!1,Events:[po,qn,er,us,cs,Sa]},Io={findFiberByHostInstance:en,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},dm={bundleType:Io.bundleType,version:Io.version,rendererPackageName:Io.rendererPackageName,rendererConfig:Io.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ue.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=gs(e),e===null?null:e.stateNode},findFiberByHostInstance:Io.findFiberByHostInstance||lm,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var Nr=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Nr.isDisabled&&Nr.supportsFiber)try{Ao=Nr.inject(dm),vt=Nr}catch{}}return Xe.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=cm,Xe.createPortal=function(e,t){var n=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!Aa(t))throw Error(s(200));return sm(e,t,null,n)},Xe.createRoot=function(e,t){if(!Aa(e))throw Error(s(299));var n=!1,o="",r=Uu;return t!=null&&(t.unstable_strictMode===!0&&(n=!0),t.identifierPrefix!==void 0&&(o=t.identifierPrefix),t.onRecoverableError!==void 0&&(r=t.onRecoverableError)),t=Qa(e,1,!1,null,null,n,!1,o,r),e[bt]=t.current,uo(e.nodeType===8?e.parentNode:e),new Fa(t)},Xe.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render=="function"?Error(s(188)):(e=Object.keys(e).join(","),Error(s(268,e)));return e=gs(t),e=e===null?null:e.stateNode,e},Xe.flushSync=function(e){return un(e)},Xe.hydrate=function(e,t,n){if(!Br(t))throw Error(s(200));return Lr(null,e,t,!0,n)},Xe.hydrateRoot=function(e,t,n){if(!Aa(e))throw Error(s(405));var o=n!=null&&n.hydratedSources||null,r=!1,i="",a=Uu;if(n!=null&&(n.unstable_strictMode===!0&&(r=!0),n.identifierPrefix!==void 0&&(i=n.identifierPrefix),n.onRecoverableError!==void 0&&(a=n.onRecoverableError)),t=ju(t,null,e,1,n??null,r,!1,i,a),e[bt]=t.current,uo(e),o)for(e=0;e<o.length;e++)n=o[e],r=n._getVersion,r=r(n._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[n,r]:t.mutableSourceEagerHydrationData.push(n,r);return new Ar(t)},Xe.render=function(e,t,n){if(!Br(t))throw Error(s(200));return Lr(null,e,t,!1,n)},Xe.unmountComponentAtNode=function(e){if(!Br(e))throw Error(s(40));return e._reactRootContainer?(un(function(){Lr(null,null,e,!1,function(){e._reactRootContainer=null,e[bt]=null})}),!0):!1},Xe.unstable_batchedUpdates=Sa,Xe.unstable_renderSubtreeIntoContainer=function(e,t,n,o){if(!Br(n))throw Error(s(200));if(e==null||e._reactInternals===void 0)throw Error(s(38));return Lr(e,t,n,!1,o)},Xe.version="18.3.1-next-f1338f8080-20240426",Xe}var Zu;function ac(){if(Zu)return Na.exports;Zu=1;function c(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(c)}catch(l){console.error(l)}}return c(),Na.exports=vm(),Na.exports}var Ju;function wm(){if(Ju)return Dr;Ju=1;var c=ac();return Dr.createRoot=c.createRoot,Dr.hydrateRoot=c.hydrateRoot,Dr}var xm=wm();function Qt(c){return Array.isArray?Array.isArray(c):uc(c)==="[object Array]"}function Cm(c){if(typeof c=="string")return c;let l=c+"";return l=="0"&&1/c==-1/0?"-0":l}function _m(c){return c==null?"":Cm(c)}function kt(c){return typeof c=="string"}function sc(c){return typeof c=="number"}function km(c){return c===!0||c===!1||bm(c)&&uc(c)=="[object Boolean]"}function lc(c){return typeof c=="object"}function bm(c){return lc(c)&&c!==null}function nt(c){return c!=null}function ja(c){return!c.trim().length}function uc(c){return c==null?c===void 0?"[object Undefined]":"[object Null]":Object.prototype.toString.call(c)}const qm="Incorrect 'index' type",Sm=c=>`Invalid value for key ${c}`,Im=c=>`Pattern length exceeds max of ${c}.`,Em=c=>`Missing ${c} property in key`,Mm=c=>`Property 'weight' in key '${c}' must be a positive integer`,ec=Object.prototype.hasOwnProperty;class Pm{constructor(l){this._keys=[],this._keyMap={};let s=0;l.forEach(w=>{let y=cc(w);this._keys.push(y),this._keyMap[y.id]=y,s+=y.weight}),this._keys.forEach(w=>{w.weight/=s})}get(l){return this._keyMap[l]}keys(){return this._keys}toJSON(){return JSON.stringify(this._keys)}}function cc(c){let l=null,s=null,w=null,y=1,x=null;if(kt(c)||Qt(c))w=c,l=tc(c),s=Ua(c);else{if(!ec.call(c,"name"))throw new Error(Em("name"));const C=c.name;if(w=C,ec.call(c,"weight")&&(y=c.weight,y<=0))throw new Error(Mm(C));l=tc(C),s=Ua(C),x=c.getFn}return{path:l,id:s,weight:y,src:w,getFn:x}}function tc(c){return Qt(c)?c:c.split(".")}function Ua(c){return Qt(c)?c.join("."):c}function Tm(c,l){let s=[],w=!1;const y=(x,C,I)=>{if(nt(x))if(!C[I])s.push(x);else{let q=C[I];const M=x[q];if(!nt(M))return;if(I===C.length-1&&(kt(M)||sc(M)||km(M)))s.push(_m(M));else if(Qt(M)){w=!0;for(let Q=0,P=M.length;Q<P;Q+=1)y(M[Q],C,I+1)}else C.length&&y(M,C,I+1)}};return y(c,kt(l)?l.split("."):l,0),w?s:s[0]}const Qm={includeMatches:!1,findAllMatches:!1,minMatchCharLength:1},Rm={isCaseSensitive:!1,ignoreDiacritics:!1,includeScore:!1,keys:[],shouldSort:!0,sortFn:(c,l)=>c.score===l.score?c.idx<l.idx?-1:1:c.score<l.score?-1:1},Fm={location:0,threshold:.6,distance:100},Am={useExtendedSearch:!1,getFn:Tm,ignoreLocation:!1,ignoreFieldNorm:!1,fieldNormWeight:1};var U={...Rm,...Qm,...Fm,...Am};const Bm=/[^ ]+/g;function Lm(c=1,l=3){const s=new Map,w=Math.pow(10,l);return{get(y){const x=y.match(Bm).length;if(s.has(x))return s.get(x);const C=1/Math.pow(x,.5*c),I=parseFloat(Math.round(C*w)/w);return s.set(x,I),I},clear(){s.clear()}}}class Ka{constructor({getFn:l=U.getFn,fieldNormWeight:s=U.fieldNormWeight}={}){this.norm=Lm(s,3),this.getFn=l,this.isCreated=!1,this.setIndexRecords()}setSources(l=[]){this.docs=l}setIndexRecords(l=[]){this.records=l}setKeys(l=[]){this.keys=l,this._keysMap={},l.forEach((s,w)=>{this._keysMap[s.id]=w})}create(){this.isCreated||!this.docs.length||(this.isCreated=!0,kt(this.docs[0])?this.docs.forEach((l,s)=>{this._addString(l,s)}):this.docs.forEach((l,s)=>{this._addObject(l,s)}),this.norm.clear())}add(l){const s=this.size();kt(l)?this._addString(l,s):this._addObject(l,s)}removeAt(l){this.records.splice(l,1);for(let s=l,w=this.size();s<w;s+=1)this.records[s].i-=1}getValueForItemAtKeyId(l,s){return l[this._keysMap[s]]}size(){return this.records.length}_addString(l,s){if(!nt(l)||ja(l))return;let w={v:l,i:s,n:this.norm.get(l)};this.records.push(w)}_addObject(l,s){let w={i:s,$:{}};this.keys.forEach((y,x)=>{let C=y.getFn?y.getFn(l):this.getFn(l,y.path);if(nt(C)){if(Qt(C)){let I=[];const q=[{nestedArrIndex:-1,value:C}];for(;q.length;){const{nestedArrIndex:M,value:Q}=q.pop();if(nt(Q))if(kt(Q)&&!ja(Q)){let P={v:Q,i:M,n:this.norm.get(Q)};I.push(P)}else Qt(Q)&&Q.forEach((P,R)=>{q.push({nestedArrIndex:R,value:P})})}w.$[x]=I}else if(kt(C)&&!ja(C)){let I={v:C,n:this.norm.get(C)};w.$[x]=I}}}),this.records.push(w)}toJSON(){return{keys:this.keys,records:this.records}}}function dc(c,l,{getFn:s=U.getFn,fieldNormWeight:w=U.fieldNormWeight}={}){const y=new Ka({getFn:s,fieldNormWeight:w});return y.setKeys(c.map(cc)),y.setSources(l),y.create(),y}function Nm(c,{getFn:l=U.getFn,fieldNormWeight:s=U.fieldNormWeight}={}){const{keys:w,records:y}=c,x=new Ka({getFn:l,fieldNormWeight:s});return x.setKeys(w),x.setIndexRecords(y),x}function Or(c,{errors:l=0,currentLocation:s=0,expectedLocation:w=0,distance:y=U.distance,ignoreLocation:x=U.ignoreLocation}={}){const C=l/c.length;if(x)return C;const I=Math.abs(w-s);return y?C+I/y:I?1:C}function Dm(c=[],l=U.minMatchCharLength){let s=[],w=-1,y=-1,x=0;for(let C=c.length;x<C;x+=1){let I=c[x];I&&w===-1?w=x:!I&&w!==-1&&(y=x-1,y-w+1>=l&&s.push([w,y]),w=-1)}return c[x-1]&&x-w>=l&&s.push([w,x-1]),s}const pn=32;function Om(c,l,s,{location:w=U.location,distance:y=U.distance,threshold:x=U.threshold,findAllMatches:C=U.findAllMatches,minMatchCharLength:I=U.minMatchCharLength,includeMatches:q=U.includeMatches,ignoreLocation:M=U.ignoreLocation}={}){if(l.length>pn)throw new Error(Im(pn));const Q=l.length,P=c.length,R=Math.max(0,Math.min(w,P));let $=x,Y=R;const G=I>1||q,V=G?Array(P):[];let qe;for(;(qe=c.indexOf(l,Y))>-1;){let re=Or(l,{currentLocation:qe,expectedLocation:R,distance:y,ignoreLocation:M});if($=Math.min(re,$),Y=qe+Q,G){let ye=0;for(;ye<Q;)V[qe+ye]=1,ye+=1}}Y=-1;let xe=[],Se=1,ue=Q+P;const Ke=1<<Q-1;for(let re=0;re<Q;re+=1){let ye=0,Pe=ue;for(;ye<Pe;)Or(l,{errors:re,currentLocation:R+Pe,expectedLocation:R,distance:y,ignoreLocation:M})<=$?ye=Pe:ue=Pe,Pe=Math.floor((ue-ye)/2+ye);ue=Pe;let ot=Math.max(1,R-Pe+1),ct=C?P:Math.min(R+Pe,P)+Q,Te=Array(ct+2);Te[ct+1]=(1<<re)-1;for(let me=ct;me>=ot;me-=1){let De=me-1,Qe=s[c.charAt(De)];if(G&&(V[De]=+!!Qe),Te[me]=(Te[me+1]<<1|1)&Qe,re&&(Te[me]|=(xe[me+1]|xe[me])<<1|1|xe[me+1]),Te[me]&Ke&&(Se=Or(l,{errors:re,currentLocation:De,expectedLocation:R,distance:y,ignoreLocation:M}),Se<=$)){if($=Se,Y=De,Y<=R)break;ot=Math.max(1,2*R-Y)}}if(Or(l,{errors:re+1,currentLocation:R,expectedLocation:R,distance:y,ignoreLocation:M})>$)break;xe=Te}const _e={isMatch:Y>=0,score:Math.max(.001,Se)};if(G){const re=Dm(V,I);re.length?q&&(_e.indices=re):_e.isMatch=!1}return _e}function jm(c){let l={};for(let s=0,w=c.length;s<w;s+=1){const y=c.charAt(s);l[y]=(l[y]||0)|1<<w-s-1}return l}const jr=String.prototype.normalize?c=>c.normalize("NFD").replace(/[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F]/g,""):c=>c;class mc{constructor(l,{location:s=U.location,threshold:w=U.threshold,distance:y=U.distance,includeMatches:x=U.includeMatches,findAllMatches:C=U.findAllMatches,minMatchCharLength:I=U.minMatchCharLength,isCaseSensitive:q=U.isCaseSensitive,ignoreDiacritics:M=U.ignoreDiacritics,ignoreLocation:Q=U.ignoreLocation}={}){if(this.options={location:s,threshold:w,distance:y,includeMatches:x,findAllMatches:C,minMatchCharLength:I,isCaseSensitive:q,ignoreDiacritics:M,ignoreLocation:Q},l=q?l:l.toLowerCase(),l=M?jr(l):l,this.pattern=l,this.chunks=[],!this.pattern.length)return;const P=($,Y)=>{this.chunks.push({pattern:$,alphabet:jm($),startIndex:Y})},R=this.pattern.length;if(R>pn){let $=0;const Y=R%pn,G=R-Y;for(;$<G;)P(this.pattern.substr($,pn),$),$+=pn;if(Y){const V=R-pn;P(this.pattern.substr(V),V)}}else P(this.pattern,0)}searchIn(l){const{isCaseSensitive:s,ignoreDiacritics:w,includeMatches:y}=this.options;if(l=s?l:l.toLowerCase(),l=w?jr(l):l,this.pattern===l){let G={isMatch:!0,score:0};return y&&(G.indices=[[0,l.length-1]]),G}const{location:x,distance:C,threshold:I,findAllMatches:q,minMatchCharLength:M,ignoreLocation:Q}=this.options;let P=[],R=0,$=!1;this.chunks.forEach(({pattern:G,alphabet:V,startIndex:qe})=>{const{isMatch:xe,score:Se,indices:ue}=Om(l,G,V,{location:x+qe,distance:C,threshold:I,findAllMatches:q,minMatchCharLength:M,includeMatches:y,ignoreLocation:Q});xe&&($=!0),R+=Se,xe&&ue&&(P=[...P,...ue])});let Y={isMatch:$,score:$?R/this.chunks.length:1};return $&&y&&(Y.indices=P),Y}}class Zt{constructor(l){this.pattern=l}static isMultiMatch(l){return nc(l,this.multiRegex)}static isSingleMatch(l){return nc(l,this.singleRegex)}search(){}}function nc(c,l){const s=c.match(l);return s?s[1]:null}class zm extends Zt{constructor(l){super(l)}static get type(){return"exact"}static get multiRegex(){return/^="(.*)"$/}static get singleRegex(){return/^=(.*)$/}search(l){const s=l===this.pattern;return{isMatch:s,score:s?0:1,indices:[0,this.pattern.length-1]}}}class Um extends Zt{constructor(l){super(l)}static get type(){return"inverse-exact"}static get multiRegex(){return/^!"(.*)"$/}static get singleRegex(){return/^!(.*)$/}search(l){const w=l.indexOf(this.pattern)===-1;return{isMatch:w,score:w?0:1,indices:[0,l.length-1]}}}class Wm extends Zt{constructor(l){super(l)}static get type(){return"prefix-exact"}static get multiRegex(){return/^\^"(.*)"$/}static get singleRegex(){return/^\^(.*)$/}search(l){const s=l.startsWith(this.pattern);return{isMatch:s,score:s?0:1,indices:[0,this.pattern.length-1]}}}class $m extends Zt{constructor(l){super(l)}static get type(){return"inverse-prefix-exact"}static get multiRegex(){return/^!\^"(.*)"$/}static get singleRegex(){return/^!\^(.*)$/}search(l){const s=!l.startsWith(this.pattern);return{isMatch:s,score:s?0:1,indices:[0,l.length-1]}}}class Vm extends Zt{constructor(l){super(l)}static get type(){return"suffix-exact"}static get multiRegex(){return/^"(.*)"\$$/}static get singleRegex(){return/^(.*)\$$/}search(l){const s=l.endsWith(this.pattern);return{isMatch:s,score:s?0:1,indices:[l.length-this.pattern.length,l.length-1]}}}class Hm extends Zt{constructor(l){super(l)}static get type(){return"inverse-suffix-exact"}static get multiRegex(){return/^!"(.*)"\$$/}static get singleRegex(){return/^!(.*)\$$/}search(l){const s=!l.endsWith(this.pattern);return{isMatch:s,score:s?0:1,indices:[0,l.length-1]}}}class pc extends Zt{constructor(l,{location:s=U.location,threshold:w=U.threshold,distance:y=U.distance,includeMatches:x=U.includeMatches,findAllMatches:C=U.findAllMatches,minMatchCharLength:I=U.minMatchCharLength,isCaseSensitive:q=U.isCaseSensitive,ignoreDiacritics:M=U.ignoreDiacritics,ignoreLocation:Q=U.ignoreLocation}={}){super(l),this._bitapSearch=new mc(l,{location:s,threshold:w,distance:y,includeMatches:x,findAllMatches:C,minMatchCharLength:I,isCaseSensitive:q,ignoreDiacritics:M,ignoreLocation:Q})}static get type(){return"fuzzy"}static get multiRegex(){return/^"(.*)"$/}static get singleRegex(){return/^(.*)$/}search(l){return this._bitapSearch.searchIn(l)}}class hc extends Zt{constructor(l){super(l)}static get type(){return"include"}static get multiRegex(){return/^'"(.*)"$/}static get singleRegex(){return/^'(.*)$/}search(l){let s=0,w;const y=[],x=this.pattern.length;for(;(w=l.indexOf(this.pattern,s))>-1;)s=w+x,y.push([w,s-1]);const C=!!y.length;return{isMatch:C,score:C?0:1,indices:y}}}const Wa=[zm,hc,Wm,$m,Hm,Vm,Um,pc],oc=Wa.length,Gm=/ +(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/,Xm="|";function Km(c,l={}){return c.split(Xm).map(s=>{let w=s.trim().split(Gm).filter(x=>x&&!!x.trim()),y=[];for(let x=0,C=w.length;x<C;x+=1){const I=w[x];let q=!1,M=-1;for(;!q&&++M<oc;){const Q=Wa[M];let P=Q.isMultiMatch(I);P&&(y.push(new Q(P,l)),q=!0)}if(!q)for(M=-1;++M<oc;){const Q=Wa[M];let P=Q.isSingleMatch(I);if(P){y.push(new Q(P,l));break}}}return y})}const Ym=new Set([pc.type,hc.type]);class Zm{constructor(l,{isCaseSensitive:s=U.isCaseSensitive,ignoreDiacritics:w=U.ignoreDiacritics,includeMatches:y=U.includeMatches,minMatchCharLength:x=U.minMatchCharLength,ignoreLocation:C=U.ignoreLocation,findAllMatches:I=U.findAllMatches,location:q=U.location,threshold:M=U.threshold,distance:Q=U.distance}={}){this.query=null,this.options={isCaseSensitive:s,ignoreDiacritics:w,includeMatches:y,minMatchCharLength:x,findAllMatches:I,ignoreLocation:C,location:q,threshold:M,distance:Q},l=s?l:l.toLowerCase(),l=w?jr(l):l,this.pattern=l,this.query=Km(this.pattern,this.options)}static condition(l,s){return s.useExtendedSearch}searchIn(l){const s=this.query;if(!s)return{isMatch:!1,score:1};const{includeMatches:w,isCaseSensitive:y,ignoreDiacritics:x}=this.options;l=y?l:l.toLowerCase(),l=x?jr(l):l;let C=0,I=[],q=0;for(let M=0,Q=s.length;M<Q;M+=1){const P=s[M];I.length=0,C=0;for(let R=0,$=P.length;R<$;R+=1){const Y=P[R],{isMatch:G,indices:V,score:qe}=Y.search(l);if(G){if(C+=1,q+=qe,w){const xe=Y.constructor.type;Ym.has(xe)?I=[...I,...V]:I.push(V)}}else{q=0,C=0,I.length=0;break}}if(C){let R={isMatch:!0,score:q/C};return w&&(R.indices=I),R}}return{isMatch:!1,score:1}}}const $a=[];function Jm(...c){$a.push(...c)}function Va(c,l){for(let s=0,w=$a.length;s<w;s+=1){let y=$a[s];if(y.condition(c,l))return new y(c,l)}return new mc(c,l)}const zr={AND:"$and",OR:"$or"},Ha={PATH:"$path",PATTERN:"$val"},Ga=c=>!!(c[zr.AND]||c[zr.OR]),ep=c=>!!c[Ha.PATH],tp=c=>!Qt(c)&&lc(c)&&!Ga(c),rc=c=>({[zr.AND]:Object.keys(c).map(l=>({[l]:c[l]}))});function fc(c,l,{auto:s=!0}={}){const w=y=>{let x=Object.keys(y);const C=ep(y);if(!C&&x.length>1&&!Ga(y))return w(rc(y));if(tp(y)){const q=C?y[Ha.PATH]:x[0],M=C?y[Ha.PATTERN]:y[q];if(!kt(M))throw new Error(Sm(q));const Q={keyId:Ua(q),pattern:M};return s&&(Q.searcher=Va(M,l)),Q}let I={children:[],operator:x[0]};return x.forEach(q=>{const M=y[q];Qt(M)&&M.forEach(Q=>{I.children.push(w(Q))})}),I};return Ga(c)||(c=rc(c)),w(c)}function np(c,{ignoreFieldNorm:l=U.ignoreFieldNorm}){c.forEach(s=>{let w=1;s.matches.forEach(({key:y,norm:x,score:C})=>{const I=y?y.weight:null;w*=Math.pow(C===0&&I?Number.EPSILON:C,(I||1)*(l?1:x))}),s.score=w})}function op(c,l){const s=c.matches;l.matches=[],nt(s)&&s.forEach(w=>{if(!nt(w.indices)||!w.indices.length)return;const{indices:y,value:x}=w;let C={indices:y,value:x};w.key&&(C.key=w.key.src),w.idx>-1&&(C.refIndex=w.idx),l.matches.push(C)})}function rp(c,l){l.score=c.score}function ip(c,l,{includeMatches:s=U.includeMatches,includeScore:w=U.includeScore}={}){const y=[];return s&&y.push(op),w&&y.push(rp),c.map(x=>{const{idx:C}=x,I={item:l[C],refIndex:C};return y.length&&y.forEach(q=>{q(x,I)}),I})}class jn{constructor(l,s={},w){this.options={...U,...s},this.options.useExtendedSearch,this._keyStore=new Pm(this.options.keys),this.setCollection(l,w)}setCollection(l,s){if(this._docs=l,s&&!(s instanceof Ka))throw new Error(qm);this._myIndex=s||dc(this.options.keys,this._docs,{getFn:this.options.getFn,fieldNormWeight:this.options.fieldNormWeight})}add(l){nt(l)&&(this._docs.push(l),this._myIndex.add(l))}remove(l=()=>!1){const s=[];for(let w=0,y=this._docs.length;w<y;w+=1){const x=this._docs[w];l(x,w)&&(this.removeAt(w),w-=1,y-=1,s.push(x))}return s}removeAt(l){this._docs.splice(l,1),this._myIndex.removeAt(l)}getIndex(){return this._myIndex}search(l,{limit:s=-1}={}){const{includeMatches:w,includeScore:y,shouldSort:x,sortFn:C,ignoreFieldNorm:I}=this.options;let q=kt(l)?kt(this._docs[0])?this._searchStringList(l):this._searchObjectList(l):this._searchLogical(l);return np(q,{ignoreFieldNorm:I}),x&&q.sort(C),sc(s)&&s>-1&&(q=q.slice(0,s)),ip(q,this._docs,{includeMatches:w,includeScore:y})}_searchStringList(l){const s=Va(l,this.options),{records:w}=this._myIndex,y=[];return w.forEach(({v:x,i:C,n:I})=>{if(!nt(x))return;const{isMatch:q,score:M,indices:Q}=s.searchIn(x);q&&y.push({item:x,idx:C,matches:[{score:M,value:x,norm:I,indices:Q}]})}),y}_searchLogical(l){const s=fc(l,this.options),w=(I,q,M)=>{if(!I.children){const{keyId:P,searcher:R}=I,$=this._findMatches({key:this._keyStore.get(P),value:this._myIndex.getValueForItemAtKeyId(q,P),searcher:R});return $&&$.length?[{idx:M,item:q,matches:$}]:[]}const Q=[];for(let P=0,R=I.children.length;P<R;P+=1){const $=I.children[P],Y=w($,q,M);if(Y.length)Q.push(...Y);else if(I.operator===zr.AND)return[]}return Q},y=this._myIndex.records,x={},C=[];return y.forEach(({$:I,i:q})=>{if(nt(I)){let M=w(s,I,q);M.length&&(x[q]||(x[q]={idx:q,item:I,matches:[]},C.push(x[q])),M.forEach(({matches:Q})=>{x[q].matches.push(...Q)}))}}),C}_searchObjectList(l){const s=Va(l,this.options),{keys:w,records:y}=this._myIndex,x=[];return y.forEach(({$:C,i:I})=>{if(!nt(C))return;let q=[];w.forEach((M,Q)=>{q.push(...this._findMatches({key:M,value:C[Q],searcher:s}))}),q.length&&x.push({idx:I,item:C,matches:q})}),x}_findMatches({key:l,value:s,searcher:w}){if(!nt(s))return[];let y=[];if(Qt(s))s.forEach(({v:x,i:C,n:I})=>{if(!nt(x))return;const{isMatch:q,score:M,indices:Q}=w.searchIn(x);q&&y.push({score:M,key:l,value:x,idx:C,norm:I,indices:Q})});else{const{v:x,n:C}=s,{isMatch:I,score:q,indices:M}=w.searchIn(x);I&&y.push({score:q,key:l,value:x,norm:C,indices:M})}return y}}jn.version="7.1.0";jn.createIndex=dc;jn.parseIndex=Nm;jn.config=U;jn.parseQuery=fc;Jm(Zm);/**
 * @license lucide-react v0.344.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */var ap={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};/**
 * @license lucide-react v0.344.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const sp=c=>c.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase().trim(),gc=(c,l)=>{const s=ze.forwardRef(({color:w="currentColor",size:y=24,strokeWidth:x=2,absoluteStrokeWidth:C,className:I="",children:q,...M},Q)=>ze.createElement("svg",{ref:Q,...ap,width:y,height:y,stroke:w,strokeWidth:C?Number(x)*24/Number(y):x,className:["lucide",`lucide-${sp(c)}`,I].join(" "),...M},[...l.map(([P,R])=>ze.createElement(P,R)),...Array.isArray(q)?q:[q]]));return s.displayName=`${c}`,s};/**
 * @license lucide-react v0.344.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const ic=gc("Search",[["circle",{cx:"11",cy:"11",r:"8",key:"4ej97u"}],["path",{d:"m21 21-4.3-4.3",key:"1qie3q"}]]);/**
 * @license lucide-react v0.344.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const lp=gc("X",[["path",{d:"M18 6 6 18",key:"1bl5f8"}],["path",{d:"m6 6 12 12",key:"d8bk6v"}]]),up=""+new URL("switcher-CaaC6x9B.svg",import.meta.url).href,cp=""+new URL("docs-BGLm6Xpv.svg",import.meta.url).href,dp=""+new URL("academy-DLOT8zSY.svg",import.meta.url).href,mp=""+new URL("resonance-Du6ePxdd.svg",import.meta.url).href,pp=""+new URL("support-rYw0KIxl.svg",import.meta.url).href,hp=()=>{const[c,l]=ze.useState(!1),s=()=>{l(!c)};return v.jsxs("div",{className:"flex items-center pt-2 w-56 p-0",children:[v.jsx("button",{className:"cursor-pointer p-0 border-none bg-transparent",onClick:s,children:v.jsx("img",{className:"title-image cursor-pointer",alt:"IQM Docs Application Switcher",src:up,height:42,width:222,style:{height:"42px",width:"222px"}})}),c&&v.jsxs("div",{className:"absolute mt-[14em] ml-[0.5em] bg-white w-[208px] rounded-lg p-1 pt-1 z-50 border border-gray-300",children:[v.jsx("div",{children:v.jsx("a",{href:"/","aria-label":"IQM Docs",target:"_blank",children:v.jsx("img",{className:"switcher-title-image hover:filter hover:contrast-[.90]",alt:"IQM Academy",src:cp,height:40,width:200})})}),v.jsx("div",{children:v.jsx("a",{href:"https://academy.meetiqm.com",target:"_blank","aria-label":"IQM Academy",children:v.jsx("img",{className:"switcher-title-image hover:filter hover:contrast-[.90]",alt:"IQM Academy",src:dp,height:40,width:200})})}),v.jsx("div",{children:v.jsx("a",{href:"https://resonance.meetiqm.com",target:"_blank",rel:"noreferrer","aria-label":"IQM Resonance",children:v.jsx("img",{className:"switcher-title-image hover:filter hover:contrast-[.90]",alt:"IQM Resonance",src:mp,height:40,width:200})})}),v.jsx("div",{children:v.jsx("a",{href:"https://support.meetiqm.com",target:"_blank",rel:"noreferrer","aria-label":"IQM Support",children:v.jsx("img",{className:"switcher-title-image hover:filter hover:contrast-[.90]",alt:"IQM Support",src:pp,height:40,width:200})})})]})]})},za=JSON.parse(`[{"package":"iqm-exa-common","title":"API documentation: exa-common","url":"/iqm-exa-common/index.html","description":"26.13 2025-04-16 This documentation describes the common library of the Experiment Automation ( EXA ) project. exa-common contains classes and functions that are shared by EXA , Cortex and Station Con...","content":"26.13 2025-04-16 This documentation describes the common library of the Experiment Automation ( EXA ) project. exa-common contains classes and functions that are shared by EXA , Cortex and Station Control . Index Module Index Search Page next API Reference © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"API Reference","url":"/iqm-exa-common/API.html","description":"exa.common Shared errors, helpers, control structures, settings, API models etc. previous API documentation: exa-common next common © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated o...","content":"exa.common Shared errors, helpers, control structures, settings, API models etc. previous API documentation: exa-common next common © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"exa.common.errors.server_errors.UnauthorizedError","url":"/iqm-exa-common/api/exa.common.errors.server_errors.UnauthorizedError.html","description":"Error raised when the user is not authorized. message ( str ) – previous exa.common.errors.server_errors.StationControlError next exa.common.errors.server_errors.ValidationError © Copyright 2019-2025,...","content":"Error raised when the user is not authorized. message ( str ) – previous exa.common.errors.server_errors.StationControlError next exa.common.errors.server_errors.ValidationError © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"helpers","url":"/iqm-exa-common/api/exa.common.helpers.html","description":"Miscellaneous helper functionality. Full path: exa.common.helpers Subpackages and modules deprecation  software_version_helper  previous exa.common.errors.server_errors.ValidationError next deprecatio...","content":"Miscellaneous helper functionality. Full path: exa.common.helpers Subpackages and modules deprecation  software_version_helper  previous exa.common.errors.server_errors.ValidationError next deprecation © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"CHAD","url":"/iqm-exa-common/api/exa.common.qcm_data.chad_model.CHAD.html","description":"Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidate...","content":"Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes computational_resonator_names Names of all the computational resonators declared in CHAD data. coupler_names Names of all the couplers declared in CHAD data. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. probe_line_names Names of all the probe lines declared in CHAD data. qubit_names Names of all the qubits declared in CHAD data. mask_set_name  variant  components  Methods filter_qubit_components Filter qubit components from the input components. get_common_coupler_for Convenience method for getting the name of a coupler connecting a pair of components. get_component Get component by component name. get_coupler_mapping_for Get the coupler-component mapping for the couplers that connects to at least two components get_probe_line_mapping_for Get the probe line-component mapping. get_probe_line_names_for Get probe lines for given qubits in CHAD data. group_components_per_default_operations Groups given qubits/couplers based on their defined default operations. mask_set_name ( str ) – variant ( str ) – components ( Components ) – Get component by component name. component_name ( str ) – Component Names of all the qubits declared in CHAD data. Names of all the couplers declared in CHAD data. Names of all the probe lines declared in CHAD data. Names of all the computational resonators declared in CHAD data. Filter qubit components from the input components. component_names ( Collection [ str ] ) – list [ str ] Get probe lines for given qubits in CHAD data. component_names ( Collection [ str ] ) – list [ str ] Groups given qubits/couplers based on their defined default operations. The default operations that can be deducted from a CHAD are readout , drive , and flux . component_names ( Collection [ str ] ) – The component names to which to do the grouping.\\nOther components present in the CHAD will not be included in the returned data. Tuple of qubits and couplers mapped to their connected default operations. The data is in the form of a dict with the keys being readout , drive , and flux ,\\nand the values the list of component names having that particular operation. The data is in the form of a dict with the keys being readout , drive , and flux ,\\nand the values the list of component names having that particular operation. tuple [ dict [ str , list [ str ]], dict [ str , list [ str ]]] in the given qubits. component_names ( Collection [ str ] ) – The qubit names. May contain any number of qubits. Coupler names mapped to the components they connect. - ValueError – If the provided qubit name list contains duplicates. dict [ str , list [ str ]] Get the probe line-component mapping. component_names ( Collection [ str ] ) – The qubit names. May contain any number of qubits. dict [ str , list [ str ]] Convenience method for getting the name of a coupler connecting a pair of components. first_component ( str ) – The name of the first component. second_component ( str ) – The name of the second component.\\nThe order of qubits does not matter, i.e. the first_qubit and second_qubit arguments are interchangeable. The name of the coupler that connects the inputted components. The name of the coupler that connects the inputted components. - ValueError – If there were no couplers or more than one coupler connecting the component pair (the latter\\n    should not be possible in a realistic chip). str Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous chad_model next Component © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"chip_topology","url":"/iqm-exa-common/api/exa.common.qcm_data.chip_topology.html","description":"Chip topology class for parsing CHAD and other QPU related data into human-usable form. Full path: exa.common.qcm_data.chip_topology Functions sort_components (components) Sort the given components in...","content":"Chip topology class for parsing CHAD and other QPU related data into human-usable form. Full path: exa.common.qcm_data.chip_topology Functions sort_components (components) Sort the given components in a human-readable way. sort_couplers (couplers) Sort the given couplers in a human-readable way. Classes ChipTopology Topology information for a chip (typically a QPU). Inheritance previous Qubit next exa.common.qcm_data.chip_topology.sort_components © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"exa.common.logger.logger.init_loggers","url":"/iqm-exa-common/api/exa.common.logger.logger.init_loggers.html","description":"Set the log level of given logger names. Logs with INFO or DEBUG logging levels are written into stdout, and logs with other levels are written into stderr. By default, the root logger uses WARNING le...","content":"Set the log level of given logger names. Logs with INFO or DEBUG logging levels are written into stdout, and logs with other levels are written into stderr. By default, the root logger uses WARNING level. See Python’s logging module for possible logging levels. loggers ( dict [ str , str | None ] | None ) – A mapping from logger name to (case insensitive) logging level. If logging level is None or empty\\nstring, default_level will be used for that logger. It is possible to fine tune logging for individual\\nmodules, since logger propagation is turned off. Overriding works both ways: a parent logger can have higher\\nlogging level than its descendants, and vice versa.\\nFor example, {\\"sqlalchemy\\": None, \\"sqlalchemy.engine\\": \\"debug\\"} will put\\n“sqlalchemy” and its descendants (i.e. “sqlalchemy.dialects”, “sqlalchemy.dialects.sqlite”, etc.) into default_level , except for “sqlalchemy.engine” for which DEBUG level is defined.\\nFor the root logger, use empty string key, for example: {\\"\\": \\"INFO\\"} .\\nIf empty dict or None is given, only the root logger will be initialized to its default WARNING level. default_level ( str ) – The default level (case insensitive) to be used for logger names given with loggers for which a level is not specified. verbose ( bool ) – If False, :const: BRIEF format will be used for log messages, otherwise :const: VERBOSE . extra_info_getter ( Callable [ [ ] , str ] | None ) – Optional callable to convey extra information to log messages. It will get called before\\neach log message emission and the output will get appended to the log message. None previous logger next ExtraFormatter © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"Coupler","url":"/iqm-exa-common/api/exa.common.qcm_data.chad_model.Coupler.html","description":"Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form...","content":"Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  connections  Methods name ( str ) – connections ( tuple [ str , ... ] ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous ComputationalResonator next Launcher © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"Components","url":"/iqm-exa-common/api/exa.common.qcm_data.chad_model.Components.html","description":"Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidate...","content":"Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes all  model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. qubits  couplers  probe_lines  launchers  computational_resonators  Methods sort_components  qubit ( tuple [ Qubit , ... ] ) – tunable_coupler ( tuple [ Coupler , ... ] ) – probe_line ( tuple [ ProbeLine , ... ] ) – launcher ( tuple [ Launcher , ... ] ) – computational_resonator ( tuple [ ComputationalResonator , ... ] ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous Component next ComputationalResonator © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"ChipTopology","url":"/iqm-exa-common/api/exa.common.qcm_data.chip_topology.ChipTopology.html","description":"Bases: object Topology information for a chip (typically a QPU). Can represent the information found in a CHAD, as well as locus mappings for gates. qubits ( Iterable [ str ] ) – names of the qubits. ...","content":"Bases: object Topology information for a chip (typically a QPU). Can represent the information found in a CHAD, as well as locus mappings for gates. qubits ( Iterable [ str ] ) – names of the qubits. computational_resonators ( Iterable [ str ] ) – names of the computational resonators. couplers ( dict [ str , Iterable [ str ] ] ) – mapping from coupler name to names of chip components it connects to. probe_lines ( dict [ str , Iterable [ str ] ] ) – mapping from probe line name to names of chip components it connects to. variant ( str ) – identifier of the QPU design variant. Module: exa.common.qcm_data.chip_topology Attributes computational_resonators Computational resonators on the chip, in any order. computational_resonators_sorted Computational resonators on the chip, sorted. couplers Tunable couplers on the chip, in any order. couplers_sorted Tunable couplers on the chip, sorted by numerical IDs. probe_lines Probe lines on the chip, in any order. probe_lines_sorted Probe lines on the chip, sorted. all_components All components on the chip. coupler_to_components Map from each coupler to all other components it connects to. component_to_couplers Map from each component to all couplers connected to it. probe_line_to_components Map from each probe line to all components it connects to. component_to_probe_line Map from each component to the probeline connected to it. Methods from_chad Construct a ChipTopology instance from a CHAD. from_chip_design_record Construct a ChipTopology instance from a raw Chip design record. get_all_common_resonators Computational resonators connected to all the given qubits via a coupler. get_common_computational_resonator Convenience method for getting the name of a computational resonator which is connected to both specified qubit components via tunable couplers. get_connected_probe_lines Get probelines that are connected to any of the given components. get_connecting_couplers Couplers that only connect to the given chip components, and connect at least two of them. get_coupler_for Common coupler for the given chip components (e.g. qubit or computational resonator). get_loci Gives all the loci of a given gate. get_neighbor_couplers Couplers that connect to at least one of the given chip components. get_neighbor_locus_components Chip components that are connected to the given components by a coupler, but not included in them. is_computational_resonator True iff the given component is a computational resonator. is_coupler True iff the given component is a coupler. is_probe_line True iff the given component is a probe line. is_qubit True iff the given component is a qubit. limit_values Prunes the given dictionary (e.g. a coupler-to-qubits map) to a subset of values. map_locus Returns the mapped components for the given locus and the given gate. map_to_locus Returns the locus that is mapped to the given components. set_locus_mapping Add a custom mapping from a gate locus to a set of components required for the gate operation. Computational resonators on the chip, in any order. Computational resonators on the chip, sorted. Tunable couplers on the chip, in any order. Tunable couplers on the chip, sorted by numerical IDs. Probe lines on the chip, in any order. Probe lines on the chip, sorted. All components on the chip. Map from each coupler to all other components it connects to. The values are sorted. Map from each component to all couplers connected to it. Map from each probe line to all components it connects to. Map from each component to the probeline connected to it.\\nMax 1 connection per component is assumed.\\nComponents without connection to a probe line don’t appear. Construct a ChipTopology instance from a raw Chip design record. record ( dict ) – Record as returned by Station control. Corresponding chip topology ChipTopology Construct a ChipTopology instance from a CHAD. Use from_chip_design_record() if possible. chad ( CHAD ) – parsed CHAD model corresponding chip topology ChipTopology Couplers that connect to at least one of the given chip components. components ( Iterable [ str ] ) – some chip components, typically qubits and computational resonators couplers that connect to at least one of components set [ str ] Couplers that only connect to the given chip components, and connect at least two of them. Equivalent to returning the edges in the components -induced\\nsubgraph of the coupling topology. components ( Collection [ str ] ) – some chip components, typically qubits and computational resonators couplers that connect to only members of components , and to at least two of them set [ str ] Common coupler for the given chip components (e.g. qubit or computational resonator). component_1 ( str ) – first component component_2 ( str ) – second component the common coupler ValueError – the given components have zero or more than one connecting coupler str Chip components that are connected to the given components by a coupler, but not included in them. components ( Collection [ str ] ) – some chip components, typically qubits and computational resonators components that are connected to components by a coupler, but not included in them set [ str ] Get probelines that are connected to any of the given components. components ( Collection [ str ] ) – set [ str ] Prunes the given dictionary (e.g. a coupler-to-qubits map) to a subset of values. Used to prune e.g. coupler_to_components to a subset of relevant elements. dct ( ComponentMap ) – Dictionary of collections of values. limit_to ( Collection [ str ] ) – Components to limit the output to. The input dictionary, but only with key-value pairs where the value intersects with limit_to . ComponentMap True iff the given component is a qubit. component ( str ) – bool True iff the given component is a coupler. component ( str ) – bool True iff the given component is a probe line. component ( str ) – bool True iff the given component is a computational resonator. component ( str ) – bool Add a custom mapping from a gate locus to a set of components required for the gate operation. The mapping is of the form {<locus>: <components mapped to locus>}, where a locus can be mapped to one or more\\ncomponents. The locus itself can be a frozenset (denoting a symmetric gate) or a tuple (non-symmetric gate). Some examples:\\n- DEFAULT_2QB_MAPPING (added in __init__() ) maps pairs of qubits to their common coupler symmetrically.\\n- Fast flux CZ-gate maps pairs of qubits to their couplers non-symmetrically (first locus qubit can perform flux pulses).\\n- A two-qubit gate implementation that includes playing pulses on neighboring components in addition to the connecting coupler. name ( str ) – The name for the gate & implementation this locus mapping represents (typically in the format \\"<gate name>.<implementation name>\\" ). mapping ( dict [ tuple [ str , ... ] | frozenset [ str ] , tuple [ str , ... ] ] ) – The locus mapping to be added. None Validate that the components given in mapping are found in self and the mapping is correctly formed. mapping ( dict [ str | tuple [ str ] , tuple [ str , ... ] | frozenset [ str ] ] | None ) – None Returns the mapped components for the given locus and the given gate. If the locus or the gate is not found from the locus mappings of self, returns None. locus ( tuple [ str , ... ] | frozenset [ str ] ) – The locus to map. name ( str | None ) – The name for the gate & implementation with which to map the locus (typically in the format \\"<gate name>.<implementation name>\\" ). The components mapped to the given locus or None if locus is not found in the given mapping. str | tuple [ str ] | None Returns the locus that is mapped to the given components. mapped ( str | tuple [ str ] ) – The mapped components. name ( str ) – The name for the gate & implementation with which to map the locus (typically in the format \\"<gate name>.<implementation name>\\" ). The locus mapped to the given components or None if the components are not mapped to any locus. tuple [ str , …] | frozenset [ str ] | None Gives all the loci of a given gate. If no mapping with the given the name nor a default mapping with the given dimensionality is found,\\nreturns an empty list. name ( str ) – The name for the gate & implementation with which to map the locus (typically in the format \\"<gate name>.<implementation name>\\" ). default_mapping_dimension ( int | None ) – If provided, will return the loci of the default mapping of the given\\ndimensionality in case no mapping for name can be found. The loci associated with the given gate. list [ tuple [ str , …] | frozenset [ str ]] Convenience method for getting the name of a computational resonator which is connected to both specified\\nqubit components via tunable couplers. first_qubit ( str ) – The name of the first qubit. second_qubit ( str ) – The name of the second qubit. The order of qubits does not matter, i.e. the first_qubit and second_qubit arguments are interchangeable. The name of the second qubit. The order of qubits does not matter, i.e. the first_qubit and second_qubit arguments are interchangeable. The name of the computational resonator that is connected to both inputted qubits via tunable couplers. The name of the computational resonator that is connected to both inputted qubits via tunable couplers. - ValueError – If no computational resonator was found that is connected to both qubits via tunable couplers. – str Computational resonators connected to all the given qubits via a coupler. qubits ( list [ str ] ) – Qubit names. Names of the computational resonators neighboring all of qubits (can be an empty set). set [ str ] previous exa.common.qcm_data.chip_topology.sort_couplers next file_adapter © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"FileAdapter","url":"/iqm-exa-common/api/exa.common.qcm_data.file_adapter.FileAdapter.html","description":"Bases: BaseAdapter Module: exa.common.qcm_data.file_adapter Methods close Cleans up adapter specific items. send Sends PreparedRequest object. Sends PreparedRequest object. Returns Response object. Cl...","content":"Bases: BaseAdapter Module: exa.common.qcm_data.file_adapter Methods close Cleans up adapter specific items. send Sends PreparedRequest object. Sends PreparedRequest object. Returns Response object. Cleans up adapter specific items. previous file_adapter next immutable_base_model © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"exa_error","url":"/iqm-exa-common/api/exa.common.errors.exa_error.html","description":"Full path: exa.common.errors.exa_error Exceptions EmptyComponentListError (message, *args) Error raised when an empty list is given as components for running an experiment. ExaError (message, *args) B...","content":"Full path: exa.common.errors.exa_error Exceptions EmptyComponentListError (message, *args) Error raised when an empty list is given as components for running an experiment. ExaError (message, *args) Base class for exa errors. InvalidSweepOptionsTypeError (**kwargs) The type of sweep options is invalid. UnknownSettingError (message, *args) This SettingNode does not have a given key. previous errors next exa.common.errors.exa_error.EmptyComponentListError © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"exa.common.errors.exa_error.InvalidSweepOptionsTypeError","url":"/iqm-exa-common/api/exa.common.errors.exa_error.InvalidSweepOptionsTypeError.html","description":"The type of sweep options is invalid. previous exa.common.errors.exa_error.ExaError next exa.common.errors.exa_error.UnknownSettingError © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last upda...","content":"The type of sweep options is invalid. previous exa.common.errors.exa_error.ExaError next exa.common.errors.exa_error.UnknownSettingError © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"sweep","url":"/iqm-exa-common/api/exa.common.sweep.html","description":"Sweep utilities. Full path: exa.common.sweep Subpackages and modules previous QCMDataClient next Changelog © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16....","content":"Sweep utilities. Full path: exa.common.sweep Subpackages and modules previous QCMDataClient next Changelog © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"qcm_data_client","url":"/iqm-exa-common/api/exa.common.qcm_data.qcm_data_client.html","description":"QCM (Quantum Computer Management) Data API client implementation. Full path: exa.common.qcm_data.qcm_data_client Classes QCMDataClient Python client for QCM (Quantum Computer Management) Data API. Inh...","content":"QCM (Quantum Computer Management) Data API client implementation. Full path: exa.common.qcm_data.qcm_data_client Classes QCMDataClient Python client for QCM (Quantum Computer Management) Data API. Inheritance previous ImmutableBaseModel next QCMDataClient © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"chad_model","url":"/iqm-exa-common/api/exa.common.qcm_data.chad_model.html","description":"Pydantic models for CHAD. Full path: exa.common.qcm_data.chad_model Classes CHAD Create a new model by parsing and validating input data from keyword arguments. Component Create a new model by parsing...","content":"Pydantic models for CHAD. Full path: exa.common.qcm_data.chad_model Classes CHAD Create a new model by parsing and validating input data from keyword arguments. Component Create a new model by parsing and validating input data from keyword arguments. Components Create a new model by parsing and validating input data from keyword arguments. ComputationalResonator Create a new model by parsing and validating input data from keyword arguments. Coupler Create a new model by parsing and validating input data from keyword arguments. Launcher Create a new model by parsing and validating input data from keyword arguments. ProbeLine Create a new model by parsing and validating input data from keyword arguments. Qubit Create a new model by parsing and validating input data from keyword arguments. Inheritance previous qcm_data next CHAD © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"exa.common.errors.server_errors.NotFoundError","url":"/iqm-exa-common/api/exa.common.errors.server_errors.NotFoundError.html","description":"Error raised when nothing was found with the given parameters. This should be used when it’s expected that something is found, for example when trying to find with an exact ID. message ( str ) – previ...","content":"Error raised when nothing was found with the given parameters. This should be used when it’s expected that something is found, for example when trying to find with an exact ID. message ( str ) – previous exa.common.errors.server_errors.InternalServerError next exa.common.errors.server_errors.ServiceUnavailableError © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"Qubit","url":"/iqm-exa-common/api/exa.common.qcm_data.chad_model.Qubit.html","description":"Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form...","content":"Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  connections  Methods name ( str ) – connections ( tuple [ str , ... ] ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous ProbeLine next chip_topology © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"logger","url":"/iqm-exa-common/api/exa.common.logger.html","description":"Helper to initialize loggers to the specified logging level. Full path: exa.common.logger Subpackages and modules logger  previous exa.common.helpers.software_version_helper.get_vcs_description next l...","content":"Helper to initialize loggers to the specified logging level. Full path: exa.common.logger Subpackages and modules logger  previous exa.common.helpers.software_version_helper.get_vcs_description next logger © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"exa.common.errors.server_errors.StationControlError","url":"/iqm-exa-common/api/exa.common.errors.server_errors.StationControlError.html","description":"Base class for station control errors used in client-server communication. message ( str ) – previous exa.common.errors.server_errors.ServiceUnavailableError next exa.common.errors.server_errors.Unaut...","content":"Base class for station control errors used in client-server communication. message ( str ) – previous exa.common.errors.server_errors.ServiceUnavailableError next exa.common.errors.server_errors.UnauthorizedError © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"InfoFilter","url":"/iqm-exa-common/api/exa.common.logger.logger.InfoFilter.html","description":"Bases: Filter Helper class to filter log messages above INFO level. Initialize a filter. Initialize with the name of the logger which, together with its\\nchildren, will have its events allowed through ...","content":"Bases: Filter Helper class to filter log messages above INFO level. Initialize a filter. Initialize with the name of the logger which, together with its\\nchildren, will have its events allowed through the filter. If no\\nname is specified, allow every event. Module: exa.common.logger.logger Methods filter Determine if the specified record is to be logged. Determine if the specified record is to be logged. Returns True if the record should be logged, or False otherwise.\\nIf deemed appropriate, the record may be modified in-place. record ( LogRecord ) – bool previous ExtraFormatter next qcm_data © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"exa.common.errors.server_errors.ForbiddenError","url":"/iqm-exa-common/api/exa.common.errors.server_errors.ForbiddenError.html","description":"Error raised when the operation is forbidden for the user. message ( str ) – previous exa.common.errors.server_errors.ConflictError next exa.common.errors.server_errors.InternalServerError © Copyright...","content":"Error raised when the operation is forbidden for the user. message ( str ) – previous exa.common.errors.server_errors.ConflictError next exa.common.errors.server_errors.InternalServerError © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"data","url":"/iqm-exa-common/api/exa.common.data.html","description":"Classes for representing physical quantities and instrument settings. Full path: exa.common.data Subpackages and modules base_model  previous sweep next base_model © Copyright 2019-2025, IQM Finland O...","content":"Classes for representing physical quantities and instrument settings. Full path: exa.common.data Subpackages and modules base_model  previous sweep next base_model © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"software_version_helper","url":"/iqm-exa-common/api/exa.common.helpers.software_version_helper.html","description":"Full path: exa.common.helpers.software_version_helper Functions get_all_software_versions ([reload_module]) Get all available software version information. get_vcs_description (root_directory) Get Ver...","content":"Full path: exa.common.helpers.software_version_helper Functions get_all_software_versions ([reload_module]) Get all available software version information. get_vcs_description (root_directory) Get Version Control System (VCS) description for the caller's current working directory. previous exa.common.helpers.deprecation.format_deprecated next exa.common.helpers.software_version_helper.get_all_software_versions © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"ImmutableBaseModel","url":"/iqm-exa-common/api/exa.common.qcm_data.immutable_base_model.ImmutableBaseModel.html","description":"Bases: BaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form...","content":"Bases: BaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.immutable_base_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Methods Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous immutable_base_model next qcm_data_client © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"common","url":"/iqm-exa-common/api/exa.common.html","description":"Shared errors, helpers, control structures, settings, API models etc. Full path: exa.common Subpackages and modules api API helpers. control Common data structures of abstract instrument control. data...","content":"Shared errors, helpers, control structures, settings, API models etc. Full path: exa.common Subpackages and modules api API helpers. control Common data structures of abstract instrument control. data Classes for representing physical quantities and instrument settings. errors Common error messages. helpers Miscellaneous helper functionality. logger Helper to initialize loggers to the specified logging level. qcm_data  sweep Sweep utilities. previous API Reference next api © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"qcm_data","url":"/iqm-exa-common/api/exa.common.qcm_data.html","description":"Full path: exa.common.qcm_data Subpackages and modules chad_model Pydantic models for CHAD. chip_topology Chip topology class for parsing CHAD and other QPU related data into human-usable form. file_a...","content":"Full path: exa.common.qcm_data Subpackages and modules chad_model Pydantic models for CHAD. chip_topology Chip topology class for parsing CHAD and other QPU related data into human-usable form. file_adapter  immutable_base_model  qcm_data_client QCM (Quantum Computer Management) Data API client implementation. previous InfoFilter next chad_model © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"Launcher","url":"/iqm-exa-common/api/exa.common.qcm_data.chad_model.Launcher.html","description":"Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form...","content":"Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. pin  function  name  connections  Methods name ( str ) – connections ( tuple [ str , ... ] ) – pin ( str ) – function ( str ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous Coupler next ProbeLine © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"base_model","url":"/iqm-exa-common/api/exa.common.data.base_model.html","description":"Full path: exa.common.data.base_model Classes BaseModel Pydantic base model to change the behaviour of pydantic globally. Inheritance previous data next BaseModel © Copyright 2019-2025, IQM Finland Oy...","content":"Full path: exa.common.data.base_model Classes BaseModel Pydantic base model to change the behaviour of pydantic globally. Inheritance previous data next BaseModel © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"exa.common.errors.exa_error.EmptyComponentListError","url":"/iqm-exa-common/api/exa.common.errors.exa_error.EmptyComponentListError.html","description":"Error raised when an empty list is given as components for running an experiment. message ( str ) – previous exa_error next exa.common.errors.exa_error.ExaError © Copyright 2019-2025, IQM Finland Oy, ...","content":"Error raised when an empty list is given as components for running an experiment. message ( str ) – previous exa_error next exa.common.errors.exa_error.ExaError © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"server_errors","url":"/iqm-exa-common/api/exa.common.errors.server_errors.html","description":"Errors used in the client-server communication. Full path: exa.common.errors.server_errors Exceptions BadRequestError (message, *args) Error raised when the request syntax is invalid or the method is ...","content":"Errors used in the client-server communication. Full path: exa.common.errors.server_errors Exceptions BadRequestError (message, *args) Error raised when the request syntax is invalid or the method is unsupported in general. ConflictError (message, *args) This error happens when there is a conflict with the current state of the resource. ForbiddenError (message, *args) Error raised when the operation is forbidden for the user. InternalServerError (message, *args) Error raised when an unexpected error happened on the server side. NotFoundError (message, *args) Error raised when nothing was found with the given parameters. ServiceUnavailableError (message, *args) Error raised when the service is unavailable. StationControlError (message, *args) Base class for station control errors used in client-server communication. UnauthorizedError (message, *args) Error raised when the user is not authorized. ValidationError (message, *args) Error raised when something is unprocessable in general, for example if the input value is not acceptable. previous exa.common.errors.exa_error.UnknownSettingError next exa.common.errors.server_errors.BadRequestError © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"exa.common.qcm_data.chip_topology.sort_components","url":"/iqm-exa-common/api/exa.common.qcm_data.chip_topology.sort_components.html","description":"Sort the given components in a human-readable way. components ( Iterable [ str ] ) – list [ str ] previous chip_topology next exa.common.qcm_data.chip_topology.sort_couplers © Copyright 2019-2025, IQM...","content":"Sort the given components in a human-readable way. components ( Iterable [ str ] ) – list [ str ] previous chip_topology next exa.common.qcm_data.chip_topology.sort_couplers © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"exa.common.helpers.deprecation.format_deprecated","url":"/iqm-exa-common/api/exa.common.helpers.deprecation.format_deprecated.html","description":"old ( str ) – new ( str | None ) – since ( str ) – LiteralString previous deprecation next software_version_helper © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16....","content":"old ( str ) – new ( str | None ) – since ( str ) – LiteralString previous deprecation next software_version_helper © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"control","url":"/iqm-exa-common/api/exa.common.control.html","description":"Common data structures of abstract instrument control. Full path: exa.common.control Subpackages and modules sweep Classes for sweep specification. previous api next sweep © Copyright 2019-2025, IQM F...","content":"Common data structures of abstract instrument control. Full path: exa.common.control Subpackages and modules sweep Classes for sweep specification. previous api next sweep © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"exa.common.helpers.software_version_helper.get_all_software_versions","url":"/iqm-exa-common/api/exa.common.helpers.software_version_helper.get_all_software_versions.html","description":"Get all available software version information. Currently, this function collects all Python package versions and Python interpreter version. reload_module ( bool ) – Whether to reload the pkg_resourc...","content":"Get all available software version information. Currently, this function collects all Python package versions and Python interpreter version. reload_module ( bool ) – Whether to reload the pkg_resources module or not. By default,\\nit is disabled because reloading the module is not thread safe!\\nThis function should be called with reload_module=True when IPython autoreload is in use. dict [ str , str ] Example You have numpy==1.21.0 installed, and in the notebook you have executed the following IPython magic: You install numpy==1.21.1 You call this function with reload_module=False . This will result in some warning printouts and\\nthe function will succeed by returning 1.21.0 for numpy, which is wrong because in reality IPython\\nautoreload has reloaded the newly installed numpy 1.21.1.\\nWith reload_module=True the correct version 1.21.1 is returned and no warnings are printed. information. A package’s version information contains the base version, and the string\\n“(local editable)” in the case the package is a local editable installation. previous software_version_helper next exa.common.helpers.software_version_helper.get_vcs_description © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"exa.common.errors.server_errors.ConflictError","url":"/iqm-exa-common/api/exa.common.errors.server_errors.ConflictError.html","description":"This error happens when there is a conflict with the current state of the resource. For example, when doing duplicate submissions for the same unique data. message ( str ) – previous exa.common.errors...","content":"This error happens when there is a conflict with the current state of the resource. For example, when doing duplicate submissions for the same unique data. message ( str ) – previous exa.common.errors.server_errors.BadRequestError next exa.common.errors.server_errors.ForbiddenError © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"api","url":"/iqm-exa-common/api/exa.common.api.html","description":"API helpers. Full path: exa.common.api Subpackages and modules previous common next control © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16....","content":"API helpers. Full path: exa.common.api Subpackages and modules previous common next control © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"deprecation","url":"/iqm-exa-common/api/exa.common.helpers.deprecation.html","description":"Full path: exa.common.helpers.deprecation Functions format_deprecated (old, new, since)  previous helpers next exa.common.helpers.deprecation.format_deprecated © Copyright 2019-2025, IQM Finland Oy, R...","content":"Full path: exa.common.helpers.deprecation Functions format_deprecated (old, new, since)  previous helpers next exa.common.helpers.deprecation.format_deprecated © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"Component","url":"/iqm-exa-common/api/exa.common.qcm_data.chad_model.Component.html","description":"Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidate...","content":"Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  connections  Methods sort  name ( str ) – connections ( tuple [ str , ... ] ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous CHAD next Components © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"exa.common.errors.server_errors.BadRequestError","url":"/iqm-exa-common/api/exa.common.errors.server_errors.BadRequestError.html","description":"Error raised when the request syntax is invalid or the method is unsupported in general. message ( str ) – previous server_errors next exa.common.errors.server_errors.ConflictError © Copyright 2019-20...","content":"Error raised when the request syntax is invalid or the method is unsupported in general. message ( str ) – previous server_errors next exa.common.errors.server_errors.ConflictError © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"exa.common.helpers.software_version_helper.get_vcs_description","url":"/iqm-exa-common/api/exa.common.helpers.software_version_helper.get_vcs_description.html","description":"Get Version Control System (VCS) description for the caller’s current working directory. The description is used to verify if a directory is installed under VCS and whether changes to the files have\\nb...","content":"Get Version Control System (VCS) description for the caller’s current working directory. The description is used to verify if a directory is installed under VCS and whether changes to the files have\\nbeen made. First, the existence of .git directory will be checked from root_directory .\\nOnly if it exists, a git command is executed in a subprocess with a timeout\\nof 1 seconds as the best effort only. The path to the directory where the command will be executed. For instance when called from\\nexa-experiment, it can be the exa-experiment root directory or any directory under it. If root_directory is not installed under git, None will be returned. Otherwise, the output of git describe --dirty --tags --long is returned. In case of errors in executing the command, the caught subprocess.CalledProcessError will be converted to string and returned. If the command fails or timeouts , an exception will be raised directly from subprocess.check_output. – root_directory ( str ) – str | None previous exa.common.helpers.software_version_helper.get_all_software_versions next logger © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"immutable_base_model","url":"/iqm-exa-common/api/exa.common.qcm_data.immutable_base_model.html","description":"Full path: exa.common.qcm_data.immutable_base_model Classes ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Inheritance previous FileAdapter next Imm...","content":"Full path: exa.common.qcm_data.immutable_base_model Classes ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Inheritance previous FileAdapter next ImmutableBaseModel © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"sweep","url":"/iqm-exa-common/api/exa.common.control.sweep.html","description":"Classes for sweep specification. Full path: exa.common.control.sweep Subpackages and modules previous control next data © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16...","content":"Classes for sweep specification. Full path: exa.common.control.sweep Subpackages and modules previous control next data © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"exa.common.errors.server_errors.ValidationError","url":"/iqm-exa-common/api/exa.common.errors.server_errors.ValidationError.html","description":"Error raised when something is unprocessable in general, for example if the input value is not acceptable. message ( str ) – previous exa.common.errors.server_errors.UnauthorizedError next helpers © C...","content":"Error raised when something is unprocessable in general, for example if the input value is not acceptable. message ( str ) – previous exa.common.errors.server_errors.UnauthorizedError next helpers © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"exa.common.errors.exa_error.UnknownSettingError","url":"/iqm-exa-common/api/exa.common.errors.exa_error.UnknownSettingError.html","description":"This SettingNode does not have a given key. message ( str ) – previous exa.common.errors.exa_error.InvalidSweepOptionsTypeError next server_errors © Copyright 2019-2025, IQM Finland Oy, Release 26.13....","content":"This SettingNode does not have a given key. message ( str ) – previous exa.common.errors.exa_error.InvalidSweepOptionsTypeError next server_errors © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"BaseModel","url":"/iqm-exa-common/api/exa.common.data.base_model.BaseModel.html","description":"Bases: BaseModel Pydantic base model to change the behaviour of pydantic globally.\\nNote that setting model_config in child classes will merge the configs rather than override this one. https://docs.py...","content":"Bases: BaseModel Pydantic base model to change the behaviour of pydantic globally.\\nNote that setting model_config in child classes will merge the configs rather than override this one. https://docs.pydantic.dev/latest/concepts/config/#change-behaviour-globally Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.data.base_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Methods copy Returns a copy of the model. model_copy Returns a copy of the model. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Returns a copy of the model. Overrides the Pydantic default ‘model_copy’ to set ‘deep=True’ by default. update ( dict [ str , Any ] | None ) – deep ( bool ) – Self Returns a copy of the model. Self previous base_model next errors © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"ProbeLine","url":"/iqm-exa-common/api/exa.common.qcm_data.chad_model.ProbeLine.html","description":"Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form...","content":"Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  connections  Methods name ( str ) – connections ( tuple [ str , ... ] ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous Launcher next Qubit © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"file_adapter","url":"/iqm-exa-common/api/exa.common.qcm_data.file_adapter.html","description":"Full path: exa.common.qcm_data.file_adapter Classes FileAdapter  Inheritance previous ChipTopology next FileAdapter © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16....","content":"Full path: exa.common.qcm_data.file_adapter Classes FileAdapter  Inheritance previous ChipTopology next FileAdapter © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"QCMDataClient","url":"/iqm-exa-common/api/exa.common.qcm_data.qcm_data_client.QCMDataClient.html","description":"Bases: object Python client for QCM (Quantum Computer Management) Data API. root_url ( str ) – URL pointing to QCM Data service.\\nThis URL can point to a local file storage as well.\\nIn that case, the U...","content":"Bases: object Python client for QCM (Quantum Computer Management) Data API. root_url ( str ) – URL pointing to QCM Data service.\\nThis URL can point to a local file storage as well.\\nIn that case, the URL should point to a directory which\\nhas a directory structure identical to QCM Data service (for example /chip-data-records/),\\nand files containing data in identical format returned by QCM Data service.\\nFor example, CHAD files should be named {chip_label}.json, like M156_W531_A09_L09.json, and contain\\na list instead of a single object. fallback_root_url ( str ) – Same as root_url , used if a query via root_url returns nothing. Module: exa.common.qcm_data.qcm_data_client Attributes root_url Returns the remote QCM Data service URL. Methods get_chip_design_record Get a raw chip design record matching the given chip label. Returns the remote QCM Data service URL. Get a raw chip design record matching the given chip label. chip_label ( str ) – Chip label. Data record matching the given chip label. dict previous qcm_data_client next sweep © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"exa.common.errors.server_errors.InternalServerError","url":"/iqm-exa-common/api/exa.common.errors.server_errors.InternalServerError.html","description":"Error raised when an unexpected error happened on the server side. This error should never be raised when something expected happens,\\nand whenever the client encounters this, it should be considered a...","content":"Error raised when an unexpected error happened on the server side. This error should never be raised when something expected happens,\\nand whenever the client encounters this, it should be considered as a server bug. message ( str ) – previous exa.common.errors.server_errors.ForbiddenError next exa.common.errors.server_errors.NotFoundError © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"errors","url":"/iqm-exa-common/api/exa.common.errors.html","description":"Common error messages. Full path: exa.common.errors Subpackages and modules exa_error  server_errors Errors used in the client-server communication. previous BaseModel next exa_error © Copyright 2019-...","content":"Common error messages. Full path: exa.common.errors Subpackages and modules exa_error  server_errors Errors used in the client-server communication. previous BaseModel next exa_error © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"ExtraFormatter","url":"/iqm-exa-common/api/exa.common.logger.logger.ExtraFormatter.html","description":"Bases: Formatter Helper formatter class to pass in arbitrary extra information to log messages. Initialize the formatter with specified format strings. Initialize the formatter either with the specifi...","content":"Bases: Formatter Helper formatter class to pass in arbitrary extra information to log messages. Initialize the formatter with specified format strings. Initialize the formatter either with the specified format string, or a\\ndefault as described above. Allow for specialized date formatting with\\nthe optional datefmt argument. If datefmt is omitted, you get an\\nISO8601-like (or RFC 3339-like) format. Use a style parameter of ‘%’, ‘{’ or ‘$’ to specify that you want to\\nuse one of %-formatting, str.format() ( {} ) formatting or string.Template formatting in your format string. Changed in version 3.2: Added the style parameter. Module: exa.common.logger.logger Attributes Methods format Format the specified record as text. extra_info_getter ( Callable [ [ ] , str ] | None ) – Format the specified record as text. The record’s attribute dictionary is used as the operand to a\\nstring formatting operation which yields the returned string.\\nBefore formatting the dictionary, a couple of preparatory steps\\nare carried out. The message attribute of the record is computed\\nusing LogRecord.getMessage(). If the formatting string uses the\\ntime (as determined by a call to usesTime(), formatTime() is\\ncalled to format the event time. If there is exception information,\\nit is formatted using formatException() and appended to the message. previous exa.common.logger.logger.init_loggers next InfoFilter © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"exa.common.qcm_data.chip_topology.sort_couplers","url":"/iqm-exa-common/api/exa.common.qcm_data.chip_topology.sort_couplers.html","description":"Sort the given couplers in a human-readable way. couplers ( Iterable [ str ] ) – list [ str ] previous exa.common.qcm_data.chip_topology.sort_components next ChipTopology © Copyright 2019-2025, IQM Fi...","content":"Sort the given couplers in a human-readable way. couplers ( Iterable [ str ] ) – list [ str ] previous exa.common.qcm_data.chip_topology.sort_components next ChipTopology © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"ComputationalResonator","url":"/iqm-exa-common/api/exa.common.qcm_data.chad_model.ComputationalResonator.html","description":"Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form...","content":"Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  connections  Methods name ( str ) – connections ( tuple [ str , ... ] ) – Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous Components next Coupler © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"exa.common.errors.server_errors.ServiceUnavailableError","url":"/iqm-exa-common/api/exa.common.errors.server_errors.ServiceUnavailableError.html","description":"Error raised when the service is unavailable. message ( str ) – previous exa.common.errors.server_errors.NotFoundError next exa.common.errors.server_errors.StationControlError © Copyright 2019-2025, I...","content":"Error raised when the service is unavailable. message ( str ) – previous exa.common.errors.server_errors.NotFoundError next exa.common.errors.server_errors.StationControlError © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"exa.common.errors.exa_error.ExaError","url":"/iqm-exa-common/api/exa.common.errors.exa_error.ExaError.html","description":"Base class for exa errors. message ( str ) – Error message. previous exa.common.errors.exa_error.EmptyComponentListError next exa.common.errors.exa_error.InvalidSweepOptionsTypeError © Copyright 2019-...","content":"Base class for exa errors. message ( str ) – Error message. previous exa.common.errors.exa_error.EmptyComponentListError next exa.common.errors.exa_error.InvalidSweepOptionsTypeError © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-exa-common","title":"logger","url":"/iqm-exa-common/api/exa.common.logger.logger.html","description":"Full path: exa.common.logger.logger Functions init_loggers ([loggers, default_level, ...]) Set the log level of given logger names. Classes ExtraFormatter Helper formatter class to pass in arbitrary e...","content":"Full path: exa.common.logger.logger Functions init_loggers ([loggers, default_level, ...]) Set the log level of given logger names. Classes ExtraFormatter Helper formatter class to pass in arbitrary extra information to log messages. InfoFilter Helper class to filter log messages above INFO level. Inheritance previous logger next exa.common.logger.logger.init_loggers © Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"Import required packages","url":"/iqm-pulla/Example - Randomized Benchmarking.html","description":"Contact: pedro.romero@meetiqm.com & manish.thapa@meetiqm.com NB: Familiarity with quantum channels, gates and Clifford gates is assumed. The idea behind Clifford Randomized Benchmarking (CRB) is that ...","content":"Contact: pedro.romero@meetiqm.com & manish.thapa@meetiqm.com NB: Familiarity with quantum channels, gates and Clifford gates is assumed. The idea behind Clifford Randomized Benchmarking (CRB) is that under certain (simplified) types of noise, the average survival probability of the initial state of a quantum system under uniformly random sequences of multi-qubit Clifford gates with sequence inversion will decay exponentially in the length of the sequences. From such decay, one can in turn infer the average fidelity of the corresponding Clifford group. CRB sequences are of the form $$\\\\mathcal{S} m:=\\\\mathcal{C} {m+1}\\\\circ\\\\mathcal{C}_m\\\\circ\\\\cdots\\\\circ\\\\mathcal{C}_1,$$ for any $m\\\\geq1$, where $\\\\mathcal{C} i(\\\\cdot):=C_i(\\\\cdot)C_i^\\\\dagger$ is a unitary channel with $C_i$ being a Clifford gate, and where by definition $$\\\\mathcal{C} {m+1}=(\\\\mathcal{C}_m\\\\circ\\\\cdots\\\\circ\\\\mathcal{C} 1)^{-1}.$$ It is important to notice that $C {m+1}$ is itself a Clifford gate, i.e., one would not implement the sequence $\\\\mathcal{C}_m\\\\circ\\\\cdots\\\\circ\\\\mathcal{C} 1$ in practice, but rather compile the corresponding unitary operator $C_mC {m-1}\\\\cdots{C}_1$ into a single Clifford gate. The main assumption is that the real noisy gates can be approximately modeled independently by a quantum channel $\\\\mathcal{E}$ (completely positive, trace non-increasing map) as $\\\\tilde{\\\\mathcal{C}}_i\\\\approx\\\\mathcal{E}\\\\circ\\\\mathcal{C}_i$, or (ultimately equivalently) as $\\\\tilde{\\\\mathcal{C}}_i\\\\approx\\\\mathcal{C}_i\\\\circ\\\\mathcal{E}$. This implies that the noise is modeled as Markovian , time-stationary and gate-independent — while here we will take these for granted, a lot about RB in more general regimes is known, but it is in general more complicated, and often this simplistic scenario goes a long way as a useful first approximation. NB: CRB is not generally intended to work for $n>2$, both because of the scaling of the size of the $n$-qubit Clifford group in $n$, and because such gates have to eventually be transpiled to a native basis of 1Q and 2Q gates! While a high level of optimization in transpile is usually desirable, one must be careful for the optimization not to mess with the Clifford gates, i.e., we want the transformations between barriers in the circuit to implement a Clifford regardless of how it is decomposed. The specific decomposition still matters, however, because the (average) number of 2Q and 1Q gates (i.e., cz and r , respectively) will dictate how noisily we can implement the Cliffords on average, i.e., the average gate fidelity we will ultimately obtain. We will not do this check here, but it is now known that a good decomposition of Clifford gates in our basis will have on average 8.25 cz gates and 1.5 r gates (e.g., see arXiv:1402.4848 ). We can count the number of native 1Q and 2Q gates by using the circuit attribute count_ops() One important reason why CRB works –and why specifically it uses Clifford gates–, is that the uniformly distributed multi-qubit Clifford group forms a unitary 2-design. This essentially means that any quantity that takes two copies of the pair $C, C^\\\\dagger$ and then averaged over all possible $C$s, will be exactly the same as if $C$ had been any uniformly distributed (so-called Haar) random unitary. This matters because there are plenty of results allowing to easily compute such quantities (i.e., second moments) over the whole uniformly distributed unitary group — in fact, such second moment simply takes the form of a depolarizing channel (RB precisely extracts the average gate fidelity through the corresponding polarization parameter). The CRB sequences are quantities of this type because of the final inverse at the end (i.e. all sequences will have 2 copies of pairs $C_i,C_i^\\\\dagger$ for all $i=1,2,\\\\ldots,m$). This is the reason why the theory behind RB, under the noise assumptions above, can ensure that the decay in average fidelity, i.e., quantities like $$f_0=\\\\langle0|\\\\mathcal{S}_m(|0\\\\rangle!\\\\langle0|)|0\\\\rangle$$ take the form of a function $$f_0=Ap^m+B$$ for $0\\\\leq{A,B,p}\\\\leq1$. Furthermore, it ensures that $p$ will encode the average gate fidelity of the noisy Clifford gates, whilst $A,B$ will encode (and isolate) errors due to state preparation and measurement. This is what is meant by RB being SPAM-robust. In the modeling with assummptions of noisy gates above, this means $p\\\\sim\\\\int{d}\\\\psi\\\\langle\\\\psi|\\\\mathcal{E}(|\\\\psi\\\\rangle!\\\\langle\\\\psi|)|\\\\psi\\\\rangle$ for all possible uniformly distributed pure states $|\\\\psi\\\\rangle$, and $A\\\\sim\\\\langle0|\\\\mathcal{E} \\\\text{spam}(|0\\\\rangle!\\\\langle0|)|0\\\\rangle$, $B\\\\sim\\\\langle0|\\\\mathcal{E} \\\\text{spam}(\\\\mathbb{I}/2^n)|0\\\\rangle$ for a composition of the state preparation and measurement noise. We may now fix a number of circuit samples and sequence lengths. Despite the Clifford group having a (super) exponential amount of terms (e.g., 24 for 1Q, then 11,520 for 2Q), approximating the average over the whole group with finite samples quickly converges to the Haar average. On the other hand, the sequence lengths can be chosen as exponentially spaced and aiming at long sequences, if possible, serves to better determine the offset constant (often named the nuisance parameter, for obvious reasons) in the decay. Depending on how many circuits we want to execute, we could either generate all circuit samples for all circuit lengths and send all for execution once, or we may, for example, generate a given amount of circuits, send them to execution while meanwhile continuing to generate circuits and sending them. In either case, one may retrieve the results later. Here we will generate all circuits for all sequence lengths, and send them to execute as a single batch on the backend. It is generally a good idea to store (at least at this stage) both the abstract and the transpiled circuits, so that we can inspect them later on. We can inspect the circuits just as a sanity check Task : Count the average number of 1Q and 2Q gates in the circuits for each sequence length. Task : Since the Clifford group is a 2-design, its so-called frame potential (see e.g., arXiv:1610.04903 ) has to satisfy $\\\\displaystyle{\\\\sum_{k,,k^\\\\prime=1}^K}\\\\left|\\\\mathrm{tr}\\\\left(C_{k^\\\\prime}^{\\\\dagger}C_k\\\\right)\\\\right|^4/K^2 = 2$. Verify this condition for the 1Q Clifford group. warning for the 2Q Clifford group: there are in total $n=11,520^2 = 132,710,400$ values in the sum! It suffices to compute the values in a triangular part of the matrix $U_{k^\\\\prime}^{\\\\dagger}U_k$  — so you can definitely verify this property, however there will still be $n(n-1)/2$ such terms for your computer to sum up! We can now send the transpiled circuits to be run on the hardware. NB: It is generally preferable to use backend.run instead of execute command, since the latter performs a transpilation pass “under the hood”. We can now inspect the results for a given sequence length (we will use the one defined above). The counts at the ground state relate to the survival probability (or state fidelity) of such state under our random Clifford circuits. Task : Compare the histograms between the outcomes for the narrowest and the deepest circuits NB: You can wrap plot_histogram() with display(*) to show both results in one cell By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"IQM Pulla","url":"/iqm-pulla/readme.html","description":"Pulla (pulse-level access) is a client-side software which allows the user to control the generation and\\nexecution of pulse schedules on a quantum computer. Within the existing IQM QCCSW stack, PulLA ...","content":"Pulla (pulse-level access) is a client-side software which allows the user to control the generation and\\nexecution of pulse schedules on a quantum computer. Within the existing IQM QCCSW stack, PulLA is somewhere between\\ncircuit-level execution and EXA-experiment. An interactive user guide is available as a Jupyter notebook in the docs folder. Create a virtual environment and install dependencies: The [qiskit] option is to enable Qiskit-related features and utilities, like converting Qiskit circuits to Pulla circuits, constructing a compatible compiler instance, or constructing a PullaBackend for running Qiskit jobs. The [qir] option is to enable QIR support, e.g. the qir_to_pulla function. The [notebook] option is to be able to run the example notebooks, using\\nand run it in Jupyter Notebook: Install development and testing dependencies: e2e testing is execution of all user guides (Jupyter notebooks). User guides cover the majority of user-level features,\\nso we achieve two things: end-to-end-test Pulla as a client library, and make sure the user guides are correct.\\n(Server-side use of Pulla is e2e-tested as part of CoCoS.) You have to provide CoCoS and Station Control URLs as environment variables: Notebooks are executed using jupyter execute command. It does not print any output if there are no errors. If you want\\nto run a particular notebook and see the output cells printed in the terminal, you can use nbconvert with jq ( https://jqlang.github.io/jq/download/ ) like so: Run unit tests, build docs, build package: Copyright 2025 IQM Licensed under the Apache License, Version 2.0 (the “License”);\\nyou may not use this file except in compliance with the License.\\nYou may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software\\ndistributed under the License is distributed on an “AS IS” BASIS,\\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\nSee the License for the specific language governing permissions and\\nlimitations under the License. previous IQM Pulla next Migration guide By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"IQM Pulla","url":"/iqm-pulla/index.html","description":"7.11 2025-04-16 Client-side library for Pulse-level access to IQM quantum computers. Index Module Index Search Page next IQM Pulla By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Releas...","content":"7.11 2025-04-16 Client-side library for Pulse-level access to IQM quantum computers. Index Module Index Search Page next IQM Pulla By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"Configuration and Usage","url":"/iqm-pulla/Configuration and Usage.html","description":"This notebook describes the basic concepts and configuration of Pulla. Now let’s create a Pulla object. A Pulla object is conceptually an IQM quantum computer client for fetching calibration data and ...","content":"This notebook describes the basic concepts and configuration of Pulla. Now let’s create a Pulla object. A Pulla object is conceptually an IQM quantum computer client for fetching calibration data and constructing a circuit-to-pulse compiler. . It consists of: methods for fetching calibration sets from the server methods for fetching metadata about the QC from the server method for executing pulse-level instruction schedules (e.g. ones created by the compiler) A Compiler object defines a particular circuit-to-pulse compilation logic . It consists of: single calibration set schedule builder based on the calibration set circuit compilation options information about the QC (chip topology, channel properties, etc.) compilation stages set of available circuit-level quantum operations (“native operations”) (including user-defined operations) set of implementations for each native operation (including user-defined implementations) methods for manipulating the calibration, operations, and implementations Pulla can construct a standard compiler equivalent to the one used by the server side (CoCoS). You can also construct a Compiler manually. To create an instance of Pulla, you need to provide the URL of Station Control. Upon successful initialization, some configuration data is printed (the verbosity of such messages will be controlled by a debug level value). You can access various things like channel properties of the connected station, chip topology, or the current calibration. The initial calibration is the latest calibration of the connected station. Call get_standard_compiler() method to get an instance of Compiler . It will be pre-populated with the latest default calibration set and standard compilation stages. This standard compiler is the same one that CoCoS uses on the server side when processing circuits. get_standard_compiler() fetches the latest calibration set from the server. This network request takes a few moments. You may want to create many Compiler instances without such delay. It may also be possible that, due to human error, the latest calibration set stored on the server is invalid (or incompatible with your version of Pulla or IQM Pulse). In that case get_standard_compiler() will fail. To avoid this, you can pass the calibration set manually, and Pulla will construct the compiler with it instead of getting one from the server. If you want to reuse the calibration of an existing compiler, call Compiler.get_calibration() , e.g.: You can also get a specific calibration set from the server if you know its UUID by calling Pulla.fetch_calibration_set_by_id() , e.g.: The compiler initializes with the following default configuration options: circuit_boundary_mode='all' measurement_mode='all' heralding_mode='none' dd_mode='none' You can change them by changing the corresponding attributes of compiler.options . For the constant implementation of the measure operation, the readout type is controlled by the acquisition_type parameter. By default, it’s set to \\"threshold\\" . Let’s change it to \\"complex\\" . The full key in the calibration set dictionary is gates.measure.constant.QUBIT.acquisition_type , where QUBIT is the physical qubit name. Note that we call get_calibration() to get a copy of the compiler’s current calibration set, make changes to the copy, then replace the compiler’s set with the copy. The compiler always contains a single calibration set only. previous Quick Start next Compilation Stages By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"Examples","url":"/iqm-pulla/examples.html","description":"previous Custom Gates and Gate Implementations next Example: Measuring T1 By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16....","content":"previous Custom Gates and Gate Implementations next Example: Measuring T1 By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"References","url":"/iqm-pulla/references.html","description":"Nic Ezzell, Bibek Pokharel, Lina Tewala, Gregory Quiroz, and Daniel A. Lidar. Dynamical decoupling for superconducting qubits: a performance survey. Phys. Rev. Appl. , 20:064027, Dec 2023. arXiv:2207....","content":"Nic Ezzell, Bibek Pokharel, Lina Tewala, Gregory Quiroz, and Daniel A. Lidar. Dynamical decoupling for superconducting qubits: a performance survey. Phys. Rev. Appl. , 20:064027, Dec 2023. arXiv:2207.03670 , doi:10.1103/PhysRevApplied.20.064027 . previous License By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"Custom Gates and Gate Implementations","url":"/iqm-pulla/Custom Gates and Implementations.html","description":"This notebook demonstrates how to work with user-defined quantum operations and gate implementations that go beyond the standard gate set. Each quantum operation is associated with one or more GateImp...","content":"This notebook demonstrates how to work with user-defined quantum operations and gate implementations that go beyond the standard gate set. Each quantum operation is associated with one or more GateImplementation s which translate the high-level concepts to lower-level instructions accepted by the IQM server. This example shows how the user can Selecting a non-default implementation for a gate Add a custom implementation for an existing gate Add a custom gate and a custom implementation for it by using existing gates as building blocks (composite gates) Defining new pulse waveforms for implementations Please refer to the User Guide.ipynb for basic usage, termninology, and environment setup. Circuits are usually defined without specifying implementations for any of the gates.\\nThe implementations available in a given calibration set are listed in the corresponding dynamic quantum architecture, through Cocos. Let’s see a list of available implementations, with their parameters: You can specify a default implementation for each native operation type in the circuit, and then override it for specific loci.\\nLet’s change all cz gates to use the slepian implementation, and make an execption for the qubit pair (QB1, QB2) . Note that the default implementations are merely suggestions to the compiler. If the compiler does not have calibration data for a default implementation, it will ignore it and use what it can. If you executed the cell below, you would get an error if the requested implementation 'drag_gaussian' does not have calibration data. You can also force the compiler to use a specific implementation for each circuit instruction separately in the IQM Pulse native format, which describes a circuit as a list of CircuitOperation instances. IQM Pulse allows the user to define composite gates: gates consisting of other registered gates.\\nComposite gates are particularly useful because they allow reusing the calibrated of data of the other gates.\\nFurthermore, it is possible to use different calibration data for the registered gates inside a composite gate than outside it. Let’s define a prx implementation that acts like a normal prx , except it implements x with 2 pulses with a 100 ns wait between them.\\nThe __call__ method produces a TimeBox using IQM Pulse’s ScheduleBuilder.\\nIt’s worth mentioning that the composite gate is not restricted to using only registered gates; it could equally well return a TimeBox with lower level instructions. Now we register a new gate custom_x , which StretchedX implements. We want to make it compatible with the circuit-level prx , so we declare that it has the same parameters.\\nThen we change the fist prx in the IQM Pulse circuit to use our new implementation. Inspecting the schedule, we can see that the X gate in the circuit is indeed split into two pulses with a wait in between: Finally, let’s change the pulse waveforms of an existing gate. The tricky part of this is that we need to provide the calibration data by hand.\\nIQM Pulse provides several “gate with custom waveforms” base classes so that users need only write the waveforms. Let’s define a new implementation of PRX using a raised cosine pulse: The class attributes of the waveforms define the calibration data they require. The PRX_CustomWaveforms class adds some more. We can add the new prx implementation to the compiler, and check what calibration data it needs: Let us then make one of the prx gates in the circuit use our new implementation: Compiling this circuit right now would fail with an error: (The locus (‘QB1’,) may differ in your output due to the stochastic nature of routing.) The point is that the compiler does not have necessary calibration data for this new implementation. One way to fix this is to amend the current calibration. The numbers here are arbitrary, in reality you would need to calibrate the gate parameters somehow. Data with gates.prx.raised_cosine.* is now visible in compiler.get_calibration() . Note that we added the same calibration data to all qubits. In practice, this rarely makes sense, because each qubit\\nis usually calibrated differently. Now the compilation succeeds and we see that raised_cosine was used once. Using the schedule visualization you could also verify that the pulse shape is indeed different on the first prx instance. previous Compilation Stages next Examples By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"Example: Dynamical decoupling","url":"/iqm-pulla/Example - Simple Dynamical Decoupling.html","description":"There is a standard compilation stage for automatically applying dynamical decoupling (DD) sequences to an instruction schedule,\\ncontrolled by the dd_mode compiler option. By default the DD stage is d...","content":"There is a standard compilation stage for automatically applying dynamical decoupling (DD) sequences to an instruction schedule,\\ncontrolled by the dd_mode compiler option. By default the DD stage is disabled. The iqm.cpc.compiler.dd module contains various utility functions the DD stage uses, e.g. for locating specific instructions in a schedule, constructing DD sequences, and replacing select instructions with them. For example, we can find locations of Wait instructions on qubit drive channels with a certain minimum duration, and replace them with an arbitrary sequence of Wait and IQPulse instructions that dynamically decouples the qubit, given that the total duration of the sequence is the same as the duration of the original Wait . Let’s create and transpile a quantum circuit that prepares a superposition on one qubit, and then executes a long sequence of gates on other qubits while the first qubit is idling and experiencing decoherence. Finally we reverse the superposition and measure the qubits. Now let us create a pair of Pulla compilers, one with DD and one without. Compiling the circuit using the non-DD compiler produces a schedule with a long wait on QB1__drive.awg. We then execute this schedule and compute the probability of finding QB1 in the |0> state. Ideally this should be one, but due to the decoherence experienced by the superposition state it will be less. Compiling the circuit using the DD compiler instead produces a schedule where the long wait on QB1__drive.awg is replaced by a DD sequence. We execute the DD schedule and again compute the probability of finding QB1 in the |0> state, and will likely see that the probability has gone up, due to the DD sequence partially decoupling the idling QB1 from various decoherence sources and better preserving the superposition state. We can see that the long wait on QB1__drive.awg was indeed replaced by a DD sequence. previous Example: Measuring T1 next Executing QIR programs By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"Compilation Stages","url":"/iqm-pulla/Compilation Stages.html","description":"The generic lifecycle of a Pulla job is a one-way multi-step transformation. The states are as follow: Quantum Circuit in a specific format (e.g. Qiskit, Cirq) Equivalent Quantum Circuit in an IQM Pul...","content":"The generic lifecycle of a Pulla job is a one-way multi-step transformation. The states are as follow: Quantum Circuit in a specific format (e.g. Qiskit, Cirq) Equivalent Quantum Circuit in an IQM Pulse format (list of CircuitOperations) IQM Pulse nested Timebox representation IQM Pulse Schedule representation Measurement results You don’t have to start with a circuit, you can define quantum operations directly (roughly starting from state 2), or define pulse shapes directly (roughly starting from state 3 or 4). The compilation which produces states 3 and 4 is itself multi-step: it consists of multiple stages, and each stage of one or more passes. Let’s go over the generic use case, starting from creating a Qiskit circuit to work on: Pulla has utility functions which accept circuits in different formats (Qiskit, Cirq, IQM JSON) and convert them into Pulla/IQM Pulse format, which is a list of CircuitOperation objects. Let’s do that. Note that none of the operations have an implementation specified ( implementation=None ). The Qiskit conversion utility also gives us a standard compiler with the same calibration set as the one used by backend , in this case the current default one. In order to understand how the compilation stages work, let’s remove the standard stages from the compiler: You can check the readiness of the compiler by calling compiler.ready() . Right now it would return False due to empty stages list. The compiler flow consists of one or more stages, and each stage consists of one or more passes. When the compiler is initialized created by Pulla, it is pre-populated with standard stages. You can define your own stages, with your own passes, grouping them in some meaningful way. Each pass is a function which accepts two arguments: data and context. Data is an iterable of objects of an applicable data type, and context is a dictionary of any additional information. Each pass can transform the data and modify the context, and must return both data and context. This convention allows the compiler to pipe arbitrary amount of passes. A stage is just an ordered collection of passes. The compiler has methods run_stage() and run_pass() allowing you to run particular stages or passes. The compile() method is just calling run_stage() in correct order and passes its initial context to the first pass of the first stage. Let’s write a simple compilation stage to illustrate the concept: Now let’s write two simple passes for that stage. For the first: perhaps we want to add a leading barrier to each circuit. add_leading_barrier below determines the locations of qubits used in the circuit and adds a barrier on those qubits as the first instruction. Note that the function takes data and context and returns data and context. It happens to neither use nor modify the context, but it should still provide it down to the next passes. Ok, let’s define another pass: this one would increase the phase of each prx operation by 0.25 . This may or may\\nnot make practical sense, but bear with us for the purposes of illustration: Now let’s add those two passes to our stage, then replace the empty stages property of the compiler with a list consisting of our single stage, and then call show_stages() : The boolean flag full of show_stages() is optional; when True , the doc strings of each pass are printed on the screen. Now that the compiler is ready and we can run compile . The compiler always operates on batches of circuits, so you need to provide an iterable; in our case, it’s a list with a single circuit. Note that it did not really compile the circuits into pulse schedules, because the only passes we’ve defined only modify the circuits, but don’t perform the conversion to pulse schedules. The compilation to pulse schedules usually consists of converting circuits to TimeBox es, then resolving TimeBox es into a single TimeBox , then resolving it into a Schedule , and finally converting a Schedule into a final Schedule ready to be submitted to the server. There might be cases when your compilation stages need additional data. You can provide such data as a custom context dictionary. Get the initial compiler context and modify it, then pass it when calling compile . As mentioned earlier, Pulla comes with a pre-defined “standard” set of stages which you can use and, if needed, modify. These standard stages are used by CoCoS if you were to submit a circuit to CoCoS (without using Pulla). Thus, if you use the same version of the Pulla library that the remote CoCoS uses, you will be able to produce and inspect the same pulse schedules that CoCoS would (assuming you use the same calibration set). Let’s replace our current single stage with standard stages, and view them: There are 7 standard stages: circuit-level: takes care of validating the circuit, renaming some deprecated names, gathering\\ninformation for the next stages circuit resolution: converts circuits to TimeBox es timebox-level: optimizes “measure” gates by multiplexing them if possible timebox resolution: converts TimeBox es to Schedule schedule-level: applies dynamical decoupling schedule-level: potentially applies some corrections, then cleans up the schedules schedule resolution: converts Schedule to the final Playlist ready to be executed Variable data now contains the Playlist in its final form, and context contains a dictionary of various things\\nwhich were either necessary in some of the passes, or will be necessary for the final execution. It also contains a\\ncopy of schedules from before the final playlist resolution. Some of those pieces of data will be needed to build\\nStation  Control settings (more on that later). Instead of calling compile() , which runs all the stages, you can run each stage, or even each separate pass, by yourself. In that case you will have to take care of two things: Provide initial context to the first pass of the first stage. Save data and context returned by each pass (or stage) in order to provide it to the next pass (or stage). To help you with 1, the compiler has a method compiler_context() which returns a dictionary of initial context. (Note: to run a pass of any particular stage: compiler.stages[0].passes[0](data, context) ) Let’s create another circuit and compile it manually. We’ll use this example to understand each standard stage: The first stage is circuit-level passes: When defining a circuit in IQM JSON or IQM Pulse format directly, you can specify an implementation for each gate (selecting from implementations provided by the calibration set). If no implementation is specified, the standard circuit-level stage will select the default implementation for each gate automatically. Currently, the choice of the default implementation is global: e.g. prx may have drag_gaussian as the default. In the future, the calibration may yield different implementations for different loci, striving to provide the best quality. Now we can convert the circuit to TimeBox es. TimeBox is a concept of IQM Pulse: a container for one or more instruction schedule fragments, to be scheduled according to a given scheduling strategy. timeboxes is a list of TimeBox objects, and you can edit them manually. A TimeBox can contain multiple children TimeBox es, each containing either more TimeBox es or a Schedule . A TimeBox containing a Schedule rather than children is referred to as “atomic”. In our example here the circuit was converted into one TimeBox containing 11 children atomic TimeBox es, which correspond to 11 circuit operations (7 gates + 1 barrier gate + 3 measurement gates). An atomic TimeBox holds its Schedule in an atom property: Next is a timebox-level stage, which only has one pass: multiplexing measurements. The measure_all() we called when\\ncreating the circuit adds a single TimeBox with the gate implementation Measure_Constant for each qubit in the\\ncircuit.\\nWith the measurement_mode='all' option, the first stage has also added a measurement TimeBox for the unused qubits. Multiplexing means executing all of these measurements at once, instead of one after the other.\\nThe multiplexing pass does this optimization for us: If you construct a circuit in Qiskit, and want to ensure multiplexing of measurement instructions, you have to “wrap” a group of measurement instructions with barrier s. This would prevent the Qiskit transpiler from putting any other instructions, acting on the same qubits, in between measurements, thus allowing the compiler to multiplex. Next we convert TimeBox es into a single Schedule . This is a recursive process which resolves all nested TimeBox es into atomic TimeBox es, and finally assembles a single Schedule out each of batches of TimeBox es. At this stage, all relative timings between pulses are resolved and fixed. Dynamical decoupling pulse sequences get inserted to replace Wait instructions. The process is controlled by a user-submitted dynamical decoupling strategy. By default, this stage is disabled. Please see other notebooks for examples of how to enable and apply dynamical decoupling. Next is a schedule-level stage. Its first pass applies calibrated phase corrections if MOVE gates are used (only applicable to QCs with computational resonator, i.e. IQM Star Architecture). The second pass removes non-functional instructions from the schedules. Finally, the last stage builds a final schedule from a number of instruction schedules. A playlist is just a compressed Schedule with no duplicate information, ready to be submitted for execution. In order to submit this final schedule for execution, we have to do one more thing: build the Station Control settings. The settings control the behaviour of instruments. At this point everything is ready to be submitted for execution to the server. Namely, these three objects will be used to construct a request to Station Control Service: playlist : sequence of instruction schedules corresponding to the batch of circuits to be executed settings : Station Control settings node context['readout_mappings'] : a mapping from measurement keys to the names of readout controller acquisition labels that will hold the measurement results Now we can convert these raw results into a Qiskit Result object: We can also submit the same circuit to CoCoS for execution. CoCoS is essentially a server-side Pulla with fixed standard stages. Since we started with a normal Qiskit backend and a circuit, execution is as simple as: previous Configuration and Usage next Custom Gates and Gate Implementations By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"Common errors","url":"/iqm-pulla/common_errors.html","description":"This document describes some common errors which you may encounter when using Pulla, and ways to fix them. If you have modified any timing aspect of the schedule, you may encounter an error like this:...","content":"This document describes some common errors which you may encounter when using Pulla, and ways to fix them. If you have modified any timing aspect of the schedule, you may encounter an error like this: The granularity is an instrument limitation. Specifically, the part (e.g. HDAWG) which plays the drive pulses.\\nSome instrument may use e.g. a sample rate of 2.4 GHz, and each instruction duration must be an integer multiple of 16\\nsamples. Instructions therefore must be a multiple of 6.666ns (16 / 2.4 GHz).\\nDurations that are within 0.005 samples of an allowed number of samples are rounded to that\\n(the software assumes it is what the user meant), otherwise an error is raised. Different stations have different instruments.\\nIQM instruments use a fixed sample rate of 2 GHz, and have a granularity of 8 samples. You can view the granularity information in channel properties, for example Pulla.get_channel_properties()[0]['QB1__drive.awg'] : If you were to turn off the error and use an instruction with a duration that does not fit the granularity, it would\\njust silently be extended to the next longest allowed granularity, and would not do what you expect. previous iqm.pulla.utils_dd.generate_phases_of_urn_sequence next Changelog By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"Executing QIR programs","url":"/iqm-pulla/Example - Executing QIR programs.html","description":"If you have a QIR string or bitcode, you can start by creating Pulla-compatible circuits representation. You can also generate a QIR string or bitcode from a qiskit circuit using IQM’s fork of qiskit_...","content":"If you have a QIR string or bitcode, you can start by creating Pulla-compatible circuits representation. You can also generate a QIR string or bitcode from a qiskit circuit using IQM’s fork of qiskit_qir , available as the package iqm-qiskit-qir . previous Example: Dynamical decoupling next API Reference By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"Migration guide","url":"/iqm-pulla/migration_guide.html","description":"This document describes the changes that need to be made to existing code to migrate between major versions of Pulla. The changes in 4.0 are not truly breaking, as your code should still run. However,...","content":"This document describes the changes that need to be made to existing code to migrate between major versions of Pulla. The changes in 4.0 are not truly breaking, as your code should still run. However, there are some changes that\\nmight affect the compilation results, and you might want to adjust your code accordingly: New compilation pass prepend_reset added to the (TimeBox-level) standard compiler stage. It adds a reset timebox\\nto all circuits. It is the last pass of the TimeBox-level stage. If the calibration lacks reset_wait data, the prepend_reset will have no effect. Optional attribute :attr: .CircuitExecutionOptions.active_reset_cycles added to CircuitExecutionOptions ,\\nthat is used to control the reset functionality. By default, it is set to None , which results in delay by wait. :meth\`.Pulla.get_standard_compiler\` now has an optional argument for overriding default circuit execution options. The function iqm.pulla.utils_qiskit.qiskit_to_cpc was replaced by iqm.pulla.utils_qiskit.qiskit_circuits_to_pulla() and iqm.pulla.utils_qiskit.qiskit_to_pulla() . qiskit_circuits_to_pulla() is a more direct replacement, with the difference that it also requires a\\nmapping of qiskit qubit indices to physical qubit names which was not required before.\\nThis can be e.g. obtained from an iqm.qiskit_iqm.iqm_provider.IQMBackend instance. qiskit_to_pulla() is a convenience method that in addition to\\nconverting the Qiskit circuit(s) also returns a Compiler instance that can be used to compile them\\ninto a playlist. It takes as additional parameters a Pulla instance (for building the compiler),\\nand an IQMBackend instance (containing the calibration set ID and\\nqubit mapping to use). The IQMBackend instance should usually be the same one that was used to transpile\\nthe Qiskit circuits. Compiler code is consolidated under the iqm.cpc.compiler.compiler module.\\nThere is no more iqm.cpc.compiler.compiler2 . Compiler , CompilationStage are now under iqm.cpc.compiler.compiler . Pulla no longer needs CoCoS URL: Compiler initialization now requires all arguments to be keyword arguments. Pulla no longer retrieves qubit mapping from CoCoS. If your circuit uses same qubits names as physical qubits\\n(e.g. QB1 , QB2 , etc.), then you don’t have to do anything. If your circuit uses other qubit names, then you have to\\nprovide component_mapping to the Compiler like so: If you use Qiskit, the mapping can be generated with {str(idx): qb for idx, qb in backend._idx_to_qb.items()} . .Compiler.set_default_implementation_for_locus changed to Compiler.set_default_implementation_for_loci() : Compiler.amend_calibration_for_gate_implementation() now accepts a Locus (a tuple of strings)\\ninstead of string qubit name, so you can apply the change to multiple loci in a single call: iqm.pulla.utils.qiskit_to_cpc() and iqm.pulla.station_control_result_to_qiskit() , previously marked for\\ndeprecation in v. 1.0, are now removed. Use iqm.pulla.utils_qiskit.qiskit_to_cpc() and iqm.pulla.utils_qiskit.station_control_result_to_qiskit() , respectively. The main change in 1.0 is the splitting of Pulla and Compiler , and the move of some compiler-related methods to\\nthe more appropriate Compiler class. The Pulla class now only contains methods to retrieve calibration data,\\nconstruct a standard compiler instance, and submit pulse schedules to the server. Setting default implementation is now done in the compiler directly, and there is no need to manually refresh the\\ncompiler anymore. Same goes for adding implementations, and amending the calibration set with custom data for custom implementations: The calibration is now stored solely in the compiler instance, and can be retrieved using Compiler.get_calibration() : Fetching calibration sets from the server is still done via Pulla.fetch_latest_calibration_set() and Pulla.fetch_calibration_set_by_id() . Standard compilation stages are now available via get_standard_stages() . This ensures the immutability of\\nbuilt-in standard stages. previous IQM Pulla next User guides By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"API Reference","url":"/iqm-pulla/API.html","description":"iqm.cpc IQM Circuit to Pulse Compiler. iqm.pulla Client-side library for Pulse-level access to IQM quantum computers. previous Executing QIR programs next iqm.cpc By IQM Pulla developers © Copyright 2...","content":"iqm.cpc IQM Circuit to Pulse Compiler. iqm.pulla Client-side library for Pulse-level access to IQM quantum computers. previous Executing QIR programs next iqm.cpc By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"User guides","url":"/iqm-pulla/user_guides.html","description":"previous Migration guide next Quick Start By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16....","content":"previous Migration guide next Quick Start By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"Quick Start","url":"/iqm-pulla/Quick Start.html","description":"IQM PulLA is a client-side software which allows the user to control the generation and execution of pulse-level instruction schedules on a quantum computer. Within the existing IQM QCCSW stack, PulLA...","content":"IQM PulLA is a client-side software which allows the user to control the generation and execution of pulse-level instruction schedules on a quantum computer. Within the existing IQM QCCSW stack, PulLA is somewhere between circuit-level execution and EXA-experiment. Namely, with pulse-level access the user can: compile a quantum circuit (e.g. a Qiskit circuit) into an instruction schedule on the client side access and modify the calibration data to be used for the circuit-to-schedule compilation view and modify the default implementations of quantum gates define custom implementations of quantum gates define new composite gates out of native gates and set their calibration data control the multi-step compilation procedure, and edit the intermediate data use custom pulse shapes This notebook contains a small meaningful example for a “quick start”. Refer to other chapters for more details on various aspects of Pulla. Pulla provides a Qiskit backend, with limited functionality. Its main purpose is to replace the normal execution of run() , which submits circuits to the remote server, with a local compilation and submission of pulse schedules to the remote server. IQMPullaBackend does not provide any new functionality, but rather packs existing features and actions behind an illusion of using a normal Qiskit backend. You can perform all of the actions of IQMPullaBackend manually, but you may choose to use IQMPullaBackend in these cases: You don’t need to control compilation, and want to use Pulla in the same way as a remote circuit-executing IQM Server uses it. You want to run some existing apps written for Qiskit, e.g. benchmarking tools; they often build on top ot the circuit abstraction, and don’t necessarily give you easy access to the circuits, which makes it harder to use Pulla normally. You don’t have access to a remote circuit-executing IQM Server, only to a pulse-executing IQM Server. You don’t have any remote servers at all; all of the quantum control software is running locally (relevant for niche research cases) To initialize an IQMPullaBackend instance, provide 3 arguments: Quantum architecture in QuantumArchitectureSpecification format of IQM Client Instance of Pulla Instance of Compiler When IQMPullaBackend.run() is called, the following steps are performed: Given Qiskit circuits are converted to Pulla format using qiskit_circuits_to_pulla() . Circuits are compiled with the provided compiler using Compiler.compile() . Settings are generated with the provided compiler using Compiler.build_settings() . Circuits are executed on the station associated with the provided Pulla instance. Results are retrieved and converted into a DummyJob , partially compatible with Qiskit Job . Working example below: If the remote station requires authentication: Install IQM Client CLI with pip install iqm-client[cli] Run iqmclient init . The wizard will start and ask questions. Accepting defaults is ok. Wizard will ask for Authentication server URL . Usually, it’s of the form https://STATION_ROOT/auth . E.g. if the Station Control URL is \\"https://abc.com/station/\\" , then the auth server URL is \\"https://abc.com/auth/\\" Run iqmclient auth login . You should see info like so: Set the environment variable IQM_TOKENS_FILE accordingly in your Jupyter notebook and pass get_token_callback to the Pulla initialization call like so: Setting IQM_TOKENS_FILE env. variable enables authentication for CoCoS as well, so your Qiskit runs against the same station will work, too. Pulla can also be used with IQM Resonance cloud service. You need to set the station URL to point to Resonance. In addition to that, you must provide a get_token_callback parameter function that returns your Resonance API token. IQM Pulse comes with a schedule visualizer. It takes a Playlist (i.e. a compressed list of instruction schedules) and a list of schedule/segment indices to inspect.\\nThe playlist variable below is the one which we derived from the original Qiskit circuit using the Pulla compiler, and it only has one schedule. previous User guides next Configuration and Usage By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"Compilation using a locally created calibration set","url":"/iqm-pulla/Example - Compilation With Local Calibration Set.html","description":"This notebook shows how to construct a calibration set locally and use the local calibration set for compiling circuits. The calibration itself is done using IQM’s Graph Based Calibration (GBC) softwa...","content":"This notebook shows how to construct a calibration set locally and use the local calibration set for compiling circuits. The calibration itself is done using IQM’s Graph Based Calibration (GBC) software. In this notebook we show recalibration based on the latest calibration set. The usage of Pulla with a local calibration set works mostly the same way also for a full calibration from scratch. In that case you would just have to use a different GBC graph, and possibly manually add observations to the observation stash if it does not yet have all observations required for a valid calibration set. Using the principles shown in this notebook, it is possible to use all Pulla functionality as a helpful tool during the calibration process. NOTE: Some of the libraries used in this notebook are only available to on-premise customers and are not currently available publicly. First we prepare a Pulla object, a qiskit-iqm backend, and a circuit as explained in Quick Start.ipynb . Let’s also define a function that compiles and runs the above circuit using the given compiler state. This function will be used to compile and execute the circuit at different points of the calibration process: First we compile and execute the circuit using the compiler obtained above, which uses the current default calibration set on the server. The results of this execution can then be compared to the results after performing (parts of) the recalibration process. Now we will start recalibration using GBC. We need a CalibrationSetWrapper instance for handling calibration sets and a Calibrator for running the calibration: To start with, we run the first node that runs any actual calibration experiments: Then we can create a local calibration set based on the results of the above calibration node, and update the compiler to use this calibration set. We compile and execute a circuit using the updated compiler to see how our updates to the calibration set affect the results. Because many observations of the updated calibration set don’t yet take into account the results of the executed node, the results could even be worse than before updating the calibration set with these intermediate results. We could repeat the above steps multiple times for different nodes of the calibration graph, to see how the results change during the calibration process. Finally, we run the full recalibration, which runs all the remaining nodes that we did not run above: Then we again update the compiler using the results of the calibration in the same way as before. If the full recalibration was successful, the execution results should hopefully be at least as good as before the recalibration. By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"Example: Measuring T1","url":"/iqm-pulla/Example - Measuring T1.html","description":"T1 is an experiment that measures the relaxation time of a qubit. Information stored in a qubit decays exponentially. The time constant of the decay is called the relaxation time $T_1$. The experiment...","content":"T1 is an experiment that measures the relaxation time of a qubit. Information stored in a qubit decays exponentially. The time constant of the decay is called the relaxation time $T_1$. The experiment measures $T_1$ by preparing selected qubits in the  excited state by playing an X gate,\\nwaiting some time, and measuring the qubit. The waiting time is swept to reveal the exponential decay of the excited state probability. High-level QuantumOperations like Quantum gates can be implemented using different GateImplementations.\\nTo control low-level aspects of the execution, we can create custom operations, the implementation of which we can control. Here we invent a custom operation \\"custom\\" and write an implementation \\"Wait\\" , which only inserts a delay of certain duration.\\nIn principle, the custom gate implementation could include any number of low-level instructions,\\nbut for this task we only need a wait.\\nhttps://iqm-finland.github.io/docs/iqm-pulse/using_builder.html for more details about lower level controls. In later cells, we mix the custom gate with other, more familiar gates. We must register the operation, so that the compiler knows what to do with it: We need to select the physical qubits to work on. These are available on the QPU: Out of these, we select a few: Now we create all the circuits. In each circuit, we do a PRX(pi), or X, then our custom operation that waits, then measure all qubits.\\nWe create a circuit for each delay time we want on the time axis. Then compile the circuits. We tweak the settings so that the shots are averaged by the server, so that we don’t need to.\\nThe results therefore return as sampled probabilities. Extract the results We can also visualise the final playlist. We should see that each circuit is different and the waits at the end are increasing towards the end. previous Examples next Example: Dynamical decoupling By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"Contributors","url":"/iqm-pulla/authors.html","description":"Rakhim Davletkaliyev < rakhim . davletkaliyev @ meetiqm . com > Ville Bergholm < ville @ meetiqm . com > Joni Ikonen < joni @ meetiqm . com > Arianne Meijer < qaremei @ meetiqm . com > Tuukka Hiltunen...","content":"Rakhim Davletkaliyev < rakhim . davletkaliyev @ meetiqm . com > Ville Bergholm < ville @ meetiqm . com > Joni Ikonen < joni @ meetiqm . com > Arianne Meijer < qaremei @ meetiqm . com > Tuukka Hiltunen < tuukka @ meetiqm . com > Jussi Ritvas < jussi . ritvas @ meetiqm . com > Miikka Koistinen < miikka @ meetiqm . com > previous Changelog next License By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"iqm.pulla.utils_cirq.cirq_to_cpc","url":"/iqm-pulla/api/iqm.pulla.utils_cirq.cirq_to_cpc.html","description":"Convert a Cirq Circuit to an IQM CPC Circuit. previous iqm.pulla.utils_cirq next iqm.pulla.utils_dd By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04...","content":"Convert a Cirq Circuit to an IQM CPC Circuit. previous iqm.pulla.utils_cirq next iqm.pulla.utils_dd By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"iqm.cpc.compiler.errors","url":"/iqm-pulla/api/iqm.cpc.compiler.errors.html","description":"Definitions of error classes used to raise issues during circuit compilation. Exceptions CalibrationError A required calibration observation is missing from the calibration set, or an unknown gate cal...","content":"Definitions of error classes used to raise issues during circuit compilation. Exceptions CalibrationError A required calibration observation is missing from the calibration set, or an unknown gate calibration observation is encountered. CircuitError There is something wrong with the quantum circuit. ClientError Client submitted a bad request, and needs to be notified. CompilationPassError There is something wrong with the compilation pass. InsufficientContextError The context provided to the compilation pass does not contain all necessary fields. SettingsConventionError While parsing Station Control settings, something breaks a structural or naming convention. UnknownHardwareComponentError Circuit contains a reference to an unknown hardware component. UnknownLogicalQubitError A logical qubit in the circuit has not been defined in the qubit mapping. previous iqm.cpc.compiler next iqm.cpc.compiler.errors.CalibrationError By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"iqm.pulla.utils_dd.generate_phases_of_urn_sequence","url":"/iqm-pulla/api/iqm.pulla.utils_dd.generate_phases_of_urn_sequence.html","description":"Generate PRX gate phases for the URn sequence. More information on the URn sequence is available in [ 1 ] , at the end in Appendix A.1. n ( int ) – Number of single qubit PRX pulses with different pha...","content":"Generate PRX gate phases for the URn sequence. More information on the URn sequence is available in [ 1 ] , at the end in Appendix A.1. n ( int ) – Number of single qubit PRX pulses with different phases to apply, must be a positive even number. Phases to be used by the URn sequence. list [ float ] previous iqm.pulla.utils_dd next Common errors By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"iqm.cpc.compiler.errors.ClientError","url":"/iqm-pulla/api/iqm.cpc.compiler.errors.ClientError.html","description":"Client submitted a bad request, and needs to be notified. Errors inheriting this class will be reported to the client in the message field of the failed job. previous iqm.cpc.compiler.errors.CircuitEr...","content":"Client submitted a bad request, and needs to be notified. Errors inheriting this class will be reported to the client in the message field of the failed job. previous iqm.cpc.compiler.errors.CircuitError next iqm.cpc.compiler.errors.CompilationPassError By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"iqm.pulla","url":"/iqm-pulla/api/iqm.pulla.html","description":"Client-side library for Pulse-level access to IQM quantum computers. Subpackages and modules utils_cirq Utilities for working with Cirq objects. utils_dd Utilities for working with Dynamical Decouplin...","content":"Client-side library for Pulse-level access to IQM quantum computers. Subpackages and modules utils_cirq Utilities for working with Cirq objects. utils_dd Utilities for working with Dynamical Decoupling. previous iqm.cpc.interface next iqm.pulla.utils_cirq By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"iqm.cpc.compiler","url":"/iqm-pulla/api/iqm.cpc.compiler.html","description":"Compile quantum circuits into instruction schedules and settings that can be executed on a station. Subpackages and modules errors Definitions of error classes used to raise issues during circuit comp...","content":"Compile quantum circuits into instruction schedules and settings that can be executed on a station. Subpackages and modules errors Definitions of error classes used to raise issues during circuit compilation. previous iqm.cpc next iqm.cpc.compiler.errors By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"iqm.cpc","url":"/iqm-pulla/api/iqm.cpc.html","description":"IQM Circuit to Pulse Compiler. IQM Circuit to Pulse Compiler is a Python-based library for converting quantum circuits\\ninto instruction schedules (which map Station Control controller names to their p...","content":"IQM Circuit to Pulse Compiler. IQM Circuit to Pulse Compiler is a Python-based library for converting quantum circuits\\ninto instruction schedules (which map Station Control controller names to their pulse playlists) and Station Control settings\\nrequired for circuit execution, using the calibration data it is given.\\nThe generated schedules and settings can be sent to Station Control\\nfor execution on real or simulated quantum hardware. CPC is normally only accessed indirectly through Cocos or its reference client IQM client ,\\nor a frontend such as Cirq on IQM or Qiskit on IQM . Subpackages and modules compiler Compile quantum circuits into instruction schedules and settings that can be executed on a station. interface Pydantic models used by the API. previous API Reference next iqm.cpc.compiler By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"iqm.cpc.compiler.errors.InsufficientContextError","url":"/iqm-pulla/api/iqm.cpc.compiler.errors.InsufficientContextError.html","description":"The context provided to the compilation pass does not contain all necessary fields. previous iqm.cpc.compiler.errors.CompilationPassError next iqm.cpc.compiler.errors.SettingsConventionError By IQM Pu...","content":"The context provided to the compilation pass does not contain all necessary fields. previous iqm.cpc.compiler.errors.CompilationPassError next iqm.cpc.compiler.errors.SettingsConventionError By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"iqm.cpc.compiler.errors.SettingsConventionError","url":"/iqm-pulla/api/iqm.cpc.compiler.errors.SettingsConventionError.html","description":"While parsing Station Control settings, something breaks a structural or naming convention. previous iqm.cpc.compiler.errors.InsufficientContextError next iqm.cpc.compiler.errors.UnknownHardwareCompon...","content":"While parsing Station Control settings, something breaks a structural or naming convention. previous iqm.cpc.compiler.errors.InsufficientContextError next iqm.cpc.compiler.errors.UnknownHardwareComponentError By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"iqm.cpc.compiler.errors.CompilationPassError","url":"/iqm-pulla/api/iqm.cpc.compiler.errors.CompilationPassError.html","description":"There is something wrong with the compilation pass. previous iqm.cpc.compiler.errors.ClientError next iqm.cpc.compiler.errors.InsufficientContextError By IQM Pulla developers © Copyright 2024-2025, IQ...","content":"There is something wrong with the compilation pass. previous iqm.cpc.compiler.errors.ClientError next iqm.cpc.compiler.errors.InsufficientContextError By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"iqm.cpc.compiler.errors.CircuitError","url":"/iqm-pulla/api/iqm.cpc.compiler.errors.CircuitError.html","description":"There is something wrong with the quantum circuit. previous iqm.cpc.compiler.errors.CalibrationError next iqm.cpc.compiler.errors.ClientError By IQM Pulla developers © Copyright 2024-2025, IQM Finland...","content":"There is something wrong with the quantum circuit. previous iqm.cpc.compiler.errors.CalibrationError next iqm.cpc.compiler.errors.ClientError By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"iqm.cpc.compiler.errors.UnknownHardwareComponentError","url":"/iqm-pulla/api/iqm.cpc.compiler.errors.UnknownHardwareComponentError.html","description":"Circuit contains a reference to an unknown hardware component. previous iqm.cpc.compiler.errors.SettingsConventionError next iqm.cpc.compiler.errors.UnknownLogicalQubitError By IQM Pulla developers © ...","content":"Circuit contains a reference to an unknown hardware component. previous iqm.cpc.compiler.errors.SettingsConventionError next iqm.cpc.compiler.errors.UnknownLogicalQubitError By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"iqm.cpc.compiler.errors.CalibrationError","url":"/iqm-pulla/api/iqm.cpc.compiler.errors.CalibrationError.html","description":"A required calibration observation is missing from the calibration set, or an unknown\\ngate calibration observation is encountered. previous iqm.cpc.compiler.errors next iqm.cpc.compiler.errors.Circuit...","content":"A required calibration observation is missing from the calibration set, or an unknown\\ngate calibration observation is encountered. previous iqm.cpc.compiler.errors next iqm.cpc.compiler.errors.CircuitError By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"iqm.cpc.interface","url":"/iqm-pulla/api/iqm.cpc.interface.html","description":"Pydantic models used by the API. Subpackages and modules previous iqm.cpc.compiler.errors.UnknownLogicalQubitError next iqm.pulla By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release...","content":"Pydantic models used by the API. Subpackages and modules previous iqm.cpc.compiler.errors.UnknownLogicalQubitError next iqm.pulla By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"iqm.cpc.compiler.errors.UnknownLogicalQubitError","url":"/iqm-pulla/api/iqm.cpc.compiler.errors.UnknownLogicalQubitError.html","description":"A logical qubit in the circuit has not been defined in the qubit mapping. previous iqm.cpc.compiler.errors.UnknownHardwareComponentError next iqm.cpc.interface By IQM Pulla developers © Copyright 2024...","content":"A logical qubit in the circuit has not been defined in the qubit mapping. previous iqm.cpc.compiler.errors.UnknownHardwareComponentError next iqm.cpc.interface By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"iqm.pulla.utils_dd","url":"/iqm-pulla/api/iqm.pulla.utils_dd.html","description":"Utilities for working with Dynamical Decoupling. Functions generate_phases_of_urn_sequence (n) Generate PRX gate phases for the URn sequence. previous iqm.pulla.utils_cirq.cirq_to_cpc next iqm.pulla.u...","content":"Utilities for working with Dynamical Decoupling. Functions generate_phases_of_urn_sequence (n) Generate PRX gate phases for the URn sequence. previous iqm.pulla.utils_cirq.cirq_to_cpc next iqm.pulla.utils_dd.generate_phases_of_urn_sequence By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulla","title":"iqm.pulla.utils_cirq","url":"/iqm-pulla/api/iqm.pulla.utils_cirq.html","description":"Utilities for working with Cirq objects. Functions cirq_to_cpc () Convert a Cirq Circuit to an IQM CPC Circuit. previous iqm.pulla next iqm.pulla.utils_cirq.cirq_to_cpc By IQM Pulla developers © Copyr...","content":"Utilities for working with Cirq objects. Functions cirq_to_cpc () Convert a Cirq Circuit to an IQM CPC Circuit. previous iqm.pulla next iqm.pulla.utils_cirq.cirq_to_cpc By IQM Pulla developers © Copyright 2024-2025, IQM Finland Oy, Release 7.11. Last updated on 2025-04-16."},{"package":"iqm-pulse","title":"IQM Pulse","url":"/iqm-pulse/index.html","description":"9.2 2025-04-16 IQM Pulse provides an abstraction that transforms high-level quantum circuit operations\\nto a unified set of lower-level instructions for IQM quantum computers. A quantum circuit is an a...","content":"9.2 2025-04-16 IQM Pulse provides an abstraction that transforms high-level quantum circuit operations\\nto a unified set of lower-level instructions for IQM quantum computers. A quantum circuit is an abstract mathematical construct which conveniently hides all implementation\\ndetails such as the timing of microwave pulses, waveform shapes, sampling rates, signal capture, and so on.\\nBut in order to execute a circuit you need to convert it into a schedule of hardware instructions which involve\\nall of the above. IQM Pulse provides a framework for defining abstract quantum gates/operations, as well as their concrete implementations in terms of hardware instructions machinery to easily construct circuit-level gate sequences, and compile them into instruction schedules. a set of ready-made gates with implementations. IQM Pulse is not a standalone tool, but is used in IQM’s client libraries, IQM Pulla and Exa.\\nTo use them effectively, you are encouraged to familiarize yourself with IQM Pulse, especially the most common\\nconcepts. Index Module Index Search Page next Concepts and Classes © Copyright 2019-2025, IQM Finland Oy, Release 9.2. Last updated on 2025-04-16."},{"package":"iqm-pulse","title":"References","url":"/iqm-pulse/references.html","description":"R. G. Lyons. Understanding Digital Signal Processing . Prentice Hall, 2nd edition, 2004. ISBN 978-0131089891. Cecilia Gisele Jarne. A heuristic approach to obtain signal envelope with a simple softwar...","content":"R. G. Lyons. Understanding Digital Signal Processing . Prentice Hall, 2nd edition, 2004. ISBN 978-0131089891. Cecilia Gisele Jarne. A heuristic approach to obtain signal envelope with a simple software implementation. ANALES AFA , 29(2):51–57, 2018. arXiv:1703.06812 , doi:10.31527/analesafa.2018.29.2.51 . John M. Martinis and Michael R. Geller. Fast adiabatic qubit gates using only $\\\\sigma _z$ control. Phys. Rev. A , 90:022307, Aug 2014. arXiv:1402.5467 , doi:10.1103/PhysRevA.90.022307 . Eyob A. Sete, Nicolas Didier, Angela Q. Chen, Shobhan Kulshreshtha, Riccardo Manenti, and Stefano Poletto. Parametric-resonance entangling gates with a tunable coupler. Phys. Rev. Appl. , 16:024050, Aug 2021. arXiv:2104.03511 , doi:10.1103/PhysRevApplied.16.024050 . Youngkyu Sung, Leon Ding, Jochen Braumüller, Antti Vepsäläinen, Bharath Kannan, Morten Kjaergaard, Ami Greene, Gabriel O. Samach, Chris McNally, David Kim, Alexander Melville, Bethany M. Niedzielski, Mollie E. Schwartz, Jonilyn L. Yoder, Terry P. Orlando, Simon Gustavsson, and William D. Oliver. Realization of high-fidelity CZ and ZZ-free iSWAP gates with a tunable coupler. Phys. Rev. X , 11:021058, Jun 2021. arXiv:2011.01261 , doi:10.1103/PhysRevX.11.021058 . Eric Hyyppä, Antti Vepsäläinen, Miha Papič, Chun Fai Chan, Sinan Inel, Alessandro Landra, Wei Liu, Jürgen Luus, Fabian Marxer, Caspar Ockeloen-Korppi, and others. Reducing leakage of single-qubit gates for superconducting quantum processors using analytical control pulse envelopes. PRX Quantum , 5(3):030353, 2024. doi:10.1103/PRXQuantum.5.030353 . previous Changelog next License © Copyright 2019-2025, IQM Finland Oy, Release 9.2. Last updated on 2025-04-16."},{"package":"iqm-pulse","title":"Custom gate implementations","url":"/iqm-pulse/custom_gates.html","description":"Quantum gates are represented by QuantumOp data classes, containing the required\\nmetadata to define the gate. A QuantumOp is identified by its name , and arity defines number of locus components the o...","content":"Quantum gates are represented by QuantumOp data classes, containing the required\\nmetadata to define the gate. A QuantumOp is identified by its name , and arity defines number of locus components the operation acts on. For example,\\nthe PRX operation (Phased X Rotation) is a single-qubit operation, so its arity is 1, whereas the CZ (Controlled-Z) gate\\nacts on two qubits, having arity 2. Arity 0 has a special meaning that the operation in question can act on any number\\nof components (for example Barrier ). The attribute symmetric defines whether the effect of the quantum operation\\nis symmetric with respect to changing the order of its locus components. As an example, the CZ gate is a symmetric\\ntwo-qubit gate, whereas CNOT (Controlled-NOT) is not symmetric. Some quantum operations are defined as “functions”, taking one or more parameters to define the effect. These\\narguments are stored in the attribute params . As an example, the PRX gate\\ntakes two arguments, angle (the rotation angle with respect to the z-axis of the Bloch sphere), and phase (the rotation phase in the rotating frame). On the other hand, many operations do not require any parameters, in\\nwhich case this field is an empty tuple (e.g. the CZ gate). A QuantumOp has unambiguous definition in terms of its intended effect on the computational subspace of the\\nQPU component, but it can be implemented in various ways. Each implementation is represented as a GateImplementation subclass. A QuantumOp stores its known implementations in the\\nfield implementations . Note that even though QuantumOp is a frozen data class, the implementations dictionary can be modified, e.g.\\nto add new implementations or to change their order (usually programmatically by some client procedure, but nothing as\\nsuch prevents the user from manipulating the contents manually). The default implementation is how the user prefers\\nto implement the operation unless otherwise specified (in effect, this is what will get called in most cases the\\noperation is invoked). In the implementations dict, the default implementation is defined as the first entry.\\nQuantumOp contains helpful methods that allow setting and returning the default implementation for specific cases: set_default_implementation() , get_default_implementation_for_locus() , and set_default_implementation_for_locus() . The attribute unitary stores a function that can be used to get the unitary\\nmatrix representing the quantum operation in question. The unitary function must have the same arguments\\nas defined in params , such that for each collection of these parameters it\\ngives the associated unitary matrix. Note that not all QuantumOps necessarily even represent a unitary gate (e.g.\\nthe measure operation is not one), or the exact form of the unitary matrix might not be known. In these cases, the\\nfield can be left None . The unitary does not need to be defined for most of the basic usage of a QuantumOp, but certain\\nalgorithmic methods (e.g. some implementations of Randomized Benchmarking) may require the unitary matrices to be known,\\nand such operations that do not define the getter function cannot then be used in these contexts. For more information, see the API docs of QuantumOp for the full list of fields needed\\nto define a quantum operation and the available class methods. While QuantumOp represents an abstract quantum operation, its implementations contain\\nthe concrete logic of how to make that operation happen using QC hardware. Gate implementations are subclasses of GateImplementation . In this section, the main features of that class are\\nintroduced (for a full list of class methods see the API docs), with the emphasis being on how to create your own\\ngate implementations. Starting with __init__() , it is important to note that the init\\nmethods of all gate implementations must have the exact same signature: Here, parent is the QuantumOp this gate implementation implements, and name is the implementation’s name in\\nthe dictionary implementations . locus is the set of (usually logical) components\\nthe QuantumOp acts on (the size of the locus must be consistent with the parent ’s arity ), while calibration_data gives the required calibration data values\\nfor this implementation and locus (can be empty in case the implementation needs no calibration data). Finally,\\nThe implementations store a reference to the ScheduleBuilder that created it. This is\\nbecause GateImplementations are practically never created manually by calling the init method itself. Instead, one\\nneeds a builder and uses get_implementation() . The responsibility of the init method is to (at least) store the calibration_data provided from the builder for\\nfurther use, but in many cases, one might want to create some intermediate objects like pulses or instructions from that calibration data already at this point. Note that ScheduleBuilder caches its GateImplementations per each locus and calibration_data , so as long as the calibration is not changed, the code in init will be called just once per locus. GateImplementations are Callables, i.e. they implement the __call__ method. It should take as its arguments at least\\nthe QuantumOpt parameters defined for the parent in params , but in\\naddition it may have optional extra arguments. The call method should return a TimeBox object\\nthat contains the pulses, instructions and other logic required to implement the quantum operation in question. The\\ntypical usage of gate implementations then looks like this (See Using ScheduleBuilder and Pulse timing for more\\ninfo on scheduling and the ScheduleBuilder): The base class __call__() method does automatic TimeBox caching based\\non the unique values of the call arguments, and in many cases, one does not want to reimplement this caching in their own\\nimplementations. For this reason, there is the method _call which contains just the pure TimeBox creation logic.\\nDevelopers can choose to override that instead of __call__ in cases where the call args are hashable python types,\\nand then they can utilize the default caching of TimeBoxes from the base class. When writing a GateImplementation, a developer should consider what parts of the logic should go to the class init and\\nwhat to the __call__ or _call method. A general rule of thumb would be that any parts that can be precomputed\\nand do not depend on the call arguments can go to init, and the rest to call. As an example, let’s go through a simple PRX _call method (note that the default PRX implementations do not\\nuse this exact call method, as this is a simplified example for educational purposes): Here, we first create an IQPulse object which is a low-level Instruction. IQPulse\\nmeans a “complex pulse” which has two orthogonal components i and q – this what drive pulses look like in general. In\\nthis simplified example, we have hardcoded the pulse waveforms into TruncatedGaussian and TruncatedGaussianDerivative for the i and q components, respectively (this is a DRAG implementation, so the\\nq component is the derivative of the i component). The waveforms are parametrized by the calibration_data for the\\ngiven locus (see the next subsection for more info on Waveforms and calibration data). The PRX QuantumOp param angle scales the pulse amplitude linearly (the waveforms are normalized to one), and the param phase defines relative\\nphase modulation. Then the returned TimeBox is created out of the instruction . Note that\\nsince we override _call here, instead of __call__ , so this implementation would utilize the default base class\\ncaching such that the TimeBoxes are cached per unique values of (angle, phase) . Another important concept is a the so called locus mapping of a gate implementation. Locus mappings define on which\\nloci, i.e. groups of components, a given implementation can be defined. They are used to relay the information which\\nloci are supported to a client application (e.g. EXA). In addition, the gate implementation itself can programmatically\\nuse this information self.builder.chip_topology . For example, a PRX can be defined on all single components that are connected to a drive line, and CZ can be defined on\\nconnected pairs of qubits. Locus mappings live in ScheduleBuilder.chip_topology which is a ChipTopology object. Locus mapping is a dict whose keys are the loci\\n( tuple[str, ...] keys denote asymmetric loci where the order of the components matter, and frozenset[str] type\\nloci denote symmetric ones), and the values are groups of components, typed tuple[str, ...] , where each locus can be\\nmapped with some additional components that are needed for the operation of the implementation. For example, some CZ\\nimplementation that tries to correct for crosstalk could map the non-locus components that see this crosstalk here.\\nThe values of the dict can be left empty or just replicate the key components in case such extra information is not\\nneeded. GateImplementations can define their locus mappings via get_custom_locus_mapping() or if a client application already\\nadds the mapping, we can just return its name via get_locus_mapping_name() .\\nIf neither of these methods are overridden in a GateImplementation class, the default behaviour will be such that an arity==1 loci will be assumed to use the mapping where all single qubits are the keys, and arity==2 loci the\\n(symmetric) mapping where the keys are all pairs of connected qubits. For other arities there is no default behaviour,\\nso it is then mandatory to define the mapping explicitly using the aforementioned methods. In order to implement most QuantumOps, one has to physically alter the state of the QPU. This is typically done by playing\\nspecified and correctly calibrated pulses via the control electronics (this applies to all typical logical gates such as\\ne.g. PRX or CZ – non-physcial metaoperations such as Barrier are an exception). In defining these pulses, there are two\\nlevels of abstractions: Waveform and Instruction . Waveform represents the physical form of the control pulse, typically normalized to the interval [-1.0, 1.0] . The\\nEach Waveform subclass can define any number of waveform parameters as class\\nattributes, which can be used to programmatically define the waveform. For example, a Gaussian could be defined in terms\\nof the average mu and spread sigma . A Waveform class then essentially contains just the parameters\\nand a recipe for computing the samples as an np.ndarray . As an example, here is how one writes the Waveform class\\nfor Gaussian : The Instructions RealPulse and IQPulse allow handling the amplitudes (via the attribute scale ) without\\nhaving to resample the waveform for every different amplitude value. However, one can always choose to include\\nthe amplitude into the sampling and then use scale=1 . The waveform parameters (like sigma in the above Gaussian) typically require calibration when the Waveform is used\\nin a quantum gate. However, the GateImplementation usually has other calibrated parameters as well defined in the\\nimplementation itself. As an example, here are the implementation-level parameters of the default PRX implementation,\\ndefined as class attribute: Note the amplitudes are defined here on this level, since the default PRX uses normalized Waveforms and factors in the\\namplitudes via scale . In these parameters, the unit is not just metadata. The control electronics understand time\\nin terms of samples and their sample rate, while human users typically want to input seconds instead of doing the sample\\nconversion manually. For this reason, there is logic that converts anything that has the unit \\"s\\" into samples.\\nSimilarly, parameters with \\"Hz\\" units are converted to 1/sample . For the Waveform parameters, the same logic\\napplies, but by default it is assumed that all parameters are time-like and this converted from seconds to samples.\\nIf some Waveform parameters needs to be made unitless or e.g. frequency-like (with \\"Hz\\" units), it can be achieved\\nwith the method non_timelike_attributes() : In the above dict, the keys should be the attribute names and values their units. To make creating new GateImplementations more comfortable, there are additional base classes on top of GateImplementation itself. CompositeGate allows quick implementation of gates in terms of other gates,\\nusing a similar syntax as with creating/scheduling several TimeBoxes together (see Using ScheduleBuilder ). At it\\nsimplest, a ComposteGate is just the _call method: Here, one could use also builder.get_implementation instead of build() , but the latter allows calibrating the member gates\\ncase specifically for this composite if they are first registered via registered_gates (in this case, there is\\njust one member, PRX). Creating new implementations for the PRX, CZ and Measure gates often means just coming up with new waveforms for the\\ncontrol pulses. If this is the case, there are helpful base classes that make those implementations into oneliners\\n(outside of defining the Waveforms themselves): PRX_CustomWaveforms , FluxPulseGate , and Measure_CustomWaveforms . Using these\\nbase classes at its simplest looks like this: All of these classes automatically include the associated Waveform parameters into the calibration parameters of\\nthe implementation itself. There is also a general base class for any gate that implements a single IQPulse (both PRX_CustomWaveForms and Measure_MyCoolWaveforms actually inherit from it), regardless of the context: CustomIQWaveforms . Gate definitions (i.e. QuantumOps) are stored in ScheduleBuilder ’s attribute op_table . When the builder is created, the op_table comes preloaded with the all the basic QuantumOps needed for\\ntypical circuit execution and their default implementations. These include e.g. the PRX gate, the CZ gate, the measure\\noperation, the conditional prx operation, the reset operation, and the barrier operation. In order to add custom operations, there is a helpful function register_implementation() that\\nin addition to adding new implementations allows one to add altogether new quantum operations. As an example here is a snippet that adds the CNOT gate, and its implementation, into an existing builder: Here, the CNOT implementation MyCNotClass needs to be of course defined first (a QuantumOp always needs at least one\\nimplementation). Note: The end user cannot modify the canonical mapping (defined in iqm-pulse) between implementation_name and implementation_class . Note that often ScheduleBuilder is created and operated by some client application, and the same application usually\\nhas its own interface for adding/manipulating QuantumOps. However, if the user has access to the builder object, the\\nabove method will always work. previous Using ScheduleBuilder next Pulse timing © Copyright 2019-2025, IQM Finland Oy, Release 9.2. Last updated on 2025-04-16."},{"package":"iqm-pulse","title":"Pulse timing","url":"/iqm-pulse/pulse_timing.html","description":"The ReadoutTrigger Instruction responsible of qubit readout has several\\ntiming-related attributes.\\nThe measure.constant gate implementation produces the lower-level ReadoutTrigger instruction\\nfrom a s...","content":"The ReadoutTrigger Instruction responsible of qubit readout has several\\ntiming-related attributes.\\nThe measure.constant gate implementation produces the lower-level ReadoutTrigger instruction\\nfrom a simplified set of settings.\\nThe figure below shows how the settings relate to the more flexible attributes of the instruction. With conditional Instructions, we specify how the information from readout operations should affect Instructions at\\nruntime.\\nUsually, the goal is use the information as soon as possible, but it takes a finite time to propagate from the\\nacquisition unit to the drive channels that execute the Instructions conditionally. Note On all hardware supported by IQM QCCSW, ConditionalInstruction reads the signal bit at the time of\\nexcution, regardless of when the signal bit was last updated.\\nThis means that if the Conditionalinstruction is executed too early, the condition will be executed based on the\\nprevious state of the bit. To facilitate efficient timing of the feedback signals, IQM Pulse uses virtual channels between probeline channels\\n(the source of the signals) and drive channels (the destinations).\\nBlock instructions on the virtual channel represent the travel time of the signals. CCPRX_Composite is GateImplementation of the cc_prx (classically controlled PRX) that outputs two\\nTimeBoxes:\\nthe first one to represent the travel time, and the second one with the actual ConditionalInstruction .\\nIn typical use, both should be scheduled in the same order, to ensure the Conditionalinstrucion starts when the\\nsignal bit is available. The following image illustrates how the TimeBoxes are used for qubits QB2 and QB3 .\\nFor QB2, this is also how Reset_Conditional implements the reset operation. The equaivalent code would be Instructions are spaced out in time only for visual clarity. When scheduled ASAP, they would be left-aligned\\nsuch that the ConditionalInstructions start right after the associated control_delay has passed. The bottom of the image illustrates an alternative use of CCPRX_Composite to have more freedom in the timing.\\nThere, the optional delay TimeBox is not used for scheduling the Instructions on QB4.\\nInstead, the user has ensured that the other instructions take enough time for the signal to arrive.\\nThis could be used to act on the previous feedback signal (not shown). Note This section is not about IQM Pulse itself, but might help in understanding the details of the execution. The image below shows a typical timing of a Playlist segment with 2 AWG devices for driving, and a readout instrument.\\nHere, all statements that apply to an AWG apply to readout instruments as well.\\nThe AWGs can output an arbitrary sequence of pulses, and the readout instrument can additionally read out\\nthe response to the pulses. With readout, the raw signal response from the readout pulse will be integrated to produce a single number, such as a\\ncomplex number or a bit, corresponding to a particular qubit in a particular segment. In the figure, one of the AWGs has been selected as the trigger master, which means it sends trigger pulses to\\nstart the execution on the slave devices.\\nAs shown in the picture, different delays caused by the travel time of signals can be compensated for by\\nadjusting the trigger_delay setting of each device. Settings in the figure that can be adjusted by user in the higher level libraries: Setting Explanation <awg>.trigger_delay Wait time between the end of the trigger signal of the AWG master and the beginning of the pulse sequence. <awg>.trigger_delay (slave) Wait time between receiving the trigger signal at the AWG slave and the beginning of the pulse sequence. options.end_delay Wait time between the end of the pulse segment and the next trigger. <gate>.<implementation>.<locus>.duration The duration of the hardware instruction for a gate, possibly rounded to satisfy granularity constraints.\\nFor the ReadoutTrigger instruction, the meaning is different, see below. Other notes: The AWG spcecified by options.trigger_master is the only channel that does not wait for a trigger\\nat the start of a segment. Slave AWGs may also emit a trigger pulse to allow daisy chaining trigger signals. Systems with IQM Control System are triggered centrally and the channels run independently, and the options.trigger_master has no effect. Pipeline delays are delays between the execution of a command and the pulse actually getting outputted\\nfrom a device. This delay is caused by the hardware and cannot be changed.\\nIn practice, it can be thought as being part of the cable delays, and thus can be compensated with trigger_delay setting. previous Custom gate implementations next API Reference © Copyright 2019-2025, IQM Finland Oy, Release 9.2. Last updated on 2025-04-16."},{"package":"iqm-pulse","title":"Using ScheduleBuilder","url":"/iqm-pulse/using_builder.html","description":"This section describes how to use ScheduleBuilder to compose pulse schedules.\\nScheduleBuilder encapsulates registered QuantumOps, the calibration information for them, QPU components and their\\ntopolog...","content":"This section describes how to use ScheduleBuilder to compose pulse schedules.\\nScheduleBuilder encapsulates registered QuantumOps, the calibration information for them, QPU components and their\\ntopology, and control channel properties. In the context of IQM Pulla and EXA, an instance of ScheduleBuilder is given by the framework,\\nand it contains all the necessary information to execute against a particular quantum computer instance.\\nHere, we assume that user has an instance of ScheduleBuilder builder to work with. A typical workflow begins with calling get_implementation() with the name of a desired QuantumOp and the locus\\nfor the operation.\\nThe locus is the logical target of the operation, usually a sequence of qubits or computational resonators.\\nThis outputs a an instance of GateImplementation , which is capable of producing TimeBoxes with the correct\\ncalibration for that locus. For example, here we ask for the GateImplementation of prx , cz , and measure , all of which are standard\\ngates recognized by IQM Pulse, for qubits QB1 and QB3 .\\nAny gate which is registered in the runtime can be requested this way. Notice how the number of qubits matches the operation: CZ acts on 2 qubits, while PRX acts on only one.\\nMeasure can act on any number of qubits. There might be several available implementations for an operation. get_implementation gives the implementation that is set as the default, unless a specific implementation is\\nrequested with a keyword argument. To instantiate some concrete TimeBoxes, we call time implementation with the logical parameters of the operations, as\\ndefined by the QuantumOps.\\nPRX has 2 parameters: the 2 angles of a phased rotation.\\nCZ does not have any parameters. One important method is the wait() , which blocks the control channels of the given components for a certain time: In all of the examples above, the TimeBoxes are atomic, which can be organized into composite TimeBoxes to decide\\ntheir relative order. TimeBoxes can be concatenated with the following rules: Addition ( + ) concatenates the children of the operands into a single TimeBox.\\nUse addition to allow gates on disjoint loci to execute simultaneously, for example doing a PRX on all qubits. The pipe operation ( | ) groups two TimeBoxes together without concatenating.\\nThis results in composite TimeBox with two children, the operands, which are scheduled separately.\\nUse the pipe to ensure that certain operations execute before some others. Iterables of TimeBoxes are treated as the sum of the elements. This would execute 2 PRX gates on QB1 and QB2 simultaneously: If the last operator was | instead, the second gate on QB2 would execute only after the first 3 gates. Together, these rules provide a handy way of defining complex circuits easily: A TimeBox are made atomic by resolving it using ScheduleBuilder.resolve_timebox() .\\nWhen using a framework like IQM Pulla or Exa, the framework will take care of the resolving as part of compilation,\\nso the user does not need to do it explicitly. TimeBoxes are resolved recursively: The children of a TimeBox are resolved, and resulting (sub-)Schedules are aligned\\naccording to the SchedulingStrategy (ASAP or ALAP) of the TimeBox.\\nThe time duration of a TimeBox is determined by its contents and the way they are scheduled during the resolution.\\nFinally, all channels are padded with Waits so that the total duration of Instructions on every channel is equal.\\nIn other words, the Schedule becomes a “rectangle”. An important part of the scheduling are the blocking rules, that is, whether the contents of two TimeBoxes block or\\nslide past each other.\\nThe rules are: An atomic TimeBox is considered to act on a component if it has instructions on any of the non-virtual channels\\nrelated to that component. A composite TimeBox acts on the union of its children’s locus components. A TimeBox blocks all channels related to any component it acts on. When scheduling two TimeBoxes, the instructions will not overlap in time if the TimeBoxes block overlapping channels. In addition to blocking the channels actually present in a TimeBox, it is possible to block neighbouring channels\\nas well (for example in order to limit cross-talk).\\nThe applied neighbourhood is specified in ScheduleBuilder.resolve_timebox() .\\nThe neighbourhood is defined as an integer such that 0 means “block only the involved channels”,\\n1 means “block the involved channels and the channels of any neighbouring couplers”,\\n2 means “the same as in (1) but in addition block all channels connected by those couplers”, and so on.\\nThe blocking rules do not add actual Wait or Block instructions are added to the neighbourhood channels, and two\\noverlapping neighbourhoods do not block each other.\\nThe blocking comes in question only when actual content would be added to those neighbourhood channels. In practice, the rules and default GateImplementations ensure that the user can concatenate arbitrary gates\\nwithout worrying that the gates have an adverse effect on each other.\\nFor example, the pulse of a PRX gate playing at the same time as a CZ gate or a measurement would ruin both operations.\\nIf overlapping of such gates is desired, the best way is to arrange the Instructions on the Schedule level and wrap the\\nschedule into an atomic TimeBox. Note Virtual channels are special channels that exist only to aid the scheduling algorithm.\\nExamples are tracking the phases of the MOVE gate, and timing of fast feedback.\\nThese channels are removed when the Playlist is finalized. You are encouraged to discover the many features of ScheduleBuilder and TimeBox by reading the\\nAPI: ScheduleBuilder , TimeBox . A quick reference of selected features is provided in the examples below. Finding information about the target system: Working with TimeBoxes: Some typical errors that are easy to make with the syntax: Not calling the implementation to get a TimeBox. The call is easy to forget especially if there are no parameters\\nto give: Giving a single component as locus: previous Concepts and Classes next Custom gate implementations © Copyright 2019-2025, IQM Finland Oy, Release 9.2. Last updated on 2025-04-16."},{"package":"iqm-pulse","title":"API Reference","url":"/iqm-pulse/API.html","description":"iqm.pulse Control pulses, gates and instruction schedules for quantum computers. previous Pulse timing next pulse © Copyright 2019-2025, IQM Finland Oy, Release 9.2. Last updated on 2025-04-16....","content":"iqm.pulse Control pulses, gates and instruction schedules for quantum computers. previous Pulse timing next pulse © Copyright 2019-2025, IQM Finland Oy, Release 9.2. Last updated on 2025-04-16."},{"package":"iqm-pulse","title":"Concepts and Classes","url":"/iqm-pulse/concepts.html","description":"This section gives an overview of the main concepts and terminology in IQM Pulse. QPUs contain components : qubits, computational resonators, couplers, and probelines. Each component may have some con...","content":"This section gives an overview of the main concepts and terminology in IQM Pulse. QPUs contain components : qubits, computational resonators, couplers, and probelines. Each component may have some control channels connected to it. Control channels deliver physical control pulses\\nto the QPU. Quantum operations have a locus , which is the set of quantum information carrying components\\n(qubits and resonators) the operation acts on.\\nOne operation may involve sending pulses to multiple control channels. The assembly of a Playlist, or a batch of quantum circuits, can be summarized as follows: A Playlist contains multiple independent segments , to be executed as a batch. A segment is a conceptual unit at a time scale where the quantum information of the QPU can be\\nassumed to be preserved. A quantum circuit corresponds to one segment. What is executed during a segment is determined by a Schedule . A Schedule is a set of hardware control channels, each with a strictly timed sequence of Instructions . A Schedule is formed by scheduling a Timebox . A TimeBox can contain other TimeBoxes without precise relative timing,\\nor it can be atomic, in which case it contains a single Schedule . The image below illustrates how a Playlist of two segments is formed from TimeBoxes. Hardware instructions are the lowest-level construct visible on the client side.\\nInstructions are a set of atomic, real-time execution commands for the control hardware supported by IQM.\\nThey work in a time scale where the quantum information of the QPU can be assumed to be preserved.\\nExamples of Instructions are IQPulse to play a microwave pulse on a channel, VirtualRZ to adjust the modulation phase, ReadoutTrigger to acquire measurement data,\\nand Wait to delay the next Instruction for a given time.\\nSee iqm.pulse.playlist.instructions for the complete list. During execution, each hardware control channel executes its own sequence of Instructions.\\nEach Instruction blocks the next until it is completed.\\nInstructions are as explicit as possible, so that there is no ambiguity on what will be executed when.\\nIQM Station control transforms Instructions to machine-specific commands. All Instructions have a duration, measured in samples, though the duration can be zero.\\nThe durations are subject to hardware-specific granularity constraints.\\nFor example, some hardware might require all instructions to be a multiple of 16 samples long, with a minimum of 32.\\nInstructions violating the granularity constraints will raise an error.\\nHowever, a typical user does not need to concern themselves about the constraints, as\\nthe gate implementations and IQM Pulse’s scheduling ensures the constraints are respected.\\nThe philosophy is that Station Control, which is inaccessible to the user, does not attempt to do any smart\\n“magic” to fix inconsistencies in the user’s input, it simply executes the Playlist it is given.\\nInstead, the magic happens on the client side so that it is transparent to the user. Note For technical reasons, IQM Pulse mostly uses classes from iqm.pulse.playlist.instructions , but when\\nfinalizing the output, the instructions are converted to iqm.models.playlist.instructions .\\nThese two class families are semantically equivalent, apart from a few exceptions like Block which\\nonly exists on the client side to help with scheduling. Schedule contains a number of control channels, each with a lists of Instructions.\\nAll channels in a Schedule start executing at the same instant, and the timing is defined by the duration of the\\nindividual Instructions.\\nSchedules can be thought of as a fixed block that occupies some interval on a timeline of some channels. Schedules appear in two contexts: gate implementations and as complete segments.\\nFor example, when an implementation of a PRX gate is requested,\\na small Schedule involving the drive channel of a single qubit is created.\\nWhen all the desired gates in a circuit have been scheduled by concatenating the gate-schedules together,\\nthe end result, a segment, is a large Schedule occupying all necessary channels.\\nA typical segment starts with initializing the qubits and ends with reading out their state. Whereas a Schedule is a container with strict relative timing, a TimeBox is a container with undefined\\nrelative timing.\\nEach TimeBox can be labeled using a human-readable label describing it, and operates on a number\\nof locus components , using some of their control channels.\\nA composite TimeBox contains other TimeBoxes as children, whereas atomic TimeBoxes contain a Schedule. TimeBoxes are the main language in which users define the order and relative alignment of execution elements, be it\\ngates, Schedules, or larger TimeBoxes. A key process is the scheduling, in which TimeBoxes are resolved recursively into a fixed Schedule.\\nWhen resolving, all Schedules inside the TimeBox are concatenated and are either left-aligned (ASAP) or right-aligned\\n(ALAP), respecting the hardware constraints.\\nImportantly, if some TimeBoxes have content on disjoint channels, the Schedules are allowed to happen simultaneously.\\nIf they have content on partly overlapping channels, the Schedules are concatenated while preserving their internal\\ntiming.\\nAny interval that does not have explicit instructions is filled with Wait Instructions.\\nThe figure above demonstrates how TimeBoxes are resolved. The syntax and rules are explained in more detail in Using ScheduleBuilder . A higher-level concept, a QuantumOp can represent a unitary quantum gate,\\nor for example a measurement operation (not all QuantumOps necessarily represent a unitary gate).\\nQuantumOps are simple, abstract, self-contained actions one can execute on a station as parts of a quantum circuit.\\nThey include quantum gates like PRX, CZ, and measurements and resets.\\nWhereas Schedules and Instructions act on control channels, QuantumOps act on named components on the QPU, such as\\nqubits or computational resonators. A QuantumOp has unambiguous definition in terms of its intended effect on the computational subspace of the\\nQPU component, but it can be implemented in various ways.\\nEach implementation is represented as a GateImplementation. The list of available QuantumOps at runtime can be obtained with iqm.pulse.builder.build_quantum_ops() .\\nA new QuantumOp can be registered at runtime, together with an implementation, with iqm.pulse.gates.register_implementation() . A GateImplementation bridges the gap between QuantumOps and TimeBoxes.\\nWhen a user requests a QuantumOp from ScheduleBuilder with specific parameters and locus components, the\\nchosen GateImplementation (usually the default) for the operation is used to produce a TimeBox.\\nThis TimeBox, usually atomic, contains a Schedule on the appropriate control channels.\\nThe Instructions within are constructed following the calibration values from the ScheduleBuilder. All gate implementations are listed in iqm.pulse.gates .\\nSection Custom gate implementations explains how to add more implementations. Once all TimeBoxes are scheduled into large Schedules, one for each segment/circuit,\\nthe Schedules are collected into a Playlist .\\nThe Playlist is the final product that is sent to Station Control.\\nIts contents are compressed by indexing all unique Instructions and waveforms on each channel,\\nand representing the control channels in each segment as lists of Instruction indices. During execution, the segments in the Playlist are executed in order, and the whole sequence is repeated\\na number of times equal to the number of repetitions (shots). Segments are separated in time by end delay , a parameter outside the Playlist.\\nA long end delay can be used to prevent quantum information carrying from one segment to the next,\\nthus resetting the qubits.\\nAlternatively, the reset can be encoded in each segment as a long Wait instruction or using some active reset scheme. Station Control aims to execute all segments together, but sometimes this is not possible due to various memory\\nconstraints.\\nIn case the whole Playlist does not fit in memory, the segments are split into chunks which are executed separately.\\nThe delay between chunks is undefined.\\nTherefore, the time between segments is guaranteed to be at least the duration of the end delay, but can be much larger. inspect_playlist() provides a neat visual representation of the playlist, as blocks of instructions on a\\ntimeline. previous IQM Pulse next Using ScheduleBuilder © Copyright 2019-2025, IQM Finland Oy, Release 9.2. Last updated on 2025-04-16."},{"package":"iqm-pulse","title":"pulse","url":"/iqm-pulse/api/iqm.pulse.html","description":"Control pulses, gates and instruction schedules for quantum computers. Full path: iqm.pulse Subpackages and modules previous API Reference next Changelog © Copyright 2019-2025, IQM Finland Oy, Release...","content":"Control pulses, gates and instruction schedules for quantum computers. Full path: iqm.pulse Subpackages and modules previous API Reference next Changelog © Copyright 2019-2025, IQM Finland Oy, Release 9.2. Last updated on 2025-04-16."},{"package":"iqm-station-control-client","title":"API documentation: station-control-client","url":"/iqm-station-control-client/index.html","description":"3.15 2025-04-16 This is the documentation of the IQM station-control client library. Index Module Index Search Page next API Reference © Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated...","content":"3.15 2025-04-16 This is the documentation of the IQM station-control client library. Index Module Index Search Page next API Reference © Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-16."},{"package":"iqm-station-control-client","title":"API Reference","url":"/iqm-station-control-client/API.html","description":"iqm.station_control.client Station control client implementation. iqm.station_control.interface Station control interface. previous API documentation: station-control-client next client © Copyright 20...","content":"iqm.station_control.client Station control client implementation. iqm.station_control.interface Station control interface. previous API documentation: station-control-client next client © Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-16."},{"package":"iqm-station-control-client","title":"meta_class","url":"/iqm-station-control-client/api/iqm.station_control.client.iqm_server.meta_class.html","description":"Full path: iqm.station_control.client.iqm_server.meta_class Classes IqmServerClientMeta Custom metaclass that automatically adds '<feature> not implemented' stub implementations for all StationControl...","content":"Full path: iqm.station_control.client.iqm_server.meta_class Classes IqmServerClientMeta Custom metaclass that automatically adds '<feature> not implemented' stub implementations for all StationControlClient functions that are not overridden by IqmServerClient. Inheritance previous iqm_server next IqmServerClientMeta © Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-16."},{"package":"iqm-station-control-client","title":"testing","url":"/iqm-station-control-client/api/iqm.station_control.client.iqm_server.testing.html","description":"Full path: iqm.station_control.client.iqm_server.testing Subpackages and modules previous IqmServerClientMeta next interface © Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-0...","content":"Full path: iqm.station_control.client.iqm_server.testing Subpackages and modules previous IqmServerClientMeta next interface © Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-16."},{"package":"iqm-station-control-client","title":"ListWithMeta","url":"/iqm-station-control-client/api/iqm.station_control.interface.list_with_meta.ListWithMeta.html","description":"Bases: list Standard list extension holding optional metadata as well. Module: iqm.station_control.interface.list_with_meta Methods items ( Iterable ) – meta ( Meta ) – previous list_with_meta next Me...","content":"Bases: list Standard list extension holding optional metadata as well. Module: iqm.station_control.interface.list_with_meta Methods items ( Iterable ) – meta ( Meta ) – previous list_with_meta next Meta © Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-16."},{"package":"iqm-station-control-client","title":"PydanticBase","url":"/iqm-station-control-client/api/iqm.station_control.interface.pydantic_base.PydanticBase.html","description":"Bases: BaseModel Pydantic base model to change the behaviour of pydantic globally.\\nNote that setting model_config in child classes will merge the configs rather than override this one. https://docs.py...","content":"Bases: BaseModel Pydantic base model to change the behaviour of pydantic globally.\\nNote that setting model_config in child classes will merge the configs rather than override this one. https://docs.pydantic.dev/latest/concepts/config/#change-behaviour-globally Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.pydantic_base Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Methods Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous pydantic_base next Changelog © Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-16."},{"package":"iqm-station-control-client","title":"interface","url":"/iqm-station-control-client/api/iqm.station_control.interface.html","description":"Station control interface. A StationControlInterface administers a set of control and measurement instruments\\nattached to a quantum device, and connects to the database and related external services. ...","content":"Station control interface. A StationControlInterface administers a set of control and measurement instruments\\nattached to a quantum device, and connects to the database and related external services. Full path: iqm.station_control.interface Subpackages and modules list_with_meta Models to extend standard list with metadata. pydantic_base Pydantic related models and types. previous testing next list_with_meta © Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-16."},{"package":"iqm-station-control-client","title":"list_with_meta","url":"/iqm-station-control-client/api/iqm.station_control.interface.list_with_meta.html","description":"Models to extend standard list with metadata. Full path: iqm.station_control.interface.list_with_meta Classes ListWithMeta Standard list extension holding optional metadata as well. Meta Class holding...","content":"Models to extend standard list with metadata. Full path: iqm.station_control.interface.list_with_meta Classes ListWithMeta Standard list extension holding optional metadata as well. Meta Class holding metadata for list return values, like pagination related data. Inheritance previous interface next ListWithMeta © Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-16."},{"package":"iqm-station-control-client","title":"iqm_server","url":"/iqm-station-control-client/api/iqm.station_control.client.iqm_server.html","description":"StationControlClient implementation for IQM Server Full path: iqm.station_control.client.iqm_server Subpackages and modules meta_class  testing  previous client next meta_class © Copyright 2019-2025, ...","content":"StationControlClient implementation for IQM Server Full path: iqm.station_control.client.iqm_server Subpackages and modules meta_class  testing  previous client next meta_class © Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-16."},{"package":"iqm-station-control-client","title":"client","url":"/iqm-station-control-client/api/iqm.station_control.client.html","description":"Station control client implementation. Full path: iqm.station_control.client Subpackages and modules iqm_server StationControlClient implementation for IQM Server previous API Reference next iqm_serve...","content":"Station control client implementation. Full path: iqm.station_control.client Subpackages and modules iqm_server StationControlClient implementation for IQM Server previous API Reference next iqm_server © Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-16."},{"package":"iqm-station-control-client","title":"IqmServerClientMeta","url":"/iqm-station-control-client/api/iqm.station_control.client.iqm_server.meta_class.IqmServerClientMeta.html","description":"Bases: type Custom metaclass that automatically adds ‘<feature> not implemented’\\nstub implementations for all StationControlClient functions that are\\nnot overridden by IqmServerClient. Module: iqm.sta...","content":"Bases: type Custom metaclass that automatically adds ‘<feature> not implemented’\\nstub implementations for all StationControlClient functions that are\\nnot overridden by IqmServerClient. Module: iqm.station_control.client.iqm_server.meta_class Methods previous meta_class next testing © Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-16."},{"package":"iqm-station-control-client","title":"Meta","url":"/iqm-station-control-client/api/iqm.station_control.interface.list_with_meta.Meta.html","description":"Bases: object Class holding metadata for list return values, like pagination related data. Module: iqm.station_control.interface.list_with_meta Attributes count  errors  limit  offset  order_by  Metho...","content":"Bases: object Class holding metadata for list return values, like pagination related data. Module: iqm.station_control.interface.list_with_meta Attributes count  errors  limit  offset  order_by  Methods count ( int | None ) – order_by ( str | None ) – limit ( int | None ) – offset ( int | None ) – errors ( list [ str ] | None ) – previous ListWithMeta next pydantic_base © Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-16."},{"package":"iqm-station-control-client","title":"pydantic_base","url":"/iqm-station-control-client/api/iqm.station_control.interface.pydantic_base.html","description":"Pydantic related models and types. Full path: iqm.station_control.interface.pydantic_base Classes PydanticBase Pydantic base model to change the behaviour of pydantic globally. Inheritance previous Me...","content":"Pydantic related models and types. Full path: iqm.station_control.interface.pydantic_base Classes PydanticBase Pydantic base model to change the behaviour of pydantic globally. Inheritance previous Meta next PydanticBase © Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-16."}]`);var fp=ac();const hn=({content:c,children:l})=>{const[s,w]=ze.useState(!1),[y,x]=ze.useState(null),[C,I]=ze.useState({x:0,y:0});ze.useEffect(()=>{const M=document.createElement("div");return document.body.appendChild(M),x(M),()=>{document.body.removeChild(M)}},[]);const q=M=>{I({x:M.clientX,y:M.clientY})};return y?v.jsxs("div",{className:"relative inline-block",onMouseMove:q,children:[l,v.jsx("span",{className:"tooltip-trigger ml-1 cursor-pointer",onMouseEnter:()=>w(!0),onMouseLeave:()=>w(!1),onClick:()=>w(!s),children:"ⓘ"}),s&&fp.createPortal(v.jsx("div",{className:"fixed p-2 bg-gray-700 text-white text-sm rounded shadow-lg z-50",style:{top:C.y+10,left:C.x+10},children:c}),y)]}):null},gp=[{name:"Higher energy states (resonator)",qccsw:"3.1.0",qiskit:{tutorial:"https://www.iqmacademy.com/notebookViewer/?path=/notebooks/iqm/deneb/Deneb_Unlocked_Resonator.ipynb"},cirq:{tutorial:"https://iqm-finland.github.io/iqm-client/api/iqm.iqm_client.models.CircuitCompilationOptions.html#iqm.iqm_client.models.CircuitCompilationOptions.move_gate_validation"}},{name:"Mid-circuit measurements",qccsw:"3.1.0",qiskit:!0,qrisp:!0,cirq:!0,cudaq:!0},{name:"Classically controlled gates",qccsw:"3.1.0",qiskit:{tutorial:"https://docs.meetiqm.com/iqm-client/user_guide_qiskit.html#classically-controlled-gates"},qrisp:!0,cirq:{tutorial:"https://docs.meetiqm.com/cirq-iqm/user_guide.html#classical-control"},cudaq:!1},{name:v.jsx(hn,{content:"Increase throughput by batching circuits that all read out the same qubits.",children:"Batched execution "}),qccsw:"1.0.0",qiskit:!0,cirq:!0,cudaq:!0,qrisp:!0},{name:"Dynamical decoupling",qccsw:"3.3.0",qiskit:{tutorial:"https://iqm-finland.github.io/iqm-client/api/iqm.iqm_client.models.CircuitCompilationOptions.html"},cirq:{tutorial:"https://iqm-finland.github.io/iqm-client/api/iqm.iqm_client.models.CircuitCompilationOptions.html"}},{name:v.jsxs("div",{style:{display:"flex"},children:[" ",v.jsx(hn,{content:"Using a secondary detection event to confirm the successful preparation or measurement of a quantum state.",children:" Heralding"})]}),qccsw:"1.0.0",qiskit:{tutorial:"https://iqm-finland.github.io/iqm-client/api/iqm.iqm_client.models.CircuitCompilationOptions.html#iqm.iqm_client.models.CircuitCompilationOptions.heralding_mode"},cirq:{tutorial:"https://iqm-finland.github.io/iqm-client/api/iqm.iqm_client.models.CircuitCompilationOptions.html#iqm.iqm_client.models.CircuitCompilationOptions.heralding_mode"}},{name:"Benchmarking tools",qccsw:"-",qiskit:{tutorial:"https://docs.meetiqm.com/iqm-benchmarks/"}},{name:"Simulated backend",qccsw:"-",qiskit:!0,cirq:"-",cudaq:"-",qrisp:"-"},{name:"Compilation check",qccsw:"1.0.0",qiskit:{tutorial:"https://www.iqmacademy.com/notebookViewer/?path=/notebooks/iqm/garnet/GarnetAlgorithmsChecker.ipynb"},cirq:!0,cudaq:!0,qrisp:!0},{name:"Resetting qubits",qccsw:"3.2.0",qiskit:{tutorial:"https://docs.meetiqm.com/iqm-client/user_guide_qiskit.html#resetting-qubits"},cirq:!1,cudaq:!1,qrisp:!0},{name:v.jsx(hn,{content:"The qubits are actively reset once more using conditional pulses feedback loops before circuit execution.",children:"Automated active reset"}),qccsw:"3.3.0",qiskit:{tutorial:"https://iqm-finland.github.io/iqm-client/api/iqm.iqm_client.models.CircuitCompilationOptions.html#iqm.iqm_client.models.CircuitCompilationOptions.active_reset_cycles"},cirq:{tutorial:"https://iqm-finland.github.io/iqm-client/api/iqm.iqm_client.models.CircuitCompilationOptions.html#iqm.iqm_client.models.CircuitCompilationOptions.active_reset_cycles"}},{name:"Programmatically retrieve calibration data (Resonance)",qccsw:"-",qiskit:{tutorial:"https://www.iqmacademy.com/notebookViewer/?path=/notebooks/iqm/general/RetrieveCalibrationData.ipynb"},cirq:{tutorial:"https://www.iqmacademy.com/notebookViewer/?path=/notebooks/iqm/general/RetrieveCalibrationData.ipynb"},cudaq:{tutorial:"https://www.iqmacademy.com/notebookViewer/?path=/notebooks/iqm/general/RetrieveCalibrationData.ipynb"},qrisp:{tutorial:"https://www.iqmacademy.com/notebookViewer/?path=/notebooks/iqm/general/RetrieveCalibrationData.ipynb"}},{name:"Programmatically retrieve calibration data",qccsw:"-",qiskit:!0,cirq:!0,cudaq:!0,qrisp:!0},{name:"MOVE operation support",qccsw:"3.0.0",qiskit:{tutorial:"https://www.iqmacademy.com/learn/deneb/01-move/"},cirq:{tutorial:"https://www.iqmacademy.com/learn/deneb/01-move/"}}],yp=[{name:"Ready-made experiments",resonance:!1,onprem:!0},{name:"Custom calibrations",resonance:"Coming soon",onprem:!0},{name:"Custom gates",resonance:"Coming soon",onprem:!0},{name:"Pulse Schedule viewer",resonance:"Coming soon",onprem:!0},{name:"Custom compiler stages",resonance:"Coming soon",onprem:!0},{name:"Calibration workflows",resonance:!1,onprem:!0}],On=({framework:c})=>v.jsxs("div",{children:[c?v.jsx(v.Fragment,{children:typeof c=="string"?c:v.jsx(v.Fragment,{children:"✅"})}):v.jsx(v.Fragment,{children:"❌"})," ",c&&c.tutorial&&v.jsx(v.Fragment,{children:v.jsx("a",{href:c.tutorial,target:"_blank",rel:"noreferrer",children:"🔍"})})]}),vp=()=>v.jsx(v.Fragment,{children:v.jsx("main",{children:v.jsxs("div",{className:"container mx-auto",children:[v.jsxs("div",{className:"my-4",children:[v.jsx("p",{children:"IQM Quantum Computers support multiple quantum computing frameworks with support for varying features. Below's list provides an overview of the features supported by IQM Quantum Computers."}),v.jsxs("p",{className:"mt-4",children:["If the feature you require is not listed here, it might not mean it is not supported. Please contact us at ",v.jsx("a",{href:"mailto:support@meetiqm.com",children:"IQM Support"}),"."]})]}),v.jsx("h2",{className:"text-2xl font-semibold mt-8",children:"Gate-based access"}),v.jsx("p",{children:"Click on the 🔍 to access more information."}),v.jsx("div",{className:"overflow-x-auto pt-4 pb-4",children:v.jsxs("table",{className:"min-w-full bg-white rounded-xl",children:[v.jsx("thead",{children:v.jsxs("tr",{children:[v.jsx("th",{className:"py-2 px-4 border-b",children:"FEATURE"}),v.jsx("th",{className:"py-2 px-4 border-b",children:v.jsx("div",{className:"flex items-center",children:v.jsx(hn,{content:v.jsx(v.Fragment,{children:"Earliest version of the Quantum Computer Software Stack needed to support this feature."}),children:"QCCSW"})})}),v.jsx("th",{className:"py-2 px-4 border-b",children:v.jsx(hn,{content:"For supported versions check the quantum computer detail page.",children:"Qiskit"})}),v.jsx("th",{className:"py-2 px-4 border-b",children:v.jsx(hn,{content:"Supported in Resonance via Qiskit-on-IQM.",children:"qrisp"})}),v.jsx("th",{className:"py-2 px-4 border-b",children:v.jsx(hn,{content:"For supported versions check the quantum computer detail page.",children:"Cirq"})}),v.jsx("th",{className:"py-2 px-4 border-b",children:"CUDA-Q"})]})}),v.jsx("tbody",{children:gp.sort((c,l)=>l.qccsw.localeCompare(c.qccsw)).map((c,l)=>v.jsxs("tr",{children:[v.jsx("td",{className:"py-2 px-4 border-b",children:c.name}),v.jsxs("td",{className:"py-2 px-4 border-b",children:[typeof c.qccsw=="string"&&/\d/.test(c.qccsw[0])&&v.jsx(v.Fragment,{children:"≥"})," ",c.qccsw]}),v.jsx("td",{className:"py-2 px-4 border-b",children:v.jsx(On,{framework:c.qiskit})}),v.jsx("td",{className:"py-2 px-4 border-b",children:v.jsx(On,{framework:c.qrisp})}),v.jsx("td",{className:"py-2 px-4 border-b",children:v.jsx(On,{framework:c.cirq})}),v.jsx("td",{className:"py-2 px-4 border-b",children:v.jsx(On,{framework:c.cudaq})})]},l))})]})}),v.jsxs("div",{className:"my-8",children:[v.jsx("h2",{className:"text-2xl font-semibold",children:"Pulse-based access"}),v.jsx("div",{className:"overflow-x-auto",children:v.jsxs("table",{className:"min-w-full bg-white rounded-xl mt-4",children:[v.jsx("thead",{children:v.jsxs("tr",{children:[v.jsx("th",{className:"py-2 px-4 border-b",children:"FEATURE"}),v.jsx("th",{className:"py-2 px-4 border-b",children:"RESONANCE"}),v.jsx("th",{className:"py-2 px-4 border-b",children:"ON-PREMISE DEVICES"})]})}),v.jsx("tbody",{children:yp.sort((c,l)=>{const s=typeof c.name=="string"?c.name:c.name.props.children[0],w=typeof l.name=="string"?l.name:l.name.props.children[0];return s.localeCompare(w)}).map((c,l)=>v.jsxs("tr",{children:[v.jsx("td",{className:"py-2 px-4 border-b",children:c.name}),v.jsx("td",{className:"py-2 px-4 border-b justify-items-center",children:v.jsx(On,{framework:c.resonance})}),v.jsx("td",{className:"py-2 px-4 border-b justify-items-center",children:v.jsx(On,{framework:c.onprem})})]},l))})]})})]})]})})});function wp(){const[c,l]=ze.useState(!1),[s,w]=ze.useState(""),[y,x]=ze.useState(za),C=new jn(za,{keys:["title","description","package"],threshold:.4});ze.useEffect(()=>{const P=R=>{(R.metaKey||R.ctrlKey)&&R.key==="k"&&(R.preventDefault(),l(!0)),R.key==="Escape"&&l(!1)};return window.addEventListener("keydown",P),()=>window.removeEventListener("keydown",P)},[]),ze.useEffect(()=>{if(s){const P=C.search(s);x(P.map(R=>R.item))}else x(za)},[s]);const I=()=>{l(!0)},[q,M]=ze.useState(!0),Q=[{href:"./iqm-pulse",title:"IQM Pulse",description:"Interface and implementations for control pulses."},{href:"./iqm-pulla",title:"IQM Pulla",description:"Pulse-level access library for compiling quantum circuits."},{href:"./iqm-benchmarks/",title:"IQM Benchmarks",description:"Quantum Characterization, Verification, and Validation (QCVV) tools for quantum computing."},{href:"./iqm-client/",title:"IQM Client",description:"Python client for remote access to quantum computers for circuit-level access (e.g. via Qiskit, Cirq)."},{href:"./iqm-station-control-client",title:"IQM Station Control Client",description:"Python client for remote access to quantum computers for pulse-level access."},{href:"./iqm-exa-common",title:"IQM EXA Common",description:"Abstract interfaces, helpers, utility classes, etc."},{href:"./iqm-data-definitions",title:"IQM Data Definitions",description:"A common place for data definitions shared inside IQM."}];return v.jsx("div",{className:"min-h-screen px-8 py-3",children:v.jsxs("div",{className:"mx-auto",children:[v.jsxs("div",{className:"flex flex-col sm:flex-row mb-4 sm:gap-2 lg:gap-[8rem]",children:[v.jsx(hp,{}),v.jsxs("div",{className:"flex gap-4",children:[v.jsxs("button",{className:"relative px-4 pt-2",onClick:()=>M(!0),children:["Documentation",v.jsx("span",{className:`block h-[0.2rem] ml-4 mr-4 ${q?"bg-green-500":"bg-transparent"} absolute bottom-0 left-0 right-0`})]}),v.jsxs("button",{className:"relative px-4 pt-2",onClick:()=>M(!1),children:["Features",v.jsx("span",{className:`block h-[0.2rem] ml-4 mr-4 ${q?"bg-transparent":"bg-green-500"} absolute bottom-0 left-0 right-0`})]})]})]}),v.jsxs("div",{className:"max-w-4xl mx-auto",children:[v.jsxs("div",{onClick:I,className:"mt-6 mb-6 flex items-center gap-2 p-3 bg-white border border-gray-200 rounded-lg cursor-pointer hover:border-gray-300 transition-colors",children:[v.jsx(ic,{className:"w-5 h-5 text-gray-400"}),v.jsxs("span",{className:"text-gray-500",children:["Search all documentation... ",navigator.userAgent.includes("Mac")?"Press ⌘K":"Press Ctrl+K"]})]}),q?v.jsxs(v.Fragment,{children:[v.jsxs("p",{children:["Find below the documentation for IQM client-side libraries that can be used to connect to "," ",v.jsx("a",{href:"https://resonance.meetiqm.com",target:"_blank",children:"IQM Resonance"})," and any IQM on-premise quantum computer."]}),v.jsx("div",{className:"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mt-8",children:Q.map((P,R)=>v.jsxs("a",{href:P.href,target:"_blank",className:"p-6 bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow",children:[v.jsx("h2",{className:"text-lg font-semibold text-gray-900",children:P.title}),v.jsx("p",{className:"mt-2 text-sm text-gray-600",children:P.description})]},R))})]}):v.jsx(vp,{}),c&&v.jsx("div",{className:"fixed inset-0 bg-black bg-opacity-50 flex items-start justify-center pt-[15vh] z-50",children:v.jsxs("div",{className:"bg-white rounded-xl shadow-2xl w-full max-w-2xl max-h-[70vh] overflow-hidden",children:[v.jsxs("div",{className:"p-4 border-b border-gray-100 flex items-center gap-3",children:[v.jsx(ic,{className:"w-5 h-5 text-gray-400"}),v.jsx("input",{type:"text",autoFocus:!0,placeholder:"Search documentation...",className:"flex-1 outline-none text-gray-900",value:s,onChange:P=>w(P.target.value)}),v.jsx("button",{onClick:()=>l(!1),className:"p-1 hover:bg-gray-100 rounded-md transition-colors",children:v.jsx(lp,{className:"w-5 h-5 text-gray-500"})})]}),v.jsx("div",{className:"overflow-y-auto max-h-[calc(70vh-4rem)]",children:y.map((P,R)=>v.jsxs("a",{href:"."+P.url,target:"_blank",className:"block p-4 hover:bg-gray-50 transition-colors overflow-hidden",children:[v.jsx("h3",{className:"font-medium text-gray-900",children:P.title}),v.jsx("span",{className:"text-sm text-gray-500 block mt-1",children:P.package}),v.jsx("p",{className:"text-sm text-gray-600 mt-1",children:P.description})]},R))})]})})]}),v.jsxs("footer",{className:"mt-8 text-center text-sm text-gray-500 border-gray-300 border-t pt-4",children:[v.jsx("span",{children:"Copyright IQM Quantum Computers 2021-2025."}),v.jsx("br",{}),v.jsxs("span",{children:["Need assistance? Contact us ",v.jsx("a",{href:"mailto:support@meetiqm.com",children:"support@meetiqm.com"})]})]})]})})}xm.createRoot(document.getElementById("root")).render(v.jsx(ze.StrictMode,{children:v.jsx(wp,{})}));
