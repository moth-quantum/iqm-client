[
  {
    "package": "iqm-exa-common",
    "title": "API documentation: exa-common",
    "url": "/iqm-exa-common/index.html",
    "description": "26.13 2025-04-15 This documentation describes the common library of the Experiment Automation ( EXA ) project. exa-common contains classes and functions that are shared by EXA , Cortex and Station Con...",
    "content": "26.13 2025-04-15 This documentation describes the common library of the Experiment Automation ( EXA ) project. exa-common contains classes and functions that are shared by EXA , Cortex and Station Control . Index Module Index Search Page next API Reference \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "API Reference",
    "url": "/iqm-exa-common/API.html",
    "description": "exa.common Shared errors, helpers, control structures, settings, API models etc. previous API documentation: exa-common next common \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated o...",
    "content": "exa.common Shared errors, helpers, control structures, settings, API models etc. previous API documentation: exa-common next common \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.server_errors.UnauthorizedError",
    "url": "/iqm-exa-common/api/exa.common.errors.server_errors.UnauthorizedError.html",
    "description": "Error raised when the user is not authorized. message ( str ) \u2013 previous exa.common.errors.server_errors.StationControlError next exa.common.errors.server_errors.ValidationError \u00a9 Copyright 2019-2025,...",
    "content": "Error raised when the user is not authorized. message ( str ) \u2013 previous exa.common.errors.server_errors.StationControlError next exa.common.errors.server_errors.ValidationError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "helpers",
    "url": "/iqm-exa-common/api/exa.common.helpers.html",
    "description": "Miscellaneous helper functionality. Full path: exa.common.helpers Subpackages and modules deprecation  previous exa.common.errors.server_errors.ValidationError next deprecation \u00a9 Copyright 2019-2025, ...",
    "content": "Miscellaneous helper functionality. Full path: exa.common.helpers Subpackages and modules deprecation  previous exa.common.errors.server_errors.ValidationError next deprecation \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "CHAD",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chad_model.CHAD.html",
    "description": "Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidate...",
    "content": "Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes computational_resonator_names Names of all the computational resonators declared in CHAD data. coupler_names Names of all the couplers declared in CHAD data. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. probe_line_names Names of all the probe lines declared in CHAD data. qubit_names Names of all the qubits declared in CHAD data. mask_set_name  variant  components  Methods filter_qubit_components Filter qubit components from the input components. get_common_coupler_for Convenience method for getting the name of a coupler connecting a pair of components. get_component Get component by component name. get_coupler_mapping_for Get the coupler-component mapping for the couplers that connects to at least two components get_probe_line_mapping_for Get the probe line-component mapping. get_probe_line_names_for Get probe lines for given qubits in CHAD data. group_components_per_default_operations Groups given qubits/couplers based on their defined default operations. mask_set_name ( str ) \u2013 variant ( str ) \u2013 components ( Components ) \u2013 Get component by component name. component_name ( str ) \u2013 Component Names of all the qubits declared in CHAD data. Names of all the couplers declared in CHAD data. Names of all the probe lines declared in CHAD data. Names of all the computational resonators declared in CHAD data. Filter qubit components from the input components. component_names ( Collection [ str ] ) \u2013 list [ str ] Get probe lines for given qubits in CHAD data. component_names ( Collection [ str ] ) \u2013 list [ str ] Groups given qubits/couplers based on their defined default operations. The default operations that can be deducted from a CHAD are readout , drive , and flux . component_names ( Collection [ str ] ) \u2013 The component names to which to do the grouping.\nOther components present in the CHAD will not be included in the returned data. Tuple of qubits and couplers mapped to their connected default operations. The data is in the form of a dict with the keys being readout , drive , and flux ,\nand the values the list of component names having that particular operation. The data is in the form of a dict with the keys being readout , drive , and flux ,\nand the values the list of component names having that particular operation. tuple [ dict [ str , list [ str ]], dict [ str , list [ str ]]] in the given qubits. component_names ( Collection [ str ] ) \u2013 The qubit names. May contain any number of qubits. Coupler names mapped to the components they connect. - ValueError \u2013 If the provided qubit name list contains duplicates. dict [ str , list [ str ]] Get the probe line-component mapping. component_names ( Collection [ str ] ) \u2013 The qubit names. May contain any number of qubits. dict [ str , list [ str ]] Convenience method for getting the name of a coupler connecting a pair of components. first_component ( str ) \u2013 The name of the first component. second_component ( str ) \u2013 The name of the second component.\nThe order of qubits does not matter, i.e. the first_qubit and second_qubit arguments are interchangeable. The name of the coupler that connects the inputted components. The name of the coupler that connects the inputted components. - ValueError \u2013 If there were no couplers or more than one coupler connecting the component pair (the latter\n    should not be possible in a realistic chip). str Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous chad_model next Component \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "chip_topology",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chip_topology.html",
    "description": "Chip topology class for parsing CHAD and other QPU related data into human-usable form. Full path: exa.common.qcm_data.chip_topology Functions sort_components (components) Sort the given components in...",
    "content": "Chip topology class for parsing CHAD and other QPU related data into human-usable form. Full path: exa.common.qcm_data.chip_topology Functions sort_components (components) Sort the given components in a human-readable way. sort_couplers (couplers) Sort the given couplers in a human-readable way. Classes ChipTopology Topology information for a chip (typically a QPU). Inheritance previous Qubit next exa.common.qcm_data.chip_topology.sort_components \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.logger.logger.init_loggers",
    "url": "/iqm-exa-common/api/exa.common.logger.logger.init_loggers.html",
    "description": "Set the log level of given logger names. Logs with INFO or DEBUG logging levels are written into stdout, and logs with other levels are written into stderr. By default, the root logger uses WARNING le...",
    "content": "Set the log level of given logger names. Logs with INFO or DEBUG logging levels are written into stdout, and logs with other levels are written into stderr. By default, the root logger uses WARNING level. See Python\u2019s logging module for possible logging levels. loggers ( dict [ str , str | None ] | None ) \u2013 A mapping from logger name to (case insensitive) logging level. If logging level is None or empty\nstring, default_level will be used for that logger. It is possible to fine tune logging for individual\nmodules, since logger propagation is turned off. Overriding works both ways: a parent logger can have higher\nlogging level than its descendants, and vice versa.\nFor example, {\"sqlalchemy\": None, \"sqlalchemy.engine\": \"debug\"} will put\n\u201csqlalchemy\u201d and its descendants (i.e. \u201csqlalchemy.dialects\u201d, \u201csqlalchemy.dialects.sqlite\u201d, etc.) into default_level , except for \u201csqlalchemy.engine\u201d for which DEBUG level is defined.\nFor the root logger, use empty string key, for example: {\"\": \"INFO\"} .\nIf empty dict or None is given, only the root logger will be initialized to its default WARNING level. default_level ( str ) \u2013 The default level (case insensitive) to be used for logger names given with loggers for which a level is not specified. verbose ( bool ) \u2013 If False, :const: BRIEF format will be used for log messages, otherwise :const: VERBOSE . extra_info_getter ( Callable [ [ ] , str ] | None ) \u2013 Optional callable to convey extra information to log messages. It will get called before\neach log message emission and the output will get appended to the log message. None previous logger next ExtraFormatter \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "Coupler",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chad_model.Coupler.html",
    "description": "Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form...",
    "content": "Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  connections  Methods name ( str ) \u2013 connections ( tuple [ str , ... ] ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous ComputationalResonator next Launcher \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "Components",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chad_model.Components.html",
    "description": "Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidate...",
    "content": "Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes all  model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. qubits  couplers  probe_lines  launchers  computational_resonators  Methods sort_components  qubit ( tuple [ Qubit , ... ] ) \u2013 tunable_coupler ( tuple [ Coupler , ... ] ) \u2013 probe_line ( tuple [ ProbeLine , ... ] ) \u2013 launcher ( tuple [ Launcher , ... ] ) \u2013 computational_resonator ( tuple [ ComputationalResonator , ... ] ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous Component next ComputationalResonator \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "ChipTopology",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chip_topology.ChipTopology.html",
    "description": "Bases: object Topology information for a chip (typically a QPU). Can represent the information found in a CHAD, as well as locus mappings for gates. qubits ( Iterable [ str ] ) \u2013 names of the qubits. ...",
    "content": "Bases: object Topology information for a chip (typically a QPU). Can represent the information found in a CHAD, as well as locus mappings for gates. qubits ( Iterable [ str ] ) \u2013 names of the qubits. computational_resonators ( Iterable [ str ] ) \u2013 names of the computational resonators. couplers ( dict [ str , Iterable [ str ] ] ) \u2013 mapping from coupler name to names of chip components it connects to. probe_lines ( dict [ str , Iterable [ str ] ] ) \u2013 mapping from probe line name to names of chip components it connects to. variant ( str ) \u2013 identifier of the QPU design variant. Module: exa.common.qcm_data.chip_topology Attributes computational_resonators Computational resonators on the chip, in any order. computational_resonators_sorted Computational resonators on the chip, sorted. couplers Tunable couplers on the chip, in any order. couplers_sorted Tunable couplers on the chip, sorted by numerical IDs. probe_lines Probe lines on the chip, in any order. probe_lines_sorted Probe lines on the chip, sorted. all_components All components on the chip. coupler_to_components Map from each coupler to all other components it connects to. component_to_couplers Map from each component to all couplers connected to it. probe_line_to_components Map from each probe line to all components it connects to. component_to_probe_line Map from each component to the probeline connected to it. Methods from_chad Construct a ChipTopology instance from a CHAD. from_chip_design_record Construct a ChipTopology instance from a raw Chip design record. get_all_common_resonators Computational resonators connected to all the given qubits via a coupler. get_common_computational_resonator Convenience method for getting the name of a computational resonator which is connected to both specified qubit components via tunable couplers. get_connected_probe_lines Get probelines that are connected to any of the given components. get_connecting_couplers Couplers that only connect to the given chip components, and connect at least two of them. get_coupler_for Common coupler for the given chip components (e.g. qubit or computational resonator). get_loci Gives all the loci of a given gate. get_neighbor_couplers Couplers that connect to at least one of the given chip components. get_neighbor_locus_components Chip components that are connected to the given components by a coupler, but not included in them. is_computational_resonator True iff the given component is a computational resonator. is_coupler True iff the given component is a coupler. is_probe_line True iff the given component is a probe line. is_qubit True iff the given component is a qubit. limit_values Prunes the given dictionary (e.g. a coupler-to-qubits map) to a subset of values. map_locus Returns the mapped components for the given locus and the given gate. map_to_locus Returns the locus that is mapped to the given components. set_locus_mapping Add a custom mapping from a gate locus to a set of components required for the gate operation. Computational resonators on the chip, in any order. Computational resonators on the chip, sorted. Tunable couplers on the chip, in any order. Tunable couplers on the chip, sorted by numerical IDs. Probe lines on the chip, in any order. Probe lines on the chip, sorted. All components on the chip. Map from each coupler to all other components it connects to. The values are sorted. Map from each component to all couplers connected to it. Map from each probe line to all components it connects to. Map from each component to the probeline connected to it.\nMax 1 connection per component is assumed.\nComponents without connection to a probe line don\u2019t appear. Construct a ChipTopology instance from a raw Chip design record. record ( dict ) \u2013 Record as returned by Station control. Corresponding chip topology ChipTopology Construct a ChipTopology instance from a CHAD. Use from_chip_design_record() if possible. chad ( CHAD ) \u2013 parsed CHAD model corresponding chip topology ChipTopology Couplers that connect to at least one of the given chip components. components ( Iterable [ str ] ) \u2013 some chip components, typically qubits and computational resonators couplers that connect to at least one of components set [ str ] Couplers that only connect to the given chip components, and connect at least two of them. Equivalent to returning the edges in the components -induced\nsubgraph of the coupling topology. components ( Collection [ str ] ) \u2013 some chip components, typically qubits and computational resonators couplers that connect to only members of components , and to at least two of them set [ str ] Common coupler for the given chip components (e.g. qubit or computational resonator). component_1 ( str ) \u2013 first component component_2 ( str ) \u2013 second component the common coupler ValueError \u2013 the given components have zero or more than one connecting coupler str Chip components that are connected to the given components by a coupler, but not included in them. components ( Collection [ str ] ) \u2013 some chip components, typically qubits and computational resonators components that are connected to components by a coupler, but not included in them set [ str ] Get probelines that are connected to any of the given components. components ( Collection [ str ] ) \u2013 set [ str ] Prunes the given dictionary (e.g. a coupler-to-qubits map) to a subset of values. Used to prune e.g. coupler_to_components to a subset of relevant elements. dct ( ComponentMap ) \u2013 Dictionary of collections of values. limit_to ( Collection [ str ] ) \u2013 Components to limit the output to. The input dictionary, but only with key-value pairs where the value intersects with limit_to . ComponentMap True iff the given component is a qubit. component ( str ) \u2013 bool True iff the given component is a coupler. component ( str ) \u2013 bool True iff the given component is a probe line. component ( str ) \u2013 bool True iff the given component is a computational resonator. component ( str ) \u2013 bool Add a custom mapping from a gate locus to a set of components required for the gate operation. The mapping is of the form {<locus>: <components mapped to locus>}, where a locus can be mapped to one or more\ncomponents. The locus itself can be a frozenset (denoting a symmetric gate) or a tuple (non-symmetric gate). Some examples:\n- DEFAULT_2QB_MAPPING (added in __init__() ) maps pairs of qubits to their common coupler symmetrically.\n- Fast flux CZ-gate maps pairs of qubits to their couplers non-symmetrically (first locus qubit can perform flux pulses).\n- A two-qubit gate implementation that includes playing pulses on neighboring components in addition to the connecting coupler. name ( str ) \u2013 The name for the gate & implementation this locus mapping represents (typically in the format \"<gate name>.<implementation name>\" ). mapping ( dict [ tuple [ str , ... ] | frozenset [ str ] , tuple [ str , ... ] ] ) \u2013 The locus mapping to be added. None Validate that the components given in mapping are found in self and the mapping is correctly formed. mapping ( dict [ str | tuple [ str ] , tuple [ str , ... ] | frozenset [ str ] ] | None ) \u2013 None Returns the mapped components for the given locus and the given gate. If the locus or the gate is not found from the locus mappings of self, returns None. locus ( tuple [ str , ... ] | frozenset [ str ] ) \u2013 The locus to map. name ( str | None ) \u2013 The name for the gate & implementation with which to map the locus (typically in the format \"<gate name>.<implementation name>\" ). The components mapped to the given locus or None if locus is not found in the given mapping. str | tuple [ str ] | None Returns the locus that is mapped to the given components. mapped ( str | tuple [ str ] ) \u2013 The mapped components. name ( str ) \u2013 The name for the gate & implementation with which to map the locus (typically in the format \"<gate name>.<implementation name>\" ). The locus mapped to the given components or None if the components are not mapped to any locus. tuple [ str , \u2026] | frozenset [ str ] | None Gives all the loci of a given gate. If no mapping with the given the name nor a default mapping with the given dimensionality is found,\nreturns an empty list. name ( str ) \u2013 The name for the gate & implementation with which to map the locus (typically in the format \"<gate name>.<implementation name>\" ). default_mapping_dimension ( int | None ) \u2013 If provided, will return the loci of the default mapping of the given\ndimensionality in case no mapping for name can be found. The loci associated with the given gate. list [ tuple [ str , \u2026] | frozenset [ str ]] Convenience method for getting the name of a computational resonator which is connected to both specified\nqubit components via tunable couplers. first_qubit ( str ) \u2013 The name of the first qubit. second_qubit ( str ) \u2013 The name of the second qubit. The order of qubits does not matter, i.e. the first_qubit and second_qubit arguments are interchangeable. The name of the second qubit. The order of qubits does not matter, i.e. the first_qubit and second_qubit arguments are interchangeable. The name of the computational resonator that is connected to both inputted qubits via tunable couplers. The name of the computational resonator that is connected to both inputted qubits via tunable couplers. - ValueError \u2013 If no computational resonator was found that is connected to both qubits via tunable couplers. \u2013 str Computational resonators connected to all the given qubits via a coupler. qubits ( list [ str ] ) \u2013 Qubit names. Names of the computational resonators neighboring all of qubits (can be an empty set). set [ str ] previous exa.common.qcm_data.chip_topology.sort_couplers next file_adapter \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "FileAdapter",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.file_adapter.FileAdapter.html",
    "description": "Bases: BaseAdapter Module: exa.common.qcm_data.file_adapter Methods close Cleans up adapter specific items. send Sends PreparedRequest object. Sends PreparedRequest object. Returns Response object. Cl...",
    "content": "Bases: BaseAdapter Module: exa.common.qcm_data.file_adapter Methods close Cleans up adapter specific items. send Sends PreparedRequest object. Sends PreparedRequest object. Returns Response object. Cleans up adapter specific items. previous file_adapter next immutable_base_model \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa_error",
    "url": "/iqm-exa-common/api/exa.common.errors.exa_error.html",
    "description": "Full path: exa.common.errors.exa_error Exceptions EmptyComponentListError (message,\u00a0*args) Error raised when an empty list is given as components for running an experiment. ExaError (message,\u00a0*args) B...",
    "content": "Full path: exa.common.errors.exa_error Exceptions EmptyComponentListError (message,\u00a0*args) Error raised when an empty list is given as components for running an experiment. ExaError (message,\u00a0*args) Base class for exa errors. InvalidSweepOptionsTypeError (**kwargs) The type of sweep options is invalid. UnknownSettingError (message,\u00a0*args) This SettingNode does not have a given key. previous errors next exa.common.errors.exa_error.EmptyComponentListError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.exa_error.InvalidSweepOptionsTypeError",
    "url": "/iqm-exa-common/api/exa.common.errors.exa_error.InvalidSweepOptionsTypeError.html",
    "description": "The type of sweep options is invalid. previous exa.common.errors.exa_error.ExaError next exa.common.errors.exa_error.UnknownSettingError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last upda...",
    "content": "The type of sweep options is invalid. previous exa.common.errors.exa_error.ExaError next exa.common.errors.exa_error.UnknownSettingError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "sweep",
    "url": "/iqm-exa-common/api/exa.common.sweep.html",
    "description": "Sweep utilities. Full path: exa.common.sweep Subpackages and modules previous QCMDataClient next Changelog \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15....",
    "content": "Sweep utilities. Full path: exa.common.sweep Subpackages and modules previous QCMDataClient next Changelog \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "qcm_data_client",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.qcm_data_client.html",
    "description": "QCM (Quantum Computer Management) Data API client implementation. Full path: exa.common.qcm_data.qcm_data_client Classes QCMDataClient Python client for QCM (Quantum Computer Management) Data API. Inh...",
    "content": "QCM (Quantum Computer Management) Data API client implementation. Full path: exa.common.qcm_data.qcm_data_client Classes QCMDataClient Python client for QCM (Quantum Computer Management) Data API. Inheritance previous ImmutableBaseModel next QCMDataClient \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "chad_model",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chad_model.html",
    "description": "Pydantic models for CHAD. Full path: exa.common.qcm_data.chad_model Classes CHAD Create a new model by parsing and validating input data from keyword arguments. Component Create a new model by parsing...",
    "content": "Pydantic models for CHAD. Full path: exa.common.qcm_data.chad_model Classes CHAD Create a new model by parsing and validating input data from keyword arguments. Component Create a new model by parsing and validating input data from keyword arguments. Components Create a new model by parsing and validating input data from keyword arguments. ComputationalResonator Create a new model by parsing and validating input data from keyword arguments. Coupler Create a new model by parsing and validating input data from keyword arguments. Launcher Create a new model by parsing and validating input data from keyword arguments. ProbeLine Create a new model by parsing and validating input data from keyword arguments. Qubit Create a new model by parsing and validating input data from keyword arguments. Inheritance previous qcm_data next CHAD \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.server_errors.NotFoundError",
    "url": "/iqm-exa-common/api/exa.common.errors.server_errors.NotFoundError.html",
    "description": "Error raised when nothing was found with the given parameters. This should be used when it\u2019s expected that something is found, for example when trying to find with an exact ID. message ( str ) \u2013 previ...",
    "content": "Error raised when nothing was found with the given parameters. This should be used when it\u2019s expected that something is found, for example when trying to find with an exact ID. message ( str ) \u2013 previous exa.common.errors.server_errors.InternalServerError next exa.common.errors.server_errors.ServiceUnavailableError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "Qubit",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chad_model.Qubit.html",
    "description": "Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form...",
    "content": "Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  connections  Methods name ( str ) \u2013 connections ( tuple [ str , ... ] ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous ProbeLine next chip_topology \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "logger",
    "url": "/iqm-exa-common/api/exa.common.logger.html",
    "description": "Helper to initialize loggers to the specified logging level. Full path: exa.common.logger Subpackages and modules logger  previous exa.common.helpers.deprecation.format_deprecated next logger \u00a9 Copyri...",
    "content": "Helper to initialize loggers to the specified logging level. Full path: exa.common.logger Subpackages and modules logger  previous exa.common.helpers.deprecation.format_deprecated next logger \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.server_errors.StationControlError",
    "url": "/iqm-exa-common/api/exa.common.errors.server_errors.StationControlError.html",
    "description": "Base class for station control errors used in client-server communication. message ( str ) \u2013 previous exa.common.errors.server_errors.ServiceUnavailableError next exa.common.errors.server_errors.Unaut...",
    "content": "Base class for station control errors used in client-server communication. message ( str ) \u2013 previous exa.common.errors.server_errors.ServiceUnavailableError next exa.common.errors.server_errors.UnauthorizedError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "InfoFilter",
    "url": "/iqm-exa-common/api/exa.common.logger.logger.InfoFilter.html",
    "description": "Bases: Filter Helper class to filter log messages above INFO level. Initialize a filter. Initialize with the name of the logger which, together with its\nchildren, will have its events allowed through ...",
    "content": "Bases: Filter Helper class to filter log messages above INFO level. Initialize a filter. Initialize with the name of the logger which, together with its\nchildren, will have its events allowed through the filter. If no\nname is specified, allow every event. Module: exa.common.logger.logger Methods filter Determine if the specified record is to be logged. Determine if the specified record is to be logged. Returns True if the record should be logged, or False otherwise.\nIf deemed appropriate, the record may be modified in-place. record ( LogRecord ) \u2013 bool previous ExtraFormatter next qcm_data \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.server_errors.ForbiddenError",
    "url": "/iqm-exa-common/api/exa.common.errors.server_errors.ForbiddenError.html",
    "description": "Error raised when the operation is forbidden for the user. message ( str ) \u2013 previous exa.common.errors.server_errors.ConflictError next exa.common.errors.server_errors.InternalServerError \u00a9 Copyright...",
    "content": "Error raised when the operation is forbidden for the user. message ( str ) \u2013 previous exa.common.errors.server_errors.ConflictError next exa.common.errors.server_errors.InternalServerError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "data",
    "url": "/iqm-exa-common/api/exa.common.data.html",
    "description": "Classes for representing physical quantities and instrument settings. Full path: exa.common.data Subpackages and modules base_model  previous sweep next base_model \u00a9 Copyright 2019-2025, IQM Finland O...",
    "content": "Classes for representing physical quantities and instrument settings. Full path: exa.common.data Subpackages and modules base_model  previous sweep next base_model \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "ImmutableBaseModel",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.immutable_base_model.ImmutableBaseModel.html",
    "description": "Bases: BaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form...",
    "content": "Bases: BaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.immutable_base_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Methods Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous immutable_base_model next qcm_data_client \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "common",
    "url": "/iqm-exa-common/api/exa.common.html",
    "description": "Shared errors, helpers, control structures, settings, API models etc. Full path: exa.common Subpackages and modules api API helpers. control Common data structures of abstract instrument control. data...",
    "content": "Shared errors, helpers, control structures, settings, API models etc. Full path: exa.common Subpackages and modules api API helpers. control Common data structures of abstract instrument control. data Classes for representing physical quantities and instrument settings. errors Common error messages. helpers Miscellaneous helper functionality. logger Helper to initialize loggers to the specified logging level. qcm_data  sweep Sweep utilities. previous API Reference next api \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "qcm_data",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.html",
    "description": "Full path: exa.common.qcm_data Subpackages and modules chad_model Pydantic models for CHAD. chip_topology Chip topology class for parsing CHAD and other QPU related data into human-usable form. file_a...",
    "content": "Full path: exa.common.qcm_data Subpackages and modules chad_model Pydantic models for CHAD. chip_topology Chip topology class for parsing CHAD and other QPU related data into human-usable form. file_adapter  immutable_base_model  qcm_data_client QCM (Quantum Computer Management) Data API client implementation. previous InfoFilter next chad_model \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "Launcher",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chad_model.Launcher.html",
    "description": "Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form...",
    "content": "Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. pin  function  name  connections  Methods name ( str ) \u2013 connections ( tuple [ str , ... ] ) \u2013 pin ( str ) \u2013 function ( str ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous Coupler next ProbeLine \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "base_model",
    "url": "/iqm-exa-common/api/exa.common.data.base_model.html",
    "description": "Full path: exa.common.data.base_model Classes BaseModel Pydantic base model to change the behaviour of pydantic globally. Inheritance previous data next BaseModel \u00a9 Copyright 2019-2025, IQM Finland Oy...",
    "content": "Full path: exa.common.data.base_model Classes BaseModel Pydantic base model to change the behaviour of pydantic globally. Inheritance previous data next BaseModel \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.exa_error.EmptyComponentListError",
    "url": "/iqm-exa-common/api/exa.common.errors.exa_error.EmptyComponentListError.html",
    "description": "Error raised when an empty list is given as components for running an experiment. message ( str ) \u2013 previous exa_error next exa.common.errors.exa_error.ExaError \u00a9 Copyright 2019-2025, IQM Finland Oy, ...",
    "content": "Error raised when an empty list is given as components for running an experiment. message ( str ) \u2013 previous exa_error next exa.common.errors.exa_error.ExaError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "server_errors",
    "url": "/iqm-exa-common/api/exa.common.errors.server_errors.html",
    "description": "Errors used in the client-server communication. Full path: exa.common.errors.server_errors Exceptions BadRequestError (message,\u00a0*args) Error raised when the request syntax is invalid or the method is ...",
    "content": "Errors used in the client-server communication. Full path: exa.common.errors.server_errors Exceptions BadRequestError (message,\u00a0*args) Error raised when the request syntax is invalid or the method is unsupported in general. ConflictError (message,\u00a0*args) This error happens when there is a conflict with the current state of the resource. ForbiddenError (message,\u00a0*args) Error raised when the operation is forbidden for the user. InternalServerError (message,\u00a0*args) Error raised when an unexpected error happened on the server side. NotFoundError (message,\u00a0*args) Error raised when nothing was found with the given parameters. ServiceUnavailableError (message,\u00a0*args) Error raised when the service is unavailable. StationControlError (message,\u00a0*args) Base class for station control errors used in client-server communication. UnauthorizedError (message,\u00a0*args) Error raised when the user is not authorized. ValidationError (message,\u00a0*args) Error raised when something is unprocessable in general, for example if the input value is not acceptable. previous exa.common.errors.exa_error.UnknownSettingError next exa.common.errors.server_errors.BadRequestError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.qcm_data.chip_topology.sort_components",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chip_topology.sort_components.html",
    "description": "Sort the given components in a human-readable way. components ( Iterable [ str ] ) \u2013 list [ str ] previous chip_topology next exa.common.qcm_data.chip_topology.sort_couplers \u00a9 Copyright 2019-2025, IQM...",
    "content": "Sort the given components in a human-readable way. components ( Iterable [ str ] ) \u2013 list [ str ] previous chip_topology next exa.common.qcm_data.chip_topology.sort_couplers \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.helpers.deprecation.format_deprecated",
    "url": "/iqm-exa-common/api/exa.common.helpers.deprecation.format_deprecated.html",
    "description": "old ( str ) \u2013 new ( str | None ) \u2013 since ( str ) \u2013 LiteralString previous deprecation next logger \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15....",
    "content": "old ( str ) \u2013 new ( str | None ) \u2013 since ( str ) \u2013 LiteralString previous deprecation next logger \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "control",
    "url": "/iqm-exa-common/api/exa.common.control.html",
    "description": "Common data structures of abstract instrument control. Full path: exa.common.control Subpackages and modules sweep Classes for sweep specification. previous api next sweep \u00a9 Copyright 2019-2025, IQM F...",
    "content": "Common data structures of abstract instrument control. Full path: exa.common.control Subpackages and modules sweep Classes for sweep specification. previous api next sweep \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.server_errors.ConflictError",
    "url": "/iqm-exa-common/api/exa.common.errors.server_errors.ConflictError.html",
    "description": "This error happens when there is a conflict with the current state of the resource. For example, when doing duplicate submissions for the same unique data. message ( str ) \u2013 previous exa.common.errors...",
    "content": "This error happens when there is a conflict with the current state of the resource. For example, when doing duplicate submissions for the same unique data. message ( str ) \u2013 previous exa.common.errors.server_errors.BadRequestError next exa.common.errors.server_errors.ForbiddenError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "api",
    "url": "/iqm-exa-common/api/exa.common.api.html",
    "description": "API helpers. Full path: exa.common.api Subpackages and modules previous common next control \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15....",
    "content": "API helpers. Full path: exa.common.api Subpackages and modules previous common next control \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "deprecation",
    "url": "/iqm-exa-common/api/exa.common.helpers.deprecation.html",
    "description": "Full path: exa.common.helpers.deprecation Functions format_deprecated (old,\u00a0new,\u00a0since)  previous helpers next exa.common.helpers.deprecation.format_deprecated \u00a9 Copyright 2019-2025, IQM Finland Oy, R...",
    "content": "Full path: exa.common.helpers.deprecation Functions format_deprecated (old,\u00a0new,\u00a0since)  previous helpers next exa.common.helpers.deprecation.format_deprecated \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "Component",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chad_model.Component.html",
    "description": "Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidate...",
    "content": "Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  connections  Methods sort  name ( str ) \u2013 connections ( tuple [ str , ... ] ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous CHAD next Components \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.server_errors.BadRequestError",
    "url": "/iqm-exa-common/api/exa.common.errors.server_errors.BadRequestError.html",
    "description": "Error raised when the request syntax is invalid or the method is unsupported in general. message ( str ) \u2013 previous server_errors next exa.common.errors.server_errors.ConflictError \u00a9 Copyright 2019-20...",
    "content": "Error raised when the request syntax is invalid or the method is unsupported in general. message ( str ) \u2013 previous server_errors next exa.common.errors.server_errors.ConflictError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "immutable_base_model",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.immutable_base_model.html",
    "description": "Full path: exa.common.qcm_data.immutable_base_model Classes ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Inheritance previous FileAdapter next Imm...",
    "content": "Full path: exa.common.qcm_data.immutable_base_model Classes ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Inheritance previous FileAdapter next ImmutableBaseModel \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "sweep",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.html",
    "description": "Classes for sweep specification. Full path: exa.common.control.sweep Subpackages and modules previous control next data \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15...",
    "content": "Classes for sweep specification. Full path: exa.common.control.sweep Subpackages and modules previous control next data \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.server_errors.ValidationError",
    "url": "/iqm-exa-common/api/exa.common.errors.server_errors.ValidationError.html",
    "description": "Error raised when something is unprocessable in general, for example if the input value is not acceptable. message ( str ) \u2013 previous exa.common.errors.server_errors.UnauthorizedError next helpers \u00a9 C...",
    "content": "Error raised when something is unprocessable in general, for example if the input value is not acceptable. message ( str ) \u2013 previous exa.common.errors.server_errors.UnauthorizedError next helpers \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.exa_error.UnknownSettingError",
    "url": "/iqm-exa-common/api/exa.common.errors.exa_error.UnknownSettingError.html",
    "description": "This SettingNode does not have a given key. message ( str ) \u2013 previous exa.common.errors.exa_error.InvalidSweepOptionsTypeError next server_errors \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13....",
    "content": "This SettingNode does not have a given key. message ( str ) \u2013 previous exa.common.errors.exa_error.InvalidSweepOptionsTypeError next server_errors \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "BaseModel",
    "url": "/iqm-exa-common/api/exa.common.data.base_model.BaseModel.html",
    "description": "Bases: BaseModel Pydantic base model to change the behaviour of pydantic globally.\nNote that setting model_config in child classes will merge the configs rather than override this one. https://docs.py...",
    "content": "Bases: BaseModel Pydantic base model to change the behaviour of pydantic globally.\nNote that setting model_config in child classes will merge the configs rather than override this one. https://docs.pydantic.dev/latest/concepts/config/#change-behaviour-globally Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.data.base_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Methods copy Returns a copy of the model. model_copy Returns a copy of the model. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Returns a copy of the model. Overrides the Pydantic default \u2018model_copy\u2019 to set \u2018deep=True\u2019 by default. update ( dict [ str , Any ] | None ) \u2013 deep ( bool ) \u2013 Self Returns a copy of the model. Self previous base_model next errors \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "ProbeLine",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chad_model.ProbeLine.html",
    "description": "Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form...",
    "content": "Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  connections  Methods name ( str ) \u2013 connections ( tuple [ str , ... ] ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous Launcher next Qubit \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "file_adapter",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.file_adapter.html",
    "description": "Full path: exa.common.qcm_data.file_adapter Classes FileAdapter  Inheritance previous ChipTopology next FileAdapter \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15....",
    "content": "Full path: exa.common.qcm_data.file_adapter Classes FileAdapter  Inheritance previous ChipTopology next FileAdapter \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "QCMDataClient",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.qcm_data_client.QCMDataClient.html",
    "description": "Bases: object Python client for QCM (Quantum Computer Management) Data API. root_url ( str ) \u2013 URL pointing to QCM Data service.\nThis URL can point to a local file storage as well.\nIn that case, the U...",
    "content": "Bases: object Python client for QCM (Quantum Computer Management) Data API. root_url ( str ) \u2013 URL pointing to QCM Data service.\nThis URL can point to a local file storage as well.\nIn that case, the URL should point to a directory which\nhas a directory structure identical to QCM Data service (for example /chip-data-records/),\nand files containing data in identical format returned by QCM Data service.\nFor example, CHAD files should be named {chip_label}.json, like M156_W531_A09_L09.json, and contain\na list instead of a single object. fallback_root_url ( str ) \u2013 Same as root_url , used if a query via root_url returns nothing. Module: exa.common.qcm_data.qcm_data_client Attributes root_url Returns the remote QCM Data service URL. Methods get_chip_design_record Get a raw chip design record matching the given chip label. Returns the remote QCM Data service URL. Get a raw chip design record matching the given chip label. chip_label ( str ) \u2013 Chip label. Data record matching the given chip label. dict previous qcm_data_client next sweep \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.server_errors.InternalServerError",
    "url": "/iqm-exa-common/api/exa.common.errors.server_errors.InternalServerError.html",
    "description": "Error raised when an unexpected error happened on the server side. This error should never be raised when something expected happens,\nand whenever the client encounters this, it should be considered a...",
    "content": "Error raised when an unexpected error happened on the server side. This error should never be raised when something expected happens,\nand whenever the client encounters this, it should be considered as a server bug. message ( str ) \u2013 previous exa.common.errors.server_errors.ForbiddenError next exa.common.errors.server_errors.NotFoundError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "errors",
    "url": "/iqm-exa-common/api/exa.common.errors.html",
    "description": "Common error messages. Full path: exa.common.errors Subpackages and modules exa_error  server_errors Errors used in the client-server communication. previous BaseModel next exa_error \u00a9 Copyright 2019-...",
    "content": "Common error messages. Full path: exa.common.errors Subpackages and modules exa_error  server_errors Errors used in the client-server communication. previous BaseModel next exa_error \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "ExtraFormatter",
    "url": "/iqm-exa-common/api/exa.common.logger.logger.ExtraFormatter.html",
    "description": "Bases: Formatter Helper formatter class to pass in arbitrary extra information to log messages. Initialize the formatter with specified format strings. Initialize the formatter either with the specifi...",
    "content": "Bases: Formatter Helper formatter class to pass in arbitrary extra information to log messages. Initialize the formatter with specified format strings. Initialize the formatter either with the specified format string, or a\ndefault as described above. Allow for specialized date formatting with\nthe optional datefmt argument. If datefmt is omitted, you get an\nISO8601-like (or RFC 3339-like) format. Use a style parameter of \u2018%\u2019, \u2018{\u2019 or \u2018$\u2019 to specify that you want to\nuse one of %-formatting, str.format() ( {} ) formatting or string.Template formatting in your format string. Changed in version 3.2: Added the style parameter. Module: exa.common.logger.logger Attributes Methods format Format the specified record as text. extra_info_getter ( Callable [ [ ] , str ] | None ) \u2013 Format the specified record as text. The record\u2019s attribute dictionary is used as the operand to a\nstring formatting operation which yields the returned string.\nBefore formatting the dictionary, a couple of preparatory steps\nare carried out. The message attribute of the record is computed\nusing LogRecord.getMessage(). If the formatting string uses the\ntime (as determined by a call to usesTime(), formatTime() is\ncalled to format the event time. If there is exception information,\nit is formatted using formatException() and appended to the message. previous exa.common.logger.logger.init_loggers next InfoFilter \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.qcm_data.chip_topology.sort_couplers",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chip_topology.sort_couplers.html",
    "description": "Sort the given couplers in a human-readable way. couplers ( Iterable [ str ] ) \u2013 list [ str ] previous exa.common.qcm_data.chip_topology.sort_components next ChipTopology \u00a9 Copyright 2019-2025, IQM Fi...",
    "content": "Sort the given couplers in a human-readable way. couplers ( Iterable [ str ] ) \u2013 list [ str ] previous exa.common.qcm_data.chip_topology.sort_components next ChipTopology \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "ComputationalResonator",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chad_model.ComputationalResonator.html",
    "description": "Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form...",
    "content": "Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  connections  Methods name ( str ) \u2013 connections ( tuple [ str , ... ] ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous Components next Coupler \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.server_errors.ServiceUnavailableError",
    "url": "/iqm-exa-common/api/exa.common.errors.server_errors.ServiceUnavailableError.html",
    "description": "Error raised when the service is unavailable. message ( str ) \u2013 previous exa.common.errors.server_errors.NotFoundError next exa.common.errors.server_errors.StationControlError \u00a9 Copyright 2019-2025, I...",
    "content": "Error raised when the service is unavailable. message ( str ) \u2013 previous exa.common.errors.server_errors.NotFoundError next exa.common.errors.server_errors.StationControlError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.exa_error.ExaError",
    "url": "/iqm-exa-common/api/exa.common.errors.exa_error.ExaError.html",
    "description": "Base class for exa errors. message ( str ) \u2013 Error message. previous exa.common.errors.exa_error.EmptyComponentListError next exa.common.errors.exa_error.InvalidSweepOptionsTypeError \u00a9 Copyright 2019-...",
    "content": "Base class for exa errors. message ( str ) \u2013 Error message. previous exa.common.errors.exa_error.EmptyComponentListError next exa.common.errors.exa_error.InvalidSweepOptionsTypeError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-exa-common",
    "title": "logger",
    "url": "/iqm-exa-common/api/exa.common.logger.logger.html",
    "description": "Full path: exa.common.logger.logger Functions init_loggers ([loggers,\u00a0default_level,\u00a0...]) Set the log level of given logger names. Classes ExtraFormatter Helper formatter class to pass in arbitrary e...",
    "content": "Full path: exa.common.logger.logger Functions init_loggers ([loggers,\u00a0default_level,\u00a0...]) Set the log level of given logger names. Classes ExtraFormatter Helper formatter class to pass in arbitrary extra information to log messages. InfoFilter Helper class to filter log messages above INFO level. Inheritance previous logger next exa.common.logger.logger.init_loggers \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.13. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-station-control-client",
    "title": "API documentation: station-control-client",
    "url": "/iqm-station-control-client/index.html",
    "description": "3.15 2025-04-15 This is the documentation of the IQM station-control client library. Index Module Index Search Page next API Reference \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated...",
    "content": "3.15 2025-04-15 This is the documentation of the IQM station-control client library. Index Module Index Search Page next API Reference \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-station-control-client",
    "title": "API Reference",
    "url": "/iqm-station-control-client/API.html",
    "description": "iqm.station_control.client Station control client implementation. iqm.station_control.interface Station control interface. previous API documentation: station-control-client next client \u00a9 Copyright 20...",
    "content": "iqm.station_control.client Station control client implementation. iqm.station_control.interface Station control interface. previous API documentation: station-control-client next client \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-station-control-client",
    "title": "meta_class",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.meta_class.html",
    "description": "Full path: iqm.station_control.client.iqm_server.meta_class Classes IqmServerClientMeta Custom metaclass that automatically adds '<feature> not implemented' stub implementations for all StationControl...",
    "content": "Full path: iqm.station_control.client.iqm_server.meta_class Classes IqmServerClientMeta Custom metaclass that automatically adds '<feature> not implemented' stub implementations for all StationControlClient functions that are not overridden by IqmServerClient. Inheritance previous iqm_server next IqmServerClientMeta \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-station-control-client",
    "title": "testing",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.testing.html",
    "description": "Full path: iqm.station_control.client.iqm_server.testing Subpackages and modules previous IqmServerClientMeta next interface \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-0...",
    "content": "Full path: iqm.station_control.client.iqm_server.testing Subpackages and modules previous IqmServerClientMeta next interface \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-station-control-client",
    "title": "ListWithMeta",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.list_with_meta.ListWithMeta.html",
    "description": "Bases: list Standard list extension holding optional metadata as well. Module: iqm.station_control.interface.list_with_meta Methods items ( Iterable ) \u2013 meta ( Meta ) \u2013 previous list_with_meta next Me...",
    "content": "Bases: list Standard list extension holding optional metadata as well. Module: iqm.station_control.interface.list_with_meta Methods items ( Iterable ) \u2013 meta ( Meta ) \u2013 previous list_with_meta next Meta \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-station-control-client",
    "title": "PydanticBase",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.pydantic_base.PydanticBase.html",
    "description": "Bases: BaseModel Pydantic base model to change the behaviour of pydantic globally.\nNote that setting model_config in child classes will merge the configs rather than override this one. https://docs.py...",
    "content": "Bases: BaseModel Pydantic base model to change the behaviour of pydantic globally.\nNote that setting model_config in child classes will merge the configs rather than override this one. https://docs.pydantic.dev/latest/concepts/config/#change-behaviour-globally Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.pydantic_base Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Methods Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous pydantic_base next Changelog \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-station-control-client",
    "title": "interface",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.html",
    "description": "Station control interface. A StationControlInterface administers a set of control and measurement instruments\nattached to a quantum device, and connects to the database and related external services. ...",
    "content": "Station control interface. A StationControlInterface administers a set of control and measurement instruments\nattached to a quantum device, and connects to the database and related external services. Full path: iqm.station_control.interface Subpackages and modules list_with_meta Models to extend standard list with metadata. pydantic_base Pydantic related models and types. previous testing next list_with_meta \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-station-control-client",
    "title": "list_with_meta",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.list_with_meta.html",
    "description": "Models to extend standard list with metadata. Full path: iqm.station_control.interface.list_with_meta Classes ListWithMeta Standard list extension holding optional metadata as well. Meta Class holding...",
    "content": "Models to extend standard list with metadata. Full path: iqm.station_control.interface.list_with_meta Classes ListWithMeta Standard list extension holding optional metadata as well. Meta Class holding metadata for list return values, like pagination related data. Inheritance previous interface next ListWithMeta \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm_server",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.html",
    "description": "StationControlClient implementation for IQM Server Full path: iqm.station_control.client.iqm_server Subpackages and modules meta_class  testing  previous client next meta_class \u00a9 Copyright 2019-2025, ...",
    "content": "StationControlClient implementation for IQM Server Full path: iqm.station_control.client.iqm_server Subpackages and modules meta_class  testing  previous client next meta_class \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-station-control-client",
    "title": "client",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.html",
    "description": "Station control client implementation. Full path: iqm.station_control.client Subpackages and modules iqm_server StationControlClient implementation for IQM Server previous API Reference next iqm_serve...",
    "content": "Station control client implementation. Full path: iqm.station_control.client Subpackages and modules iqm_server StationControlClient implementation for IQM Server previous API Reference next iqm_server \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-station-control-client",
    "title": "IqmServerClientMeta",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.meta_class.IqmServerClientMeta.html",
    "description": "Bases: type Custom metaclass that automatically adds \u2018<feature> not implemented\u2019\nstub implementations for all StationControlClient functions that are\nnot overridden by IqmServerClient. Module: iqm.sta...",
    "content": "Bases: type Custom metaclass that automatically adds \u2018<feature> not implemented\u2019\nstub implementations for all StationControlClient functions that are\nnot overridden by IqmServerClient. Module: iqm.station_control.client.iqm_server.meta_class Methods previous meta_class next testing \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-station-control-client",
    "title": "Meta",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.list_with_meta.Meta.html",
    "description": "Bases: object Class holding metadata for list return values, like pagination related data. Module: iqm.station_control.interface.list_with_meta Attributes count  errors  limit  offset  order_by  Metho...",
    "content": "Bases: object Class holding metadata for list return values, like pagination related data. Module: iqm.station_control.interface.list_with_meta Attributes count  errors  limit  offset  order_by  Methods count ( int | None ) \u2013 order_by ( str | None ) \u2013 limit ( int | None ) \u2013 offset ( int | None ) \u2013 errors ( list [ str ] | None ) \u2013 previous ListWithMeta next pydantic_base \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-15."
  },
  {
    "package": "iqm-station-control-client",
    "title": "pydantic_base",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.pydantic_base.html",
    "description": "Pydantic related models and types. Full path: iqm.station_control.interface.pydantic_base Classes PydanticBase Pydantic base model to change the behaviour of pydantic globally. Inheritance previous Me...",
    "content": "Pydantic related models and types. Full path: iqm.station_control.interface.pydantic_base Classes PydanticBase Pydantic base model to change the behaviour of pydantic globally. Inheritance previous Meta next PydanticBase \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.15. Last updated on 2025-04-15."
  }
]