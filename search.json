[
  {
    "package": "iqm-exa-common",
    "title": "API Reference",
    "url": "/iqm-exa-common/API.html",
    "description": "exa.common Shared errors, helpers, control structures, settings, API models etc. previous API documentation: exa-common next common \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated...",
    "content": "exa.common Shared errors, helpers, control structures, settings, API models etc. previous API documentation: exa-common next common \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "API documentation: exa-common",
    "url": "/iqm-exa-common/index.html",
    "description": "26.20.0 2025-05-27 This documentation describes the common library of the Experiment Automation ( EXA ) project. exa-common contains classes and functions that are shared by EXA , Cortex and Station C...",
    "content": "26.20.0 2025-05-27 This documentation describes the common library of the Experiment Automation ( EXA ) project. exa-common contains classes and functions that are shared by EXA , Cortex and Station Control . Index Module Index Search Page next API Reference \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "file_adapter",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.file_adapter.html",
    "description": "Full path: exa.common.qcm_data.file_adapter Classes FileAdapter  Inheritance previous ChipTopology next FileAdapter \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27....",
    "content": "Full path: exa.common.qcm_data.file_adapter Classes FileAdapter  Inheritance previous ChipTopology next FileAdapter \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "sweep_values",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.sweep_values.html",
    "description": "Pydantic compatible annotated class for sweep values. Full path: exa.common.control.sweep.sweep_values Functions serialize_sweep_values (sweep_values) Serialize sweep values type to JSON serializable ...",
    "content": "Pydantic compatible annotated class for sweep values. Full path: exa.common.control.sweep.sweep_values Functions serialize_sweep_values (sweep_values) Serialize sweep values type to JSON serializable type, to support complex types. validate_sweep_values (sweep_values) Validate (i.e. deserialize) JSON serializable sweep values to Python type, to support complex types. previous Sweep next exa.common.control.sweep.sweep_values.serialize_sweep_values \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "Setting",
    "url": "/iqm-exa-common/api/exa.common.data.parameter.Setting.html",
    "description": "Bases: BaseModel Physical quantity represented as a Parameter attached to a numerical value. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][...",
    "content": "Bases: BaseModel Physical quantity represented as a Parameter attached to a numerical value. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.data.parameter Attributes element_indices Element-wise indices of the parameter in self . label Label used as pretty identifier for display purposes, same as label of parameter . model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name Name used as identifier, same as name of parameter . parent_label Parent label of the parameter of self . parent_name Parent name of the parameter of self . unit SI unit of the value , if applicable, same as unit of parameter . parameter The parameter this Setting represents. value Data value attached to the parameter. read_only Indicates if the attribute is read-only. path Path in the settings tree (starting from the root SettingNode ) for this setting. Methods create_element_parameter_for Utility for creating an element-wise parameter for a single value in a collection valued parameter. diff_sets Return a one-sided difference between two sets of Settings, prioritising values in first . get_by_name  merge  remove_by_name  replace  update Create a new setting object with updated value . validate_parameter_value_after  with_path_name Copy of self with the parameter name replaced by the path name. parameter ( Parameter | None ) \u2013 value ( ObservationValue | None ) \u2013 read_only ( bool ) \u2013 path ( str ) \u2013 The parameter this Setting represents. Data value attached to the parameter. Indicates if the attribute is read-only. Path in the settings tree (starting from the root SettingNode ) for this setting. Create a new setting object with updated value . value ( bool | str | int | float | complex | ndarray ) \u2013 Setting Name used as identifier, same as name of parameter . Parent name of the parameter of self . Label used as pretty identifier for display purposes, same as label of parameter . Parent label of the parameter of self . Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. SI unit of the value , if applicable, same as unit of parameter . Element-wise indices of the parameter in self . Return a one-sided difference between two sets of Settings, prioritising values in first . first ( set [ Setting ] ) \u2013 Set whose values will be in the resulting diff. second ( set [ Setting ] ) \u2013 Set that is compared to first . A new set of Settings whose parameters are only found in first , and Settings in first whose\nvalues differ from their counterparts in second . set [ Setting ] Utility for creating an element-wise parameter for a single value in a collection valued parameter. indices ( int | list [ int ] ) \u2013 The indices in the collection for which to create the element-wise parameter. The element-wise parameter. ValueError \u2013 If self is not collection-valued. Parameter Copy of self with the parameter name replaced by the path name. Setting previous Parameter next setting_node \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.sweep.database_serialization.decode_and_validate_sweeps",
    "url": "/iqm-exa-common/api/exa.common.sweep.database_serialization.decode_and_validate_sweeps.html",
    "description": "Decodes and validates json string of list of Sweeps and tuples of Sweeps. sweeps_json ( str ) \u2013 json string of nested structure of Sweep objects list of sweeps and tuples of sweeps ValueError if decod...",
    "content": "Decodes and validates json string of list of Sweeps and tuples of Sweeps. sweeps_json ( str ) \u2013 json string of nested structure of Sweep objects list of sweeps and tuples of sweeps ValueError if decoded result is not expected return type \u2013 list [ Sweep | tuple [ Sweep , \u2026]] previous database_serialization next exa.common.sweep.database_serialization.decode_return_parameters \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.exa_error.UnknownSettingError",
    "url": "/iqm-exa-common/api/exa.common.errors.exa_error.UnknownSettingError.html",
    "description": "This SettingNode does not have a given key. message ( str ) \u2013 previous exa.common.errors.exa_error.InvalidSweepOptionsTypeError next server_errors \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20....",
    "content": "This SettingNode does not have a given key. message ( str ) \u2013 previous exa.common.errors.exa_error.InvalidSweepOptionsTypeError next server_errors \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "sweep_options",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.option.sweep_options.html",
    "description": "Base class for sweep options. Full path: exa.common.control.sweep.option.sweep_options Classes SweepOptions Base immutable class for sweep options. Inheritance previous StartStopOptions next SweepOpti...",
    "content": "Base class for sweep options. Full path: exa.common.control.sweep.option.sweep_options Classes SweepOptions Base immutable class for sweep options. Inheritance previous StartStopOptions next SweepOptions \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.helpers.yaml_helper.load_yaml",
    "url": "/iqm-exa-common/api/exa.common.helpers.yaml_helper.load_yaml.html",
    "description": "Load a YAML file from the given path and raise error if the file can\u2019t be loaded. path ( Path | str ) \u2013 dict [ str , Any ] previous exa.common.helpers.yaml_helper.dump_yaml next logger \u00a9 Copyright 201...",
    "content": "Load a YAML file from the given path and raise error if the file can\u2019t be loaded. path ( Path | str ) \u2013 dict [ str , Any ] previous exa.common.helpers.yaml_helper.dump_yaml next logger \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "FixedSweep",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.fixed_sweep.FixedSweep.html",
    "description": "Bases: Sweep A sweep over arbitrary set of values, given by options . Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.Validatio...",
    "content": "Bases: Sweep A sweep over arbitrary set of values, given by options . Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.control.sweep.fixed_sweep Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. parameter The Sweep represents changing the values of this Parameter. data List of values for parameter Methods parameter ( Parameter ) \u2013 options ( FixedOptions | None ) \u2013 data ( list [ Any ] | ndarray [ Any ] ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous fixed_sweep next linear_sweep \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "ExtraFormatter",
    "url": "/iqm-exa-common/api/exa.common.logger.logger.ExtraFormatter.html",
    "description": "Bases: Formatter Helper formatter class to pass in arbitrary extra information to log messages. Initialize the formatter with specified format strings. Initialize the formatter either with the specifi...",
    "content": "Bases: Formatter Helper formatter class to pass in arbitrary extra information to log messages. Initialize the formatter with specified format strings. Initialize the formatter either with the specified format string, or a\ndefault as described above. Allow for specialized date formatting with\nthe optional datefmt argument. If datefmt is omitted, you get an\nISO8601-like (or RFC 3339-like) format. Use a style parameter of \u2018%\u2019, \u2018{\u2019 or \u2018$\u2019 to specify that you want to\nuse one of %-formatting, str.format() ( {} ) formatting or string.Template formatting in your format string. Changed in version 3.2: Added the style parameter. Module: exa.common.logger.logger Attributes Methods format Format the specified record as text. extra_info_getter ( Callable [ [ ] , str ] | None ) \u2013 Format the specified record as text. The record\u2019s attribute dictionary is used as the operand to a\nstring formatting operation which yields the returned string.\nBefore formatting the dictionary, a couple of preparatory steps\nare carried out. The message attribute of the record is computed\nusing LogRecord.getMessage(). If the formatting string uses the\ntime (as determined by a call to usesTime(), formatTime() is\ncalled to format the event time. If there is exception information,\nit is formatted using formatException() and appended to the message. previous exa.common.logger.logger.init_loggers next InfoFilter \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.exa_error.ExaError",
    "url": "/iqm-exa-common/api/exa.common.errors.exa_error.ExaError.html",
    "description": "Base class for exa errors. message ( str ) \u2013 Error message. previous exa.common.errors.exa_error.EmptyComponentListError next exa.common.errors.exa_error.InvalidSweepOptionsTypeError \u00a9 Copyright 2019-...",
    "content": "Base class for exa errors. message ( str ) \u2013 Error message. previous exa.common.errors.exa_error.EmptyComponentListError next exa.common.errors.exa_error.InvalidSweepOptionsTypeError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "chad_model",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chad_model.html",
    "description": "Pydantic models for CHAD. Full path: exa.common.qcm_data.chad_model Classes CHAD Create a new model by parsing and validating input data from keyword arguments. Component Create a new model by parsing...",
    "content": "Pydantic models for CHAD. Full path: exa.common.qcm_data.chad_model Classes CHAD Create a new model by parsing and validating input data from keyword arguments. Component Create a new model by parsing and validating input data from keyword arguments. Components Create a new model by parsing and validating input data from keyword arguments. ComputationalResonator Create a new model by parsing and validating input data from keyword arguments. Coupler Create a new model by parsing and validating input data from keyword arguments. Launcher Create a new model by parsing and validating input data from keyword arguments. ProbeLine Create a new model by parsing and validating input data from keyword arguments. Qubit Create a new model by parsing and validating input data from keyword arguments. Inheritance previous qcm_data next CHAD \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "qcm_data",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.html",
    "description": "Full path: exa.common.qcm_data Subpackages and modules chad_model Pydantic models for CHAD. chip_topology Chip topology class for parsing CHAD and other QPU related data into human-usable form. file_a...",
    "content": "Full path: exa.common.qcm_data Subpackages and modules chad_model Pydantic models for CHAD. chip_topology Chip topology class for parsing CHAD and other QPU related data into human-usable form. file_adapter  immutable_base_model  qcm_data_client QCM (Quantum Computer Management) Data API client implementation. previous InfoFilter next chad_model \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.server_errors.StationControlError",
    "url": "/iqm-exa-common/api/exa.common.errors.server_errors.StationControlError.html",
    "description": "Base class for station control errors used in client-server communication. message ( str ) \u2013 previous exa.common.errors.server_errors.ServiceUnavailableError next exa.common.errors.server_errors.Unaut...",
    "content": "Base class for station control errors used in client-server communication. message ( str ) \u2013 previous exa.common.errors.server_errors.ServiceUnavailableError next exa.common.errors.server_errors.UnauthorizedError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "control",
    "url": "/iqm-exa-common/api/exa.common.control.html",
    "description": "Common data structures of abstract instrument control. Full path: exa.common.control Subpackages and modules sweep Classes for sweep specification. previous api next sweep \u00a9 Copyright 2019-2025, IQM F...",
    "content": "Common data structures of abstract instrument control. Full path: exa.common.control Subpackages and modules sweep Classes for sweep specification. previous api next sweep \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "ProbeLine",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chad_model.ProbeLine.html",
    "description": "Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form...",
    "content": "Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  connections  Methods name ( str ) \u2013 connections ( tuple [ str , ... ] ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous Launcher next Qubit \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.control.sweep.option.option_converter.convert_to_options",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.option.option_converter.convert_to_options.html",
    "description": "Creates one of the options object based on configuration dictionary. If configuration has keys start and stop , StartStopOptions is created. If configuration has keys start_exp and stop_exp , StartSto...",
    "content": "Creates one of the options object based on configuration dictionary. If configuration has keys start and stop , StartStopOptions is created. If configuration has keys start_exp and stop_exp , StartStopBaseOptions is created. If configuration has keys center and span , CenterSpanOptions is created. If configuration has keys center_exp and span_exp , CenterSpanBaseOptions is created If configuration has keys fixed , FixedOptions is created. config ( dict [ str , Any ] ) \u2013 Configuration dictionary. ValueError \u2013 Error is raised if config has unsupported structure SweepOptions previous option_converter next start_stop_base_options \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "ComputationalResonator",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chad_model.ComputationalResonator.html",
    "description": "Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form...",
    "content": "Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  connections  Methods name ( str ) \u2013 connections ( tuple [ str , ... ] ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous Components next Coupler \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "yaml_helper",
    "url": "/iqm-exa-common/api/exa.common.helpers.yaml_helper.html",
    "description": "YAML utilities. Full path: exa.common.helpers.yaml_helper Functions dump_yaml (data,\u00a0path) Dump a YAML data to the given path. load_yaml (path) Load a YAML file from the given path and raise error if ...",
    "content": "YAML utilities. Full path: exa.common.helpers.yaml_helper Functions dump_yaml (data,\u00a0path) Dump a YAML data to the given path. load_yaml (path) Load a YAML file from the given path and raise error if the file can't be loaded. previous exa.common.helpers.software_version_helper.get_vcs_description next exa.common.helpers.yaml_helper.dump_yaml \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "data_helper",
    "url": "/iqm-exa-common/api/exa.common.helpers.data_helper.html",
    "description": "Full path: exa.common.helpers.data_helper Functions add_data_array (ds,\u00a0da[,\u00a0name]) Add data array da to dataset ds . previous helpers next exa.common.helpers.data_helper.add_data_array \u00a9 Copyright 20...",
    "content": "Full path: exa.common.helpers.data_helper Functions add_data_array (ds,\u00a0da[,\u00a0name]) Add data array da to dataset ds . previous helpers next exa.common.helpers.data_helper.add_data_array \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "LinearSweep",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.linear_sweep.LinearSweep.html",
    "description": "Bases: Sweep Generates evenly spaced parameter values based on options . If options is instance of StartStopOptions , then start and stop options are used for interval If options is instance of Center...",
    "content": "Bases: Sweep Generates evenly spaced parameter values based on options . If options is instance of StartStopOptions , then start and stop options are used for interval If options is instance of CenterSpanOptions ,\nthen the start and stop of the interval are calculated from center and span values ValueError \u2013 Error is raised if options is inconsistent. parameter ( Parameter ) \u2013 options ( StartStopOptions | CenterSpanOptions | None ) \u2013 data ( list [ Any ] | ndarray [ Any ] ) \u2013 Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.control.sweep.linear_sweep Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. parameter The Sweep represents changing the values of this Parameter. data List of values for parameter Methods Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous linear_sweep next option \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.sweep.util.linear_index_sweep",
    "url": "/iqm-exa-common/api/exa.common.sweep.util.linear_index_sweep.html",
    "description": "Produce an NdSweep over a dummy index. Can be used in places where a \u201chardware sweep\u201d is needed but not really meaningful. parameter ( Parameter ) \u2013 Data parameter this index is for. length ( int ) \u2013 ...",
    "content": "Produce an NdSweep over a dummy index. Can be used in places where a \u201chardware sweep\u201d is needed but not really meaningful. parameter ( Parameter ) \u2013 Data parameter this index is for. length ( int ) \u2013 Number of integers in the dummy sweep. A linear sweep over a parameter whose name is parameter.name + _index and whose data ranges from 0 to length with steps of 1. list [ tuple [ Sweep ]] previous exa.common.sweep.util.convert_sweeps_to_list_of_tuples next Changelog \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.exa_error.EmptyComponentListError",
    "url": "/iqm-exa-common/api/exa.common.errors.exa_error.EmptyComponentListError.html",
    "description": "Error raised when an empty list is given as components for running an experiment. message ( str ) \u2013 previous exa_error next exa.common.errors.exa_error.ExaError \u00a9 Copyright 2019-2025, IQM Finland Oy, ...",
    "content": "Error raised when an empty list is given as components for running an experiment. message ( str ) \u2013 previous exa_error next exa.common.errors.exa_error.ExaError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "QCMDataClient",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.qcm_data_client.QCMDataClient.html",
    "description": "Bases: object Python client for QCM (Quantum Computer Management) Data API. root_url ( str ) \u2013 URL pointing to QCM Data service.\nThis URL can point to a local file storage as well.\nIn that case, the U...",
    "content": "Bases: object Python client for QCM (Quantum Computer Management) Data API. root_url ( str ) \u2013 URL pointing to QCM Data service.\nThis URL can point to a local file storage as well.\nIn that case, the URL should point to a directory which\nhas a directory structure identical to QCM Data service (for example /chip-data-records/),\nand files containing data in identical format returned by QCM Data service.\nFor example, CHAD files should be named {chip_label}.json, like M156_W531_A09_L09.json, and contain\na list instead of a single object. fallback_root_url ( str ) \u2013 Same as root_url , used if a query via root_url returns nothing. Module: exa.common.qcm_data.qcm_data_client Attributes root_url Returns the remote QCM Data service URL. Methods get_chip_design_record Get a raw chip design record matching the given chip label. Returns the remote QCM Data service URL. Get a raw chip design record matching the given chip label. chip_label ( str ) \u2013 Chip label. Data record matching the given chip label. dict previous qcm_data_client next sweep \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "Coupler",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chad_model.Coupler.html",
    "description": "Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form...",
    "content": "Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  connections  Methods name ( str ) \u2013 connections ( tuple [ str , ... ] ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous ComputationalResonator next Launcher \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.helpers.json_helper.decode_json",
    "url": "/iqm-exa-common/api/exa.common.helpers.json_helper.decode_json.html",
    "description": "Custom json decoder for object, in case it is represented as\ncomplex number, ndarray or tuple.\nOtherwise decoder won\u2019t be applied Here is an example of encoded/decoded json with complex number and nda...",
    "content": "Custom json decoder for object, in case it is represented as\ncomplex number, ndarray or tuple.\nOtherwise decoder won\u2019t be applied Here is an example of encoded/decoded json with complex number and ndarray: obj ( Any ) \u2013 Any previous json_helper next exa.common.helpers.json_helper.get_json_encoder \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "sweep",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.html",
    "description": "Classes for sweep specification. Full path: exa.common.control.sweep Subpackages and modules exponential_sweep Sweep specification with exponentially spaced values. fixed_sweep Sweep specification wit...",
    "content": "Classes for sweep specification. Full path: exa.common.control.sweep Subpackages and modules exponential_sweep Sweep specification with exponentially spaced values. fixed_sweep Sweep specification with arbitrary values. linear_sweep Sweep specification with linearly spaced values. option Range specifications for Sweeps. sweep Base immutable class for sweeps specifications. sweep_values Pydantic compatible annotated class for sweep values. previous control next exponential_sweep \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.sweep.database_serialization.encode_nd_sweeps",
    "url": "/iqm-exa-common/api/exa.common.sweep.database_serialization.encode_nd_sweeps.html",
    "description": "Encode sweeps to a JSON string. sweeps ( list [ tuple [ Sweep , ... ] ] ) \u2013 sweeps to be serialized. kwargs \u2013 keyword arguments passed to json.dumps json as a string str previous exa.common.sweep.data...",
    "content": "Encode sweeps to a JSON string. sweeps ( list [ tuple [ Sweep , ... ] ] ) \u2013 sweeps to be serialized. kwargs \u2013 keyword arguments passed to json.dumps json as a string str previous exa.common.sweep.database_serialization.decode_settings next exa.common.sweep.database_serialization.encode_return_parameters \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "json_helper",
    "url": "/iqm-exa-common/api/exa.common.helpers.json_helper.html",
    "description": "Full path: exa.common.helpers.json_helper Functions decode_json (obj) Custom json decoder for object, in case it is represented as complex number, ndarray or tuple. get_json_encoder () Custom JSON enc...",
    "content": "Full path: exa.common.helpers.json_helper Functions decode_json (obj) Custom json decoder for object, in case it is represented as complex number, ndarray or tuple. get_json_encoder () Custom JSON encoder for complex number, ndarray or tuple previous exa.common.helpers.deprecation.format_deprecated next exa.common.helpers.json_helper.decode_json \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "constants",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.option.constants.html",
    "description": "Helper constants for SweepOptions classes. Full path: exa.common.control.sweep.option.constants Module Attributes DEFAULT_COUNT Default value for count value in options. DEFAULT_BASE Default value for...",
    "content": "Helper constants for SweepOptions classes. Full path: exa.common.control.sweep.option.constants Module Attributes DEFAULT_COUNT Default value for count value in options. DEFAULT_BASE Default value for base value in options. OPTIONS_TYPE Dictionary with all possible types of options previous CenterSpanOptions next exa.common.control.sweep.option.constants.DEFAULT_COUNT \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "database_serialization",
    "url": "/iqm-exa-common/api/exa.common.sweep.database_serialization.html",
    "description": "Functions that encode and decode all sweep arguments(different types of\nsweeps, return parameters, settings, etc.). The module provides functions for\nserializing and deserializing sweep arguments befo...",
    "content": "Functions that encode and decode all sweep arguments(different types of\nsweeps, return parameters, settings, etc.). The module provides functions for\nserializing and deserializing sweep arguments before saving them to database. Full path: exa.common.sweep.database_serialization Functions decode_and_validate_sweeps (sweeps_json) Decodes and validates json string of list of Sweeps and tuples of Sweeps. decode_return_parameters (json_str) Deserialize return parameters. decode_settings (json_str) Deserialize settings from json string encode_nd_sweeps (sweeps,\u00a0**kwargs) Encode sweeps to a JSON string. encode_return_parameters (return_parameters,\u00a0...) Encode sweeps to a JSON string. previous sweep next exa.common.sweep.database_serialization.decode_and_validate_sweeps \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "Components",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chad_model.Components.html",
    "description": "Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidate...",
    "content": "Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes all  model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. qubits  couplers  probe_lines  launchers  computational_resonators  Methods sort_components  qubit ( tuple [ Qubit , ... ] ) \u2013 tunable_coupler ( tuple [ Coupler , ... ] ) \u2013 probe_line ( tuple [ ProbeLine , ... ] ) \u2013 launcher ( tuple [ Launcher , ... ] ) \u2013 computational_resonator ( tuple [ ComputationalResonator , ... ] ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous Component next ComputationalResonator \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "SweepOptions",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.option.sweep_options.SweepOptions.html",
    "description": "Bases: object Base immutable class for sweep options. Module: exa.common.control.sweep.option.sweep_options Attributes data List of values for parameter Methods List of values for parameter previous s...",
    "content": "Bases: object Base immutable class for sweep options. Module: exa.common.control.sweep.option.sweep_options Attributes data List of values for parameter Methods List of values for parameter previous sweep_options next sweep \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "base_model",
    "url": "/iqm-exa-common/api/exa.common.data.base_model.html",
    "description": "Full path: exa.common.data.base_model Classes BaseModel Pydantic base model to change the behaviour of pydantic globally. Inheritance previous data next BaseModel \u00a9 Copyright 2019-2025, IQM Finland Oy...",
    "content": "Full path: exa.common.data.base_model Classes BaseModel Pydantic base model to change the behaviour of pydantic globally. Inheritance previous data next BaseModel \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "fixed_options",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.option.fixed_options.html",
    "description": "Range specification for arbitrary set of values. Full path: exa.common.control.sweep.option.fixed_options Classes FixedOptions Range fixed options. Inheritance previous exa.common.control.sweep.option...",
    "content": "Range specification for arbitrary set of values. Full path: exa.common.control.sweep.option.fixed_options Classes FixedOptions Range fixed options. Inheritance previous exa.common.control.sweep.option.constants.OPTIONS_TYPE next FixedOptions \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.control.sweep.option.constants.DEFAULT_COUNT",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.option.constants.DEFAULT_COUNT.html",
    "description": "Default value for count value in options. previous constants next exa.common.control.sweep.option.constants.DEFAULT_BASE \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05...",
    "content": "Default value for count value in options. previous constants next exa.common.control.sweep.option.constants.DEFAULT_BASE \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "CollectionType",
    "url": "/iqm-exa-common/api/exa.common.data.parameter.CollectionType.html",
    "description": "Bases: IntEnum Parameter collection type. Module: exa.common.data.parameter Attributes SCALAR Scalar, not a list of any kind. LIST Python list. NDARRAY Numpy ndarray. Methods cast Cast the given value...",
    "content": "Bases: IntEnum Parameter collection type. Module: exa.common.data.parameter Attributes SCALAR Scalar, not a list of any kind. LIST Python list. NDARRAY Numpy ndarray. Methods cast Cast the given value to this collection type. Scalar, not a list of any kind. Python list. Numpy ndarray. Cast the given value to this collection type. value ( Any ) \u2013 Any previous parameter next DataType \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.exa_error.InvalidSweepOptionsTypeError",
    "url": "/iqm-exa-common/api/exa.common.errors.exa_error.InvalidSweepOptionsTypeError.html",
    "description": "The type of sweep options is invalid. previous exa.common.errors.exa_error.ExaError next exa.common.errors.exa_error.UnknownSettingError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last up...",
    "content": "The type of sweep options is invalid. previous exa.common.errors.exa_error.ExaError next exa.common.errors.exa_error.UnknownSettingError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "ImmutableBaseModel",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.immutable_base_model.ImmutableBaseModel.html",
    "description": "Bases: BaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form...",
    "content": "Bases: BaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.immutable_base_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Methods Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous immutable_base_model next qcm_data_client \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "InfoFilter",
    "url": "/iqm-exa-common/api/exa.common.logger.logger.InfoFilter.html",
    "description": "Bases: Filter Helper class to filter log messages above INFO level. Initialize a filter. Initialize with the name of the logger which, together with its\nchildren, will have its events allowed through ...",
    "content": "Bases: Filter Helper class to filter log messages above INFO level. Initialize a filter. Initialize with the name of the logger which, together with its\nchildren, will have its events allowed through the filter. If no\nname is specified, allow every event. Module: exa.common.logger.logger Methods filter Determine if the specified record is to be logged. Determine if the specified record is to be logged. Returns True if the record should be logged, or False otherwise.\nIf deemed appropriate, the record may be modified in-place. record ( LogRecord ) \u2013 bool previous ExtraFormatter next qcm_data \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.helpers.numpy_helper.coerce_numpy_type_to_native",
    "url": "/iqm-exa-common/api/exa.common.helpers.numpy_helper.coerce_numpy_type_to_native.html",
    "description": "Convert numpy types to underlying native types, and Windows-specific int32 arrays to int64s. value ( Any ) \u2013 Any previous numpy_helper next software_version_helper \u00a9 Copyright 2019-2025, IQM Finland O...",
    "content": "Convert numpy types to underlying native types, and Windows-specific int32 arrays to int64s. value ( Any ) \u2013 Any previous numpy_helper next software_version_helper \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "DataType",
    "url": "/iqm-exa-common/api/exa.common.data.parameter.DataType.html",
    "description": "Bases: IntEnum Parameter data type. Module: exa.common.data.parameter Attributes ANYTHING  FLOAT  COMPLEX  STRING  BOOLEAN  INT  NUMBER  Methods cast  validate  previous CollectionType next Parameter ...",
    "content": "Bases: IntEnum Parameter data type. Module: exa.common.data.parameter Attributes ANYTHING  FLOAT  COMPLEX  STRING  BOOLEAN  INT  NUMBER  Methods cast  validate  previous CollectionType next Parameter \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "Component",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chad_model.Component.html",
    "description": "Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidate...",
    "content": "Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  connections  Methods sort  name ( str ) \u2013 connections ( tuple [ str , ... ] ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous CHAD next Components \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "numpy_helper",
    "url": "/iqm-exa-common/api/exa.common.helpers.numpy_helper.html",
    "description": "Coercion of numpy types. Full path: exa.common.helpers.numpy_helper Functions coerce_numpy_type_to_native (value) Convert numpy types to underlying native types, and Windows-specific int32 arrays to i...",
    "content": "Coercion of numpy types. Full path: exa.common.helpers.numpy_helper Functions coerce_numpy_type_to_native (value) Convert numpy types to underlying native types, and Windows-specific int32 arrays to int64s. previous exa.common.helpers.json_helper.get_json_encoder next exa.common.helpers.numpy_helper.coerce_numpy_type_to_native \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "immutable_base_model",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.immutable_base_model.html",
    "description": "Full path: exa.common.qcm_data.immutable_base_model Classes ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Inheritance previous FileAdapter next Imm...",
    "content": "Full path: exa.common.qcm_data.immutable_base_model Classes ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Inheritance previous FileAdapter next ImmutableBaseModel \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "Parameter",
    "url": "/iqm-exa-common/api/exa.common.data.parameter.Parameter.html",
    "description": "Bases: BaseModel A basic data structure that represents a single variable. The variable can be a high-level or low-level control knob of an instrument such as the amplitude of a pulse\nor a control vol...",
    "content": "Bases: BaseModel A basic data structure that represents a single variable. The variable can be a high-level or low-level control knob of an instrument such as the amplitude of a pulse\nor a control voltage; a physical quantity such as resonance frequency; or an abstract concept\nlike the number of averages in a measurement. Setting combines Parameter with a numerical, boolean, or string value to represent a quantity. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.data.parameter Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. parent_label Returns the parent label. parent_name Returns the parent name. name Parameter name used as identifier label name unit SI unit of the quantity, if applicable. data_type Data type or a tuple of datatypes that this parameter accepts and validates. collection_type Data format that this parameter accepts and validates. element_indices For parameters representing a single value in a collection-valued parent parameter, this field gives the indices of that value. Methods build_data_array Attach Parameter information to a numerical array. build_data_set Build an xarray Dataset, where the only DataArray is given by results and coordinates are given by variables . create_element_parameter_for Utility for creating an element-wise parameter for a single value in a collection valued parameter. model_post_init This function is meant to behave like a BaseModel method to initialise private attributes. set Create a Setting object with given value . validate Validate that given value matches the data_type and collection_type . name ( str ) \u2013 label ( str ) \u2013 unit ( str ) \u2013 data_type ( DataType | tuple [ DataType , ... ] ) \u2013 collection_type ( CollectionType ) \u2013 element_indices ( int | list [ int ] | None ) \u2013 Parameter name used as identifier name Parameter label used as pretty identifier for display purposes. Default SI unit of the quantity, if applicable. Data type or a tuple of datatypes that this parameter accepts and validates. One of DataType .\nDefault: FLOAT. Data format that this parameter accepts and validates. One of CollectionType .\nDefault: SCALAR. For parameters representing a single value in a collection-valued parent parameter, this field gives the indices\nof that value. If populated, the self.name and self.label will be updated in post init to include\nthe indices (becoming \"<parent name>__<index0>__<index1>__...__<indexN>\" and \"<parent label> <indices>\" , respectively). The parent name can then be retrieved with self.parent_name and the parent label with self.parent_label . Returns the parent name. This None except in element-wise parameters where gives the name of the parent parameter. Returns the parent label. This None except in element-wise parameters where gives the label of the parent parameter. Create a Setting object with given value . value ( Any ) \u2013 Setting Build an xarray Dataset, where the only DataArray is given by results and coordinates are given by variables . The data is reshaped to correspond to the sizes of the variables. For example, variables = [(par_x, [1,2,3]), (par_y: [-1, -2])] will shape the data to 3-by-2 array. If there are not\nenough variables to reshape the data, remaining dimensions can be given by extra_variables . For example, variables = [(par_x: [1,2,3])], extra_variables=[('y', 2)] yields the same 3-by-2 data. 'y' will then be\na \u201cdimension without coordinate\u201d in xarray terms. variables ( list [ tuple [ Parameter , list [ Any ] ] ] ) \u2013 Coordinates of the set. data ( tuple [ Parameter , list [ Any ] | ndarray [ Any ] ] ) \u2013 Data Parameter and associated data as a possible nested list. attributes ( dict [ str , Any ] ) \u2013 metadata to attach to the whole Dataset. extra_variables ( list [ tuple [ str , int ] ] | None ) \u2013 Valueless dimensions and their sizes. Validate that given value matches the data_type and collection_type . value ( Any ) \u2013 bool Attach Parameter information to a numerical array. Given an array of numerical values, returns a corresponding xr.DataArray instance\nthat gets its name, units, and dimension names (unless explicitly given) from the Parameter instance. data ( ndarray ) \u2013 numerical values dimensions ( list [ Hashable ] ) \u2013 names of the dimensions of data coords ( dict [ Hashable , Any ] ) \u2013 coordinates labeling the dimensions of data metadata ( dict [ str , Any ] ) \u2013 additional xr.DataArray.attrs corresponding DataArray DataArray Utility for creating an element-wise parameter for a single value in a collection valued parameter. indices ( int | list [ int ] ) \u2013 The indices in the collection for which to create the element-wise parameter. The element-wise parameter. UnprocessableEntityError \u2013 If self is not collection-valued. Parameter Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. This function is meant to behave like a BaseModel method to initialise private attributes. It takes context as an argument since that\u2019s what pydantic-core passes when calling it. self ( BaseModel ) \u2013 The BaseModel instance. context ( Any ) \u2013 The context. None previous DataType next Setting \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "BaseModel",
    "url": "/iqm-exa-common/api/exa.common.data.base_model.BaseModel.html",
    "description": "Bases: BaseModel Pydantic base model to change the behaviour of pydantic globally.\nNote that setting model_config in child classes will merge the configs rather than override this one. https://docs.py...",
    "content": "Bases: BaseModel Pydantic base model to change the behaviour of pydantic globally.\nNote that setting model_config in child classes will merge the configs rather than override this one. https://docs.pydantic.dev/latest/concepts/config/#change-behaviour-globally Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.data.base_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Methods copy Returns a copy of the model. model_copy Returns a copy of the model. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Returns a copy of the model. Overrides the Pydantic default \u2018model_copy\u2019 to set \u2018deep=True\u2019 by default. update ( dict [ str , Any ] | None ) \u2013 deep ( bool ) \u2013 Self Returns a copy of the model. Self previous base_model next parameter \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "server_errors",
    "url": "/iqm-exa-common/api/exa.common.errors.server_errors.html",
    "description": "Errors used in the client-server communication. Full path: exa.common.errors.server_errors Exceptions BadRequestError (message,\u00a0*args) Error raised when the request syntax is invalid or the method is ...",
    "content": "Errors used in the client-server communication. Full path: exa.common.errors.server_errors Exceptions BadRequestError (message,\u00a0*args) Error raised when the request syntax is invalid or the method is unsupported in general. ConflictError (message,\u00a0*args) This error happens when there is a conflict with the current state of the resource. ForbiddenError (message,\u00a0*args) Error raised when the operation is forbidden for the user. InternalServerError (message,\u00a0*args) Error raised when an unexpected error happened on the server side. NotFoundError (message,\u00a0*args) Error raised when nothing was found with the given parameters. ServiceUnavailableError (message,\u00a0*args) Error raised when the service is unavailable. StationControlError (message,\u00a0*args) Base class for station control errors used in client-server communication. UnauthorizedError (message,\u00a0*args) Error raised when the user is not authorized. ValidationError (message,\u00a0*args) Error raised when something is unprocessable in general, for example if the input value is not acceptable. previous exa.common.errors.exa_error.UnknownSettingError next exa.common.errors.server_errors.BadRequestError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.control.sweep.sweep_values.validate_sweep_values",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.sweep_values.validate_sweep_values.html",
    "description": "Validate (i.e. deserialize) JSON serializable sweep values to Python type, to support complex types. sweep_values ( Any ) \u2013 Any previous exa.common.control.sweep.sweep_values.serialize_sweep_values ne...",
    "content": "Validate (i.e. deserialize) JSON serializable sweep values to Python type, to support complex types. sweep_values ( Any ) \u2013 Any previous exa.common.control.sweep.sweep_values.serialize_sweep_values next data \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.helpers.json_helper.get_json_encoder",
    "url": "/iqm-exa-common/api/exa.common.helpers.json_helper.get_json_encoder.html",
    "description": "Custom JSON encoder for complex number, ndarray or tuple Can be used in situation when serialization of JSON can be customised\n(json_encoders config in pydantic models, custom_encoder in jsonable_enco...",
    "content": "Custom JSON encoder for complex number, ndarray or tuple Can be used in situation when serialization of JSON can be customised\n(json_encoders config in pydantic models, custom_encoder in jsonable_encoder\nof fastapi, etc.) dict [ Any , Callable [[\u2026], dict [ str , Any ]]] previous exa.common.helpers.json_helper.decode_json next numpy_helper \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "linear_sweep",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.linear_sweep.html",
    "description": "Sweep specification with linearly spaced values. Full path: exa.common.control.sweep.linear_sweep Classes LinearSweep Generates evenly spaced parameter values based on options . Inheritance previous F...",
    "content": "Sweep specification with linearly spaced values. Full path: exa.common.control.sweep.linear_sweep Classes LinearSweep Generates evenly spaced parameter values based on options . Inheritance previous FixedSweep next LinearSweep \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.server_errors.UnauthorizedError",
    "url": "/iqm-exa-common/api/exa.common.errors.server_errors.UnauthorizedError.html",
    "description": "Error raised when the user is not authorized. message ( str ) \u2013 previous exa.common.errors.server_errors.StationControlError next exa.common.errors.server_errors.ValidationError \u00a9 Copyright 2019-2025,...",
    "content": "Error raised when the user is not authorized. message ( str ) \u2013 previous exa.common.errors.server_errors.StationControlError next exa.common.errors.server_errors.ValidationError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.server_errors.NotFoundError",
    "url": "/iqm-exa-common/api/exa.common.errors.server_errors.NotFoundError.html",
    "description": "Error raised when nothing was found with the given parameters. This should be used when it\u2019s expected that something is found, for example when trying to find with an exact ID. message ( str ) \u2013 previ...",
    "content": "Error raised when nothing was found with the given parameters. This should be used when it\u2019s expected that something is found, for example when trying to find with an exact ID. message ( str ) \u2013 previous exa.common.errors.server_errors.InternalServerError next exa.common.errors.server_errors.ServiceUnavailableError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "CenterSpanOptions",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.option.center_span_options.CenterSpanOptions.html",
    "description": "Bases: SweepOptions Range generation options. Values are generated over the interval with the center center and the size of span .\nFor linear sweep range the number of generated values can be based ei...",
    "content": "Bases: SweepOptions Range generation options. Values are generated over the interval with the center center and the size of span .\nFor linear sweep range the number of generated values can be based either on count or step .\nIn case count is empty and step is not, step is used for calculating count .\nFor exponential sweep range only count is used. Module: exa.common.control.sweep.option.center_span_options Attributes asc Order of generated values. count Number of values to generate. data List of values for parameter step Size of spacing between values. center Value of interval center. span Size of the interval. Methods center ( int | float | complex ) \u2013 span ( int | float | complex ) \u2013 count ( int | None ) \u2013 step ( int | float | complex ) \u2013 asc ( bool | None ) \u2013 Value of interval center. Size of the interval. Number of values to generate.\nIf count and step are empty, the default value of count is exa.common.control.sweep.option.constants.DEFAULT_COUNT . Size of spacing between values. Order of generated values. Default to ascending List of values for parameter previous center_span_options next constants \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.qcm_data.chip_topology.sort_components",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chip_topology.sort_components.html",
    "description": "Sort the given components in a human-readable way. components ( Iterable [ str ] ) \u2013 list [ str ] previous chip_topology next exa.common.qcm_data.chip_topology.sort_couplers \u00a9 Copyright 2019-2025, IQM...",
    "content": "Sort the given components in a human-readable way. components ( Iterable [ str ] ) \u2013 list [ str ] previous chip_topology next exa.common.qcm_data.chip_topology.sort_couplers \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "StartStopOptions",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.option.start_stop_options.StartStopOptions.html",
    "description": "Bases: SweepOptions Range generation options. Values are generated over the interval from start to stop . For linear sweep range the\nnumber of generated values can be based either on count or step . I...",
    "content": "Bases: SweepOptions Range generation options. Values are generated over the interval from start to stop . For linear sweep range the\nnumber of generated values can be based either on count or step . In case count is empty\nand step is not, step is used for calculating count . For exponential sweep range only count is used. Module: exa.common.control.sweep.option.start_stop_options Attributes count Number of values to generate. data List of values for parameter step Size of spacing between values. start Starting value of interval. stop Stopping value of interval. Methods start ( int | float | complex ) \u2013 stop ( int | float | complex ) \u2013 count ( int | None ) \u2013 step ( int | float | complex | None ) \u2013 Starting value of interval. Stopping value of interval. Number of values to generate. Must be non-negative.\nIf count and step are empty, the default value of count is exa.common.control.sweep.option.constants.DEFAULT_COUNT . Size of spacing between values. Must be non-zero.\nIf both count and step are not empty, only count is used List of values for parameter previous start_stop_options next sweep_options \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.server_errors.BadRequestError",
    "url": "/iqm-exa-common/api/exa.common.errors.server_errors.BadRequestError.html",
    "description": "Error raised when the request syntax is invalid or the method is unsupported in general. message ( str ) \u2013 previous server_errors next exa.common.errors.server_errors.ConflictError \u00a9 Copyright 2019-20...",
    "content": "Error raised when the request syntax is invalid or the method is unsupported in general. message ( str ) \u2013 previous server_errors next exa.common.errors.server_errors.ConflictError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exponential_sweep",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.exponential_sweep.html",
    "description": "Sweep specification with exponentially spaced values. Full path: exa.common.control.sweep.exponential_sweep Classes ExponentialSweep Generates parameter values spaced evenly on a geometric progression...",
    "content": "Sweep specification with exponentially spaced values. Full path: exa.common.control.sweep.exponential_sweep Classes ExponentialSweep Generates parameter values spaced evenly on a geometric progression based on options . Inheritance previous sweep next ExponentialSweep \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.qcm_data.chip_topology.sort_couplers",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chip_topology.sort_couplers.html",
    "description": "Sort the given couplers in a human-readable way. couplers ( Iterable [ str ] ) \u2013 list [ str ] previous exa.common.qcm_data.chip_topology.sort_components next ChipTopology \u00a9 Copyright 2019-2025, IQM Fi...",
    "content": "Sort the given couplers in a human-readable way. couplers ( Iterable [ str ] ) \u2013 list [ str ] previous exa.common.qcm_data.chip_topology.sort_components next ChipTopology \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.server_errors.InternalServerError",
    "url": "/iqm-exa-common/api/exa.common.errors.server_errors.InternalServerError.html",
    "description": "Error raised when an unexpected error happened on the server side. This error should never be raised when something expected happens,\nand whenever the client encounters this, it should be considered a...",
    "content": "Error raised when an unexpected error happened on the server side. This error should never be raised when something expected happens,\nand whenever the client encounters this, it should be considered as a server bug. message ( str ) \u2013 previous exa.common.errors.server_errors.ForbiddenError next exa.common.errors.server_errors.NotFoundError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.helpers.data_helper.add_data_array",
    "url": "/iqm-exa-common/api/exa.common.helpers.data_helper.add_data_array.html",
    "description": "Add data array da to dataset ds . Unlike the default xarray command, preserves metadata of the dataset. ds ( Dataset ) \u2013 Dataset to add to. da ( DataArray ) \u2013 DataArray to add name ( str | None ) \u2013 na...",
    "content": "Add data array da to dataset ds . Unlike the default xarray command, preserves metadata of the dataset. ds ( Dataset ) \u2013 Dataset to add to. da ( DataArray ) \u2013 DataArray to add name ( str | None ) \u2013 name under which da can be accessed inside ds .\nBy default, uses the name property of da . The updated dataset. Dataset previous data_helper next deprecation \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "center_span_options",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.option.center_span_options.html",
    "description": "Range specification to define a range around a center value. Full path: exa.common.control.sweep.option.center_span_options Classes CenterSpanOptions Range generation options. Inheritance previous Cen...",
    "content": "Range specification to define a range around a center value. Full path: exa.common.control.sweep.option.center_span_options Classes CenterSpanOptions Range generation options. Inheritance previous CenterSpanBaseOptions next CenterSpanOptions \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.helpers.software_version_helper.get_all_software_versions",
    "url": "/iqm-exa-common/api/exa.common.helpers.software_version_helper.get_all_software_versions.html",
    "description": "Get all available software version information. Currently, this function collects all Python package versions and Python interpreter version. reload_module ( bool ) \u2013 Whether to reload the pkg_resourc...",
    "content": "Get all available software version information. Currently, this function collects all Python package versions and Python interpreter version. reload_module ( bool ) \u2013 Whether to reload the pkg_resources module or not. By default,\nit is disabled because reloading the module is not thread safe!\nThis function should be called with reload_module=True when IPython autoreload is in use. dict [ str , str ] Example You have numpy==1.21.0 installed, and in the notebook you have executed the following IPython magic: You install numpy==1.21.1 You call this function with reload_module=False . This will result in some warning printouts and\nthe function will succeed by returning 1.21.0 for numpy, which is wrong because in reality IPython\nautoreload has reloaded the newly installed numpy 1.21.1.\nWith reload_module=True the correct version 1.21.1 is returned and no warnings are printed. information. A package\u2019s version information contains the base version, and the string\n\u201c(local editable)\u201d in the case the package is a local editable installation. previous software_version_helper next exa.common.helpers.software_version_helper.get_vcs_description \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "sweep",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.sweep.html",
    "description": "Base immutable class for sweeps specifications. Full path: exa.common.control.sweep.sweep Classes Sweep Base immutable class for sweeps. Inheritance previous SweepOptions next Sweep \u00a9 Copyright 2019-2...",
    "content": "Base immutable class for sweeps specifications. Full path: exa.common.control.sweep.sweep Classes Sweep Base immutable class for sweeps. Inheritance previous SweepOptions next Sweep \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "errors",
    "url": "/iqm-exa-common/api/exa.common.errors.html",
    "description": "Common error messages. Full path: exa.common.errors Subpackages and modules exa_error  server_errors Errors used in the client-server communication. previous exa.common.data.value.validate_value next ...",
    "content": "Common error messages. Full path: exa.common.errors Subpackages and modules exa_error  server_errors Errors used in the client-server communication. previous exa.common.data.value.validate_value next exa_error \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "parameter",
    "url": "/iqm-exa-common/api/exa.common.data.parameter.html",
    "description": "Physical quantities and instrument settings. A basic data structure in EXA is the Parameter , which represents\na single variable. The variable can be a high-level or low-level control knob of an instr...",
    "content": "Physical quantities and instrument settings. A basic data structure in EXA is the Parameter , which represents\na single variable. The variable can be a high-level or low-level control knob of an instrument such as\nthe amplitude of a pulse or a control voltage; a physical quantity such as resonance frequency; or an abstract concept\nlike the number of averages in a measurement. The Parameter is a simple structure with a name, label, unit and a datatype without much functionality.\nThe Setting combines a Parameter and a value of the corresponding type.\nLike Parameters, Settings are lightweight objects that contain information but don\u2019t do anything by themselves. The Settings are immutable, which means that the value can\u2019t be changed, we can only make a copy with another value.\nWhen assigning a new value to a Setting, the datatype of the value is validated against the expected datatype of the\nparameter. Full path: exa.common.data.parameter Classes CollectionType Parameter collection type. DataType Parameter data type. Parameter A basic data structure that represents a single variable. Setting Physical quantity represented as a Parameter attached to a numerical value. Inheritance previous BaseModel next CollectionType \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "start_stop_base_options",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.option.start_stop_base_options.html",
    "description": "Range specification used with exponential sweeps. Full path: exa.common.control.sweep.option.start_stop_base_options Classes StartStopBaseOptions Range generation options. Inheritance previous exa.com...",
    "content": "Range specification used with exponential sweeps. Full path: exa.common.control.sweep.option.start_stop_base_options Classes StartStopBaseOptions Range generation options. Inheritance previous exa.common.control.sweep.option.option_converter.convert_to_options next StartStopBaseOptions \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa_error",
    "url": "/iqm-exa-common/api/exa.common.errors.exa_error.html",
    "description": "Full path: exa.common.errors.exa_error Exceptions EmptyComponentListError (message,\u00a0*args) Error raised when an empty list is given as components for running an experiment. ExaError (message,\u00a0*args) B...",
    "content": "Full path: exa.common.errors.exa_error Exceptions EmptyComponentListError (message,\u00a0*args) Error raised when an empty list is given as components for running an experiment. ExaError (message,\u00a0*args) Base class for exa errors. InvalidSweepOptionsTypeError (**kwargs) The type of sweep options is invalid. UnknownSettingError (message,\u00a0*args) This SettingNode does not have a given key. previous errors next exa.common.errors.exa_error.EmptyComponentListError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "SettingNode",
    "url": "/iqm-exa-common/api/exa.common.data.setting_node.SettingNode.html",
    "description": "Bases: BaseModel A tree-structured Setting container. Each child of the node is a Setting , or another SettingNode .\nIterating over the node returns all children, recursively.\nSettings can be accessed...",
    "content": "Bases: BaseModel A tree-structured Setting container. Each child of the node is a Setting , or another SettingNode .\nIterating over the node returns all children, recursively.\nSettings can be accessed by dictionary syntax or attribute syntax: name ( str ) \u2013 Name of the node. settings ( dict [ str , Any ] | None ) \u2013 Dict of setting path fraqment names (usually the same as the setting name) to the settings. Mostly\nused when deserialising and otherwise left empty. subtrees ( dict [ str , Any ] | None ) \u2013 Dict of child node path fraqment names (usually the same as the child node name) to the settings.\nMostly used when deserialising and otherwise left empty. path ( str ) \u2013 Optionally give a path for the node, by default empty. generate_paths ( bool ) \u2013 If set True , all subnodes will get their paths autogenerated correctly. Only set to False if the subnodes already have correct paths set (e.g. when deserialising). kwargs \u2013 The children given as keyword arguments. Each argument must be a Setting , Parameter , or a SettingNode . The keywords are used as the names of the nodes.\nParameters will be cast into Settings with the value None . align_name ( bool ) \u2013 Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.data.setting_node Attributes all_settings Yields all Setting instances inside this node, recursively. child_nodes ItemsView of immediate child nodes of this node. child_settings ItemsView of settings of this node. children Dictionary of immediate child nodes of this node. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  settings  subtrees  path  align_name  Methods add_for_path Add nodes to self while creating the missing nodes in-between. diff Recursive diff between two SettingNodes. find_by_name Find first occurrence of Setting or SettingNode by name, by iterating recursively through all children. get_default_implementation_name Get the default implementation name for a given gate and locus. get_gate_node_for_locus Get the gate calibration sub-node for the locus given as a parameter if it exists in the settings tree. get_gate_properties_for_locus Get the gate characterization sub-node for the locus given as a parameter if it exists in the settings tree. get_locus_node_paths_for Get all the gate locus node paths for a given gate . get_node_for_path Return the node corresponding to the given path. get_parent_of Get the first SettingNode that has a Setting named name . merge Recursively combine the tree structures and values of two SettingNodes. merge_values Recursively combine the values from another SettingNode to this one. nodes_by_type Yields all nodes, filtered by given node_types . print_tree Print a tree representation of the contents of this node. prune Recursively delete all branches from this SettingNode that are not found in other . set_from_dict Recursively set values to Settings, taking values from a dictionary that has similar tree structure. setting_with_path_name Get a copy of a setting with its name replaced with the path name. transform_node_types Reduce any subclass of SettingNode and it's contents into instances of cls . update_setting Update an existing Setting in this tree. This method generates the paths and aligns the names when required. None List items and subtree names, so they occur in IPython autocomplete after node[<TAB> Yields all nodes, filtered by given node_types . Used to find and iterate over nodes of specific types. node_types ( type | tuple [ type , ... ] | None ) \u2013 when iterating over the tree, yields only instances that match this type\nor any of the types in the tuple. By default, yields Settings and SettingNodes. recursive ( bool ) \u2013 If True, the search is carried recursively. If False, the search is limited to\nimmediate child nodes. Iterator that yields the filtered nodes. Iterator Update an existing Setting in this tree. setting ( Setting ) \u2013 Setting that will replace an existing Setting with the same name. Or if the setting is an\nelement-wise setting (i.e. it has a non-empty value of setting.element_indices ), the corresponding\nelement will be updated in the collection. UnknownSettingError \u2013 If no setting is found in the children of this tree. None Yields all Setting instances inside this node, recursively. Dictionary of immediate child nodes of this node. ItemsView of settings of this node. ItemsView of immediate child nodes of this node. Get the first SettingNode that has a Setting named name . name ( str ) \u2013 Name of the setting to look for. A SettingNode that has a child name . SettingNode Find first occurrence of Setting or SettingNode by name, by iterating recursively through all children. name ( str ) \u2013 Name of the Setting or SettingNode to look for. First found item, or None if nothing is found. SettingNode | Setting | None Recursively combine the tree structures and values of two SettingNodes. In case of conflicting nodes,values in first take priority regardless of the replaced content in second . None values are not prioritized unless merge_nones is set to True . first ( SettingNode ) \u2013 SettingNode to merge, whose values and structure take priority second ( SettingNode ) \u2013 SettingNode to merge. merge_nones ( bool ) \u2013 Whether to merge also None values from first to second . align_name ( bool ) \u2013 Whether to align the paths (and also names if second does not use align_name==False )\nwhen merging the nodes. Should never be set False unless the paths in first already align with\nwhat they should be in second (setting it False in such cases can improve performance). deep_copy ( bool ) \u2013 Whether to deepcopy or just shallow copy all the sub-nodes. Set to False with high caution\nand understand the consequences. A new SettingNode constructed from arguments. SettingNode Recursively combine the values from another SettingNode to this one. The resulting tree structure the same as that of self. other ( SettingNode ) \u2013 SettingNode to merge. prioritize_other ( bool ) \u2013 If True, will prioritize values in other. If False (default), only None values in self\nwill be replaced. Recursively delete all branches from this SettingNode that are not found in other . other ( SettingNode ) \u2013 None Print a tree representation of the contents of this node. levels ( int ) \u2013 display this many levels, starting from the root. None Reduce any subclass of SettingNode and it\u2019s contents into instances of cls . node ( SettingNode ) \u2013 node to transform. A new SettingNode with the same structure as the original, but where node instances are of type cls . SettingNode Recursively set values to Settings, taking values from a dictionary that has similar tree structure.\nKeys that are not found in self are ignored, unless strict is True. dct ( dict [ str , Any ] ) \u2013 Dictionary containing the new values to use. strict ( bool ) \u2013 If True, will raise error if dct contains a setting that is not found in self . UnknownSettingError \u2013 If the condition of strict happens. None Get a copy of a setting with its name replaced with the path name. setting ( Setting ) \u2013 Setting Recursive diff between two SettingNodes. This function is meant to produce human-readable output, e.g. for debugging purposes.\nIt returns the differences in a list of strings, each string detailing\none specific difference. The diff is non-symmetric. other ( SettingNode ) \u2013 second node to compare self to path ( str ) \u2013 node path to the currently compared nodes (used in printing the results) differences from self to other , in depth-first order list [ str ] Turn a numerical value and unit, and return rescaled value and SI prefixed unit. Unit must be a whitelisted SI base unit. Return the node corresponding to the given path. path ( str ) \u2013 The path. The node at path in self. ValueError \u2013 If the given path cannot be found in self. Setting | SettingNode Add nodes to self while creating the missing nodes in-between. Whether the names and paths are aligned is determined by the attribute align_name of the current node\n( self ). All the created missing nodes will use this same align_name value,\nwhich determines whether their names will align with their paths. nodes ( Iterable [ Setting | Parameter | SettingNode ] | dict [ str , Setting | Parameter | SettingNode ] ) \u2013 Nodes to add as new leaves/branches of path . If of type dict , maps the keys used in self.settings or self.subtrees to the nodes themselves. If align_name=False , the key and\nthe node name can differ, but otherwise the names will be replaced by the path anyways). path ( str ) \u2013 Path in self to which nodes will be added. If the path or any part (suffix) of it is not\nfound in self, the associated nodes will be created automatically. override_values ( dict [ str , Any ] | None ) \u2013 Optionally override the values for the Settings corresponding to nodes . This dict\nshould have the same structure as nodes , including matching names. None Get the default implementation name for a given gate and locus. Takes into account the global default implementation and a possible locus specific implementation and also\nthe symmetry properties of the gate. NOTE: using this method requires the standard EXA settings tree structure. gate ( str ) \u2013 The name of the gate. locus ( str | Iterable [ str ] ) \u2013 Individual qubits, couplers, or combinations. The default implementation name. str Get the gate calibration sub-node for the locus given as a parameter if it exists in the settings tree. NOTE: using this method requires the standard EXA settings tree structure. gate ( str ) \u2013 The gate to retrieve the settings for. locus ( str | Iterable [ str ] ) \u2013 Individual qubits, couplers, or combinations. implementation ( str | None ) \u2013 Using a custom rather than the default gate implementation. The settings of the specified locus and gate. SettingNode Get all the gate locus node paths for a given gate . NOTE: using this method requires the standard EXA settings tree structure. gate ( str ) \u2013 Gate name. implementations ( list [ str ] | None ) \u2013 optionally limit the paths by these gate implementations. The locus node (string) paths corresponding to this gate. list [ str ] Get the gate characterization sub-node for the locus given as a parameter if it exists in the settings tree. NOTE: using this method requires the standard EXA settings tree structure. gate ( str ) \u2013 The gate to retrieve the settings for. locus ( str | Iterable [ str ] ) \u2013 Individual qubits, couplers, or combinations. implementation ( str | None ) \u2013 Using a custom rather than the default gate implementation. The settings of the specified locus and gate. SettingNode Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous setting_node next value \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "api",
    "url": "/iqm-exa-common/api/exa.common.api.html",
    "description": "API helpers. Full path: exa.common.api Subpackages and modules previous common next control \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27....",
    "content": "API helpers. Full path: exa.common.api Subpackages and modules previous common next control \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "deprecation",
    "url": "/iqm-exa-common/api/exa.common.helpers.deprecation.html",
    "description": "Full path: exa.common.helpers.deprecation Functions format_deprecated (old,\u00a0new,\u00a0since)  previous exa.common.helpers.data_helper.add_data_array next exa.common.helpers.deprecation.format_deprecated \u00a9 ...",
    "content": "Full path: exa.common.helpers.deprecation Functions format_deprecated (old,\u00a0new,\u00a0since)  previous exa.common.helpers.data_helper.add_data_array next exa.common.helpers.deprecation.format_deprecated \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.control.sweep.sweep_values.serialize_sweep_values",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.sweep_values.serialize_sweep_values.html",
    "description": "Serialize sweep values type to JSON serializable type, to support complex types. sweep_values ( Any ) \u2013 Any previous sweep_values next exa.common.control.sweep.sweep_values.validate_sweep_values \u00a9 Cop...",
    "content": "Serialize sweep values type to JSON serializable type, to support complex types. sweep_values ( Any ) \u2013 Any previous sweep_values next exa.common.control.sweep.sweep_values.validate_sweep_values \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "Sweep",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.sweep.Sweep.html",
    "description": "Bases: BaseModel Base immutable class for sweeps. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input...",
    "content": "Bases: BaseModel Base immutable class for sweeps. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.control.sweep.sweep Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. parameter The Sweep represents changing the values of this Parameter. data List of values for parameter Methods model_post_init Override this method to perform additional initialization after __init__ and model_construct . parameter ( Parameter ) \u2013 options ( SweepOptions | None ) \u2013 data ( list [ Any ] | ndarray [ Any ] ) \u2013 The Sweep represents changing the values of this Parameter. List of values for parameter Override this method to perform additional initialization after __init__ and model_construct .\nThis is useful if you want to do some validation that requires the entire model to be initialized. _Sweep__context ( Any ) \u2013 None Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous sweep next sweep_values \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "start_stop_options",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.option.start_stop_options.html",
    "description": "Range specification to define a linearly spaced interval. Full path: exa.common.control.sweep.option.start_stop_options Classes StartStopOptions Range generation options. Inheritance previous StartSto...",
    "content": "Range specification to define a linearly spaced interval. Full path: exa.common.control.sweep.option.start_stop_options Classes StartStopOptions Range generation options. Inheritance previous StartStopBaseOptions next StartStopOptions \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "helpers",
    "url": "/iqm-exa-common/api/exa.common.helpers.html",
    "description": "Miscellaneous helper functionality. Full path: exa.common.helpers Subpackages and modules data_helper  deprecation  json_helper  numpy_helper Coercion of numpy types. software_version_helper  yaml_hel...",
    "content": "Miscellaneous helper functionality. Full path: exa.common.helpers Subpackages and modules data_helper  deprecation  json_helper  numpy_helper Coercion of numpy types. software_version_helper  yaml_helper YAML utilities. previous exa.common.errors.server_errors.ValidationError next data_helper \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "software_version_helper",
    "url": "/iqm-exa-common/api/exa.common.helpers.software_version_helper.html",
    "description": "Full path: exa.common.helpers.software_version_helper Functions get_all_software_versions ([reload_module]) Get all available software version information. get_vcs_description (root_directory) Get Ver...",
    "content": "Full path: exa.common.helpers.software_version_helper Functions get_all_software_versions ([reload_module]) Get all available software version information. get_vcs_description (root_directory) Get Version Control System (VCS) description for the caller's current working directory. previous exa.common.helpers.numpy_helper.coerce_numpy_type_to_native next exa.common.helpers.software_version_helper.get_all_software_versions \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "logger",
    "url": "/iqm-exa-common/api/exa.common.logger.logger.html",
    "description": "Full path: exa.common.logger.logger Functions init_loggers ([loggers,\u00a0default_level,\u00a0...]) Set the log level of given logger names. Classes ExtraFormatter Helper formatter class to pass in arbitrary e...",
    "content": "Full path: exa.common.logger.logger Functions init_loggers ([loggers,\u00a0default_level,\u00a0...]) Set the log level of given logger names. Classes ExtraFormatter Helper formatter class to pass in arbitrary extra information to log messages. InfoFilter Helper class to filter log messages above INFO level. Inheritance previous logger next exa.common.logger.logger.init_loggers \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.sweep.database_serialization.decode_return_parameters",
    "url": "/iqm-exa-common/api/exa.common.sweep.database_serialization.decode_return_parameters.html",
    "description": "Deserialize return parameters. For backwards compatibility, changes values of the return parameters dict to a new,\nmore general format: NdSweeps, which is a list of tuples of Sweeps. Return parameters...",
    "content": "Deserialize return parameters. For backwards compatibility, changes values of the return parameters dict to a new,\nmore general format: NdSweeps, which is a list of tuples of Sweeps. Return parameters JSON syntax: [{\"parameter\": readout_parameter_json, \"hard_sweeps\": [hard_sweep,...]}, ...] . readout_parameter_json may be a Parameter or a Setting; both will be converted to a Parameter. hard_sweeps are converted with the following rules: 1 is converted to an empty NdSweep, i.e., a scalar. Other integers are converted to a linear_index_sweep() Sweep is converted to an NdSweep that contains only the sweep NdSweep and None are not converted. json_str ( str ) \u2013 JSON representation of the return_parameters loaded\nfrom e.g. persistence a reconstituted, typed return_parameters structure dict [ Parameter , list [ tuple [ Sweep , \u2026]] | None ] previous exa.common.sweep.database_serialization.decode_and_validate_sweeps next exa.common.sweep.database_serialization.decode_settings \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "qcm_data_client",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.qcm_data_client.html",
    "description": "QCM (Quantum Computer Management) Data API client implementation. Full path: exa.common.qcm_data.qcm_data_client Classes QCMDataClient Python client for QCM (Quantum Computer Management) Data API. Inh...",
    "content": "QCM (Quantum Computer Management) Data API client implementation. Full path: exa.common.qcm_data.qcm_data_client Classes QCMDataClient Python client for QCM (Quantum Computer Management) Data API. Inheritance previous ImmutableBaseModel next QCMDataClient \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.helpers.yaml_helper.dump_yaml",
    "url": "/iqm-exa-common/api/exa.common.helpers.yaml_helper.dump_yaml.html",
    "description": "Dump a YAML data to the given path. Create missing directories if necessary. data ( dict [ str , Any ] ) \u2013 path ( Path | str ) \u2013 None previous yaml_helper next exa.common.helpers.yaml_helper.load_yaml...",
    "content": "Dump a YAML data to the given path. Create missing directories if necessary. data ( dict [ str , Any ] ) \u2013 path ( Path | str ) \u2013 None previous yaml_helper next exa.common.helpers.yaml_helper.load_yaml \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.server_errors.ServiceUnavailableError",
    "url": "/iqm-exa-common/api/exa.common.errors.server_errors.ServiceUnavailableError.html",
    "description": "Error raised when the service is unavailable. message ( str ) \u2013 previous exa.common.errors.server_errors.NotFoundError next exa.common.errors.server_errors.StationControlError \u00a9 Copyright 2019-2025, I...",
    "content": "Error raised when the service is unavailable. message ( str ) \u2013 previous exa.common.errors.server_errors.NotFoundError next exa.common.errors.server_errors.StationControlError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.sweep.database_serialization.decode_settings",
    "url": "/iqm-exa-common/api/exa.common.sweep.database_serialization.decode_settings.html",
    "description": "Deserialize settings from json string json_str ( str ) \u2013 JSON representation of settings loaded\nfrom e.g. persistence deserialized settings SettingNode previous exa.common.sweep.database_serialization...",
    "content": "Deserialize settings from json string json_str ( str ) \u2013 JSON representation of settings loaded\nfrom e.g. persistence deserialized settings SettingNode previous exa.common.sweep.database_serialization.decode_return_parameters next exa.common.sweep.database_serialization.encode_nd_sweeps \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "data",
    "url": "/iqm-exa-common/api/exa.common.data.html",
    "description": "Classes for representing physical quantities and instrument settings. Full path: exa.common.data Subpackages and modules base_model  parameter Physical quantities and instrument settings. setting_node...",
    "content": "Classes for representing physical quantities and instrument settings. Full path: exa.common.data Subpackages and modules base_model  parameter Physical quantities and instrument settings. setting_node A tree-structured container for Settings . value  previous exa.common.control.sweep.sweep_values.validate_sweep_values next base_model \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.data.value.validate_value",
    "url": "/iqm-exa-common/api/exa.common.data.value.validate_value.html",
    "description": "Validate (i.e. deserialize) JSON serializable value to Python type, to support complex and ndarray types. value ( Any ) \u2013 Any previous exa.common.data.value.serialize_value next errors \u00a9 Copyright 201...",
    "content": "Validate (i.e. deserialize) JSON serializable value to Python type, to support complex and ndarray types. value ( Any ) \u2013 Any previous exa.common.data.value.serialize_value next errors \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.server_errors.ValidationError",
    "url": "/iqm-exa-common/api/exa.common.errors.server_errors.ValidationError.html",
    "description": "Error raised when something is unprocessable in general, for example if the input value is not acceptable. message ( str ) \u2013 previous exa.common.errors.server_errors.UnauthorizedError next helpers \u00a9 C...",
    "content": "Error raised when something is unprocessable in general, for example if the input value is not acceptable. message ( str ) \u2013 previous exa.common.errors.server_errors.UnauthorizedError next helpers \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.data.value.serialize_value",
    "url": "/iqm-exa-common/api/exa.common.data.value.serialize_value.html",
    "description": "Serialize value type to JSON serializable type, to support complex and ndarray types. value ( Any ) \u2013 Any previous value next exa.common.data.value.validate_value \u00a9 Copyright 2019-2025, IQM Finland Oy...",
    "content": "Serialize value type to JSON serializable type, to support complex and ndarray types. value ( Any ) \u2013 Any previous value next exa.common.data.value.validate_value \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "Qubit",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chad_model.Qubit.html",
    "description": "Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form...",
    "content": "Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name  connections  Methods name ( str ) \u2013 connections ( tuple [ str , ... ] ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous ProbeLine next chip_topology \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "Launcher",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chad_model.Launcher.html",
    "description": "Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form...",
    "content": "Bases: Component Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. pin  function  name  connections  Methods name ( str ) \u2013 connections ( tuple [ str , ... ] ) \u2013 pin ( str ) \u2013 function ( str ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous Coupler next ProbeLine \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "chip_topology",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chip_topology.html",
    "description": "Chip topology class for parsing CHAD and other QPU related data into human-usable form. Full path: exa.common.qcm_data.chip_topology Functions sort_components (components) Sort the given components in...",
    "content": "Chip topology class for parsing CHAD and other QPU related data into human-usable form. Full path: exa.common.qcm_data.chip_topology Functions sort_components (components) Sort the given components in a human-readable way. sort_couplers (couplers) Sort the given couplers in a human-readable way. Classes ChipTopology Topology information for a chip (typically a QPU). Inheritance previous Qubit next exa.common.qcm_data.chip_topology.sort_components \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.server_errors.ConflictError",
    "url": "/iqm-exa-common/api/exa.common.errors.server_errors.ConflictError.html",
    "description": "This error happens when there is a conflict with the current state of the resource. For example, when doing duplicate submissions for the same unique data. message ( str ) \u2013 previous exa.common.errors...",
    "content": "This error happens when there is a conflict with the current state of the resource. For example, when doing duplicate submissions for the same unique data. message ( str ) \u2013 previous exa.common.errors.server_errors.BadRequestError next exa.common.errors.server_errors.ForbiddenError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "option_converter",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.option.option_converter.html",
    "description": "Helper to create a SweepOptions instance from a dict. Full path: exa.common.control.sweep.option.option_converter Functions convert_to_options (config) Creates one of the options object based on confi...",
    "content": "Helper to create a SweepOptions instance from a dict. Full path: exa.common.control.sweep.option.option_converter Functions convert_to_options (config) Creates one of the options object based on configuration dictionary. previous FixedOptions next exa.common.control.sweep.option.option_converter.convert_to_options \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "StartStopBaseOptions",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.option.start_stop_base_options.StartStopBaseOptions.html",
    "description": "Bases: SweepOptions Range generation options. Values are generated over the interval from base power start to base power stop .\nThe number of values = count . These options are used only for exponenti...",
    "content": "Bases: SweepOptions Range generation options. Values are generated over the interval from base power start to base power stop .\nThe number of values = count . These options are used only for exponential sweep range. Module: exa.common.control.sweep.option.start_stop_base_options Attributes base Number, that is raised to the power start or stop . count Number of values to generate. data List of values for parameter start The power for the start of the interval. stop The power for the end of the interval. Methods start ( int | float | complex ) \u2013 stop ( int | float | complex ) \u2013 count ( int | None ) \u2013 base ( int | float | None ) \u2013 The power for the start of the interval. The power for the end of the interval. Number of values to generate. Default to exa.common.control.sweep.option.constants.DEFAULT_COUNT . Number, that is raised to the power start or stop . Default to exa.common.control.sweep.option.constants.DEFAULT_BASE . List of values for parameter previous start_stop_base_options next start_stop_options \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.control.sweep.option.constants.DEFAULT_BASE",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.option.constants.DEFAULT_BASE.html",
    "description": "Default value for base value in options. previous exa.common.control.sweep.option.constants.DEFAULT_COUNT next exa.common.control.sweep.option.constants.OPTIONS_TYPE \u00a9 Copyright 2019-2025, IQM Finland...",
    "content": "Default value for base value in options. previous exa.common.control.sweep.option.constants.DEFAULT_COUNT next exa.common.control.sweep.option.constants.OPTIONS_TYPE \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "FileAdapter",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.file_adapter.FileAdapter.html",
    "description": "Bases: BaseAdapter Module: exa.common.qcm_data.file_adapter Methods close Cleans up adapter specific items. send Sends PreparedRequest object. Sends PreparedRequest object. Returns Response object. Cl...",
    "content": "Bases: BaseAdapter Module: exa.common.qcm_data.file_adapter Methods close Cleans up adapter specific items. send Sends PreparedRequest object. Sends PreparedRequest object. Returns Response object. Cleans up adapter specific items. previous file_adapter next immutable_base_model \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "option",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.option.html",
    "description": "Range specifications for Sweeps. Full path: exa.common.control.sweep.option Subpackages and modules center_span_base_options Range specification used with exponential sweeps. center_span_options Range...",
    "content": "Range specifications for Sweeps. Full path: exa.common.control.sweep.option Subpackages and modules center_span_base_options Range specification used with exponential sweeps. center_span_options Range specification to define a range around a center value. constants Helper constants for SweepOptions classes. fixed_options Range specification for arbitrary set of values. option_converter Helper to create a SweepOptions instance from a dict. start_stop_base_options Range specification used with exponential sweeps. start_stop_options Range specification to define a linearly spaced interval. sweep_options Base class for sweep options. previous LinearSweep next center_span_base_options \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.control.sweep.option.constants.OPTIONS_TYPE",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.option.constants.OPTIONS_TYPE.html",
    "description": "Dictionary with all possible types of options previous exa.common.control.sweep.option.constants.DEFAULT_BASE next fixed_options \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on...",
    "content": "Dictionary with all possible types of options previous exa.common.control.sweep.option.constants.DEFAULT_BASE next fixed_options \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "center_span_base_options",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.option.center_span_base_options.html",
    "description": "Range specification used with exponential sweeps. Full path: exa.common.control.sweep.option.center_span_base_options Classes CenterSpanBaseOptions Range generation options. Inheritance previous optio...",
    "content": "Range specification used with exponential sweeps. Full path: exa.common.control.sweep.option.center_span_base_options Classes CenterSpanBaseOptions Range generation options. Inheritance previous option next CenterSpanBaseOptions \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "ExponentialSweep",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.exponential_sweep.ExponentialSweep.html",
    "description": "Bases: Sweep Generates parameter values spaced evenly on a geometric progression based on options . If options is instance of StartStopBaseOptions ,\nthe start and stop of the interval are calculated f...",
    "content": "Bases: Sweep Generates parameter values spaced evenly on a geometric progression based on options . If options is instance of StartStopBaseOptions ,\nthe start and stop of the interval are calculated from powers of start and stop. If options is instance of CenterSpanBaseOptions ,\nthe start and stop of the interval are calculated from powers of start and stop,\nwhich are derived from center and span. ValueError \u2013 Error is raised if options is inconsistent. parameter ( Parameter ) \u2013 options ( StartStopBaseOptions | CenterSpanBaseOptions | None ) \u2013 data ( list [ Any ] | ndarray [ Any ] ) \u2013 Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.control.sweep.exponential_sweep Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. parameter The Sweep represents changing the values of this Parameter. data List of values for parameter Methods Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous exponential_sweep next fixed_sweep \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.helpers.software_version_helper.get_vcs_description",
    "url": "/iqm-exa-common/api/exa.common.helpers.software_version_helper.get_vcs_description.html",
    "description": "Get Version Control System (VCS) description for the caller\u2019s current working directory. The description is used to verify if a directory is installed under VCS and whether changes to the files have\nb...",
    "content": "Get Version Control System (VCS) description for the caller\u2019s current working directory. The description is used to verify if a directory is installed under VCS and whether changes to the files have\nbeen made. First, the existence of .git directory will be checked from root_directory .\nOnly if it exists, a git command is executed in a subprocess with a timeout\nof 1 seconds as the best effort only. The path to the directory where the command will be executed. For instance when called from\nexa-experiment, it can be the exa-experiment root directory or any directory under it. If root_directory is not installed under git, None will be returned. Otherwise, the output of git describe --dirty --tags --long is returned. In case of errors in executing the command, the caught subprocess.CalledProcessError will be converted to string and returned. If the command fails or timeouts , an exception will be raised directly from subprocess.check_output. \u2013 root_directory ( str ) \u2013 str | None previous exa.common.helpers.software_version_helper.get_all_software_versions next yaml_helper \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.errors.server_errors.ForbiddenError",
    "url": "/iqm-exa-common/api/exa.common.errors.server_errors.ForbiddenError.html",
    "description": "Error raised when the operation is forbidden for the user. message ( str ) \u2013 previous exa.common.errors.server_errors.ConflictError next exa.common.errors.server_errors.InternalServerError \u00a9 Copyright...",
    "content": "Error raised when the operation is forbidden for the user. message ( str ) \u2013 previous exa.common.errors.server_errors.ConflictError next exa.common.errors.server_errors.InternalServerError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "sweep",
    "url": "/iqm-exa-common/api/exa.common.sweep.html",
    "description": "Sweep utilities. Full path: exa.common.sweep Subpackages and modules database_serialization Functions that encode and decode all sweep arguments(different types of sweeps, return parameters, settings,...",
    "content": "Sweep utilities. Full path: exa.common.sweep Subpackages and modules database_serialization Functions that encode and decode all sweep arguments(different types of sweeps, return parameters, settings, etc.). util Generic utilities for converting sweep definitions from user-friendly format to canonic ones. previous QCMDataClient next database_serialization \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.logger.logger.init_loggers",
    "url": "/iqm-exa-common/api/exa.common.logger.logger.init_loggers.html",
    "description": "Set the log level of given logger names. Logs with INFO or DEBUG logging levels are written into stdout, and logs with other levels are written into stderr. By default, the root logger uses WARNING le...",
    "content": "Set the log level of given logger names. Logs with INFO or DEBUG logging levels are written into stdout, and logs with other levels are written into stderr. By default, the root logger uses WARNING level. See Python\u2019s logging module for possible logging levels. loggers ( dict [ str , str | None ] | None ) \u2013 A mapping from logger name to (case insensitive) logging level. If logging level is None or empty\nstring, default_level will be used for that logger. It is possible to fine tune logging for individual\nmodules, since logger propagation is turned off. Overriding works both ways: a parent logger can have higher\nlogging level than its descendants, and vice versa.\nFor example, {\"sqlalchemy\": None, \"sqlalchemy.engine\": \"debug\"} will put\n\u201csqlalchemy\u201d and its descendants (i.e. \u201csqlalchemy.dialects\u201d, \u201csqlalchemy.dialects.sqlite\u201d, etc.) into default_level , except for \u201csqlalchemy.engine\u201d for which DEBUG level is defined.\nFor the root logger, use empty string key, for example: {\"\": \"INFO\"} .\nIf empty dict or None is given, only the root logger will be initialized to its default WARNING level. default_level ( str ) \u2013 The default level (case insensitive) to be used for logger names given with loggers for which a level is not specified. verbose ( bool ) \u2013 If False, :const: BRIEF format will be used for log messages, otherwise :const: VERBOSE . extra_info_getter ( Callable [ [ ] , str ] | None ) \u2013 Optional callable to convey extra information to log messages. It will get called before\neach log message emission and the output will get appended to the log message. None previous logger next ExtraFormatter \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.sweep.util.convert_sweeps_to_list_of_tuples",
    "url": "/iqm-exa-common/api/exa.common.sweep.util.convert_sweeps_to_list_of_tuples.html",
    "description": "Validate sweeps and convert it to format accepted by the station control. Converts a more convenient sweep definition list to a strict list of tuples of sweeps.\nThe sweep instances themselves are the ...",
    "content": "Validate sweeps and convert it to format accepted by the station control. Converts a more convenient sweep definition list to a strict list of tuples of sweeps.\nThe sweep instances themselves are the same, except single sweep instances are turned\ninto a tuple containing a single sweep. Verify that:\n* sweeps list element is either Sweep or ParallelSweep\n* tuple_of_sweep element is a Sweep\n* tuple of sweeps contains at least one element\n* length of a data is identical in all tuples of sweeps sweeps ( list [ Sweep | tuple [ Sweep , ... ] ] ) \u2013 More user-friendly definition of a list of sweeps. List of tuples of sweeps. ValueError if sweeps parameter does not follow the contract. \u2013 list [ tuple [ Sweep , \u2026]] previous util next exa.common.sweep.util.linear_index_sweep \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "setting_node",
    "url": "/iqm-exa-common/api/exa.common.data.setting_node.html",
    "description": "A tree-structured container for Settings . The SettingNode class combines a bunch of Settings together.\nIt may also contain other SettingNodes.\nTogether, the contents form a tree structure that provid...",
    "content": "A tree-structured container for Settings . The SettingNode class combines a bunch of Settings together.\nIt may also contain other SettingNodes.\nTogether, the contents form a tree structure that provides a useful way of grouping Settings. As an example, we manually construct a tree of SettingNodes with some dummy Settings, but it is usually not necessary.\nThe root node in the following examples is called 'node' . The easiest way to see the content of the node is the SettingNode.print_tree() method: We see that the 'root' node has two children, named 'root.flux' and 'root.pulse' , which\nthemselves are also SettingNodes.\nThis follows the typical naming convention in EXA: Subnodes include the names of their parents, separated by a dot. The children contain some dummy Settings, showing the keys, labels and current values. For other ways to access the content of the node, see also SettingNode.children , SettingNode.all_settings , and SettingNode.nodes_by_type() . The values within the nodes can be accessed using the attribute or dictionary syntax: The values can be changed with a simple = syntax: Note node.setting refers to the Setting object. node.setting.value syntax refers to the data stored inside. SettingNode also supports \u201cthe path notation\u201d by default (but not if align_name is set to False ,\nsince it cannot be made to work consistently if nodes are allowed to be named differently from their paths): is the same as node['flux']['voltage'] . Adding and deleting new Settings and nodes is simple: It is usually a good idea to make a copy of the original node, so that it won\u2019t be modified accidentally. The path notation of `` SettingNode``also works when inserting: Any nodes that did not already exist under node will be inserted (in this case flux already existed, but\nthe rest not, so under flux the nodes my , new , and path would be added), and then finally the\nvalue is added as child to the final node. Note: SettingNode always alings the path and name of any nodes under it,\nso this would result in the new setting being renamed as \u201cflux.my.new.path.foo\u201d: If align_name is set to False\", the name and path of nodes are not automatically aligned, but otherwise the above path notation will still work. The added nodes will be named by just their path fragments (\"my\", \"new\", \"path\", and so on), and the Setting will be added under the key \"foo\", but it will still retain its name \"bar\". Note: the root node name will always be excluded from the paths (and names when they are aligned with the path), so that the path of ``root.foo.bar is \"foo.bar\" . To merge values of two SettingNodes, there are helpers SettingNode.merge() and SettingNode.merge_values() . The first one merges the tree structure and values of two nodes and outputs a third one as a result. None values are always replaced by a proper value if such exists. In case of conflicting nodes or values,\nthe content of the first argument takes priority. Note how the result has values from node.flux , but also settings node.pulse that do not exist in node.flux . The SettingNode.merge_values() method is an in-place operation that only changes\nthe values of Settings that already exist in the node, if possible: Sometimes, it is easier to collect values in a dictionary and set them all at once by using SettingNode.set_from_dict() . The nested structure of the dictionary should match\nthe structure of the SettingNode. Keys that are not found in the tree are silently ignored, unless the strict flag is used. Full path: exa.common.data.setting_node Classes SettingNode A tree-structured Setting container. Inheritance previous Setting next SettingNode \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.sweep.database_serialization.encode_return_parameters",
    "url": "/iqm-exa-common/api/exa.common.sweep.database_serialization.encode_return_parameters.html",
    "description": "Encode sweeps to a JSON string. return_parameters ( dict [ Parameter , list [ tuple [ Sweep , ... ] ] | None ] ) \u2013 Return parameters as specified by sweep() . kwargs \u2013 keyword arguments passed to json...",
    "content": "Encode sweeps to a JSON string. return_parameters ( dict [ Parameter , list [ tuple [ Sweep , ... ] ] | None ] ) \u2013 Return parameters as specified by sweep() . kwargs \u2013 keyword arguments passed to json.dumps json as a string str previous exa.common.sweep.database_serialization.encode_nd_sweeps next util \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "util",
    "url": "/iqm-exa-common/api/exa.common.sweep.util.html",
    "description": "Generic utilities for converting sweep definitions from\nuser-friendly format to canonic ones. Full path: exa.common.sweep.util Functions convert_sweeps_to_list_of_tuples (sweeps) Validate sweeps and c...",
    "content": "Generic utilities for converting sweep definitions from\nuser-friendly format to canonic ones. Full path: exa.common.sweep.util Functions convert_sweeps_to_list_of_tuples (sweeps) Validate sweeps and convert it to format accepted by the station control. linear_index_sweep (parameter,\u00a0length) Produce an NdSweep over a dummy index. previous exa.common.sweep.database_serialization.encode_return_parameters next exa.common.sweep.util.convert_sweeps_to_list_of_tuples \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "value",
    "url": "/iqm-exa-common/api/exa.common.data.value.html",
    "description": "Full path: exa.common.data.value Functions serialize_value (value) Serialize value type to JSON serializable type, to support complex and ndarray types. validate_value (value) Validate (i.e. deseriali...",
    "content": "Full path: exa.common.data.value Functions serialize_value (value) Serialize value type to JSON serializable type, to support complex and ndarray types. validate_value (value) Validate (i.e. deserialize) JSON serializable value to Python type, to support complex and ndarray types. previous SettingNode next exa.common.data.value.serialize_value \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "exa.common.helpers.deprecation.format_deprecated",
    "url": "/iqm-exa-common/api/exa.common.helpers.deprecation.format_deprecated.html",
    "description": "old ( str ) \u2013 new ( str | None ) \u2013 since ( str ) \u2013 LiteralString previous deprecation next json_helper \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27....",
    "content": "old ( str ) \u2013 new ( str | None ) \u2013 since ( str ) \u2013 LiteralString previous deprecation next json_helper \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "CHAD",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chad_model.CHAD.html",
    "description": "Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidate...",
    "content": "Bases: ImmutableBaseModel Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: exa.common.qcm_data.chad_model Attributes computational_resonator_names Names of all the computational resonators declared in CHAD data. coupler_names Names of all the couplers declared in CHAD data. model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. probe_line_names Names of all the probe lines declared in CHAD data. qubit_names Names of all the qubits declared in CHAD data. mask_set_name  variant  components  Methods filter_qubit_components Filter qubit components from the input components. get_common_coupler_for Convenience method for getting the name of a coupler connecting a pair of components. get_component Get component by component name. get_coupler_mapping_for Get the coupler-component mapping for the couplers that connects to at least two components get_probe_line_mapping_for Get the probe line-component mapping. get_probe_line_names_for Get probe lines for given qubits in CHAD data. group_components_per_default_operations Groups given qubits/couplers based on their defined default operations. mask_set_name ( str ) \u2013 variant ( str ) \u2013 components ( Components ) \u2013 Get component by component name. component_name ( str ) \u2013 Component Names of all the qubits declared in CHAD data. Names of all the couplers declared in CHAD data. Names of all the probe lines declared in CHAD data. Names of all the computational resonators declared in CHAD data. Filter qubit components from the input components. component_names ( Collection [ str ] ) \u2013 list [ str ] Get probe lines for given qubits in CHAD data. component_names ( Collection [ str ] ) \u2013 list [ str ] Groups given qubits/couplers based on their defined default operations. The default operations that can be deducted from a CHAD are readout , drive , and flux . component_names ( Collection [ str ] ) \u2013 The component names to which to do the grouping.\nOther components present in the CHAD will not be included in the returned data. Tuple of qubits and couplers mapped to their connected default operations. The data is in the form of a dict with the keys being readout , drive , and flux ,\nand the values the list of component names having that particular operation. The data is in the form of a dict with the keys being readout , drive , and flux ,\nand the values the list of component names having that particular operation. tuple [ dict [ str , list [ str ]], dict [ str , list [ str ]]] in the given qubits. component_names ( Collection [ str ] ) \u2013 The qubit names. May contain any number of qubits. Coupler names mapped to the components they connect. - ValueError \u2013 If the provided qubit name list contains duplicates. dict [ str , list [ str ]] Get the probe line-component mapping. component_names ( Collection [ str ] ) \u2013 The qubit names. May contain any number of qubits. dict [ str , list [ str ]] Convenience method for getting the name of a coupler connecting a pair of components. first_component ( str ) \u2013 The name of the first component. second_component ( str ) \u2013 The name of the second component.\nThe order of qubits does not matter, i.e. the first_qubit and second_qubit arguments are interchangeable. The name of the coupler that connects the inputted components. The name of the coupler that connects the inputted components. - ValueError \u2013 If there were no couplers or more than one coupler connecting the component pair (the latter\n    should not be possible in a realistic chip). str Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous chad_model next Component \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "logger",
    "url": "/iqm-exa-common/api/exa.common.logger.html",
    "description": "Helper to initialize loggers to the specified logging level. Full path: exa.common.logger Subpackages and modules logger  previous exa.common.helpers.yaml_helper.load_yaml next logger \u00a9 Copyright 2019...",
    "content": "Helper to initialize loggers to the specified logging level. Full path: exa.common.logger Subpackages and modules logger  previous exa.common.helpers.yaml_helper.load_yaml next logger \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "common",
    "url": "/iqm-exa-common/api/exa.common.html",
    "description": "Shared errors, helpers, control structures, settings, API models etc. Full path: exa.common Subpackages and modules api API helpers. control Common data structures of abstract instrument control. data...",
    "content": "Shared errors, helpers, control structures, settings, API models etc. Full path: exa.common Subpackages and modules api API helpers. control Common data structures of abstract instrument control. data Classes for representing physical quantities and instrument settings. errors Common error messages. helpers Miscellaneous helper functionality. logger Helper to initialize loggers to the specified logging level. qcm_data  sweep Sweep utilities. previous API Reference next api \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "fixed_sweep",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.fixed_sweep.html",
    "description": "Sweep specification with arbitrary values. Full path: exa.common.control.sweep.fixed_sweep Classes FixedSweep A sweep over arbitrary set of values, given by options . Inheritance previous ExponentialS...",
    "content": "Sweep specification with arbitrary values. Full path: exa.common.control.sweep.fixed_sweep Classes FixedSweep A sweep over arbitrary set of values, given by options . Inheritance previous ExponentialSweep next FixedSweep \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "FixedOptions",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.option.fixed_options.FixedOptions.html",
    "description": "Bases: SweepOptions Range fixed options. Module: exa.common.control.sweep.option.fixed_options Attributes data List of values for parameter fixed List of values. Methods fixed ( list [ Any ] | ndarray...",
    "content": "Bases: SweepOptions Range fixed options. Module: exa.common.control.sweep.option.fixed_options Attributes data List of values for parameter fixed List of values. Methods fixed ( list [ Any ] | ndarray [ Any ] ) \u2013 List of values. List of values for parameter previous fixed_options next option_converter \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "ChipTopology",
    "url": "/iqm-exa-common/api/exa.common.qcm_data.chip_topology.ChipTopology.html",
    "description": "Bases: object Topology information for a chip (typically a QPU). Can represent the information found in a CHAD, as well as locus mappings for gates. qubits ( Iterable [ str ] ) \u2013 names of the qubits. ...",
    "content": "Bases: object Topology information for a chip (typically a QPU). Can represent the information found in a CHAD, as well as locus mappings for gates. qubits ( Iterable [ str ] ) \u2013 names of the qubits. computational_resonators ( Iterable [ str ] ) \u2013 names of the computational resonators. couplers ( dict [ str , Iterable [ str ] ] ) \u2013 mapping from coupler name to names of chip components it connects to. probe_lines ( dict [ str , Iterable [ str ] ] ) \u2013 mapping from probe line name to names of chip components it connects to. variant ( str ) \u2013 identifier of the QPU design variant. Module: exa.common.qcm_data.chip_topology Attributes computational_resonators Computational resonators on the chip, in any order. computational_resonators_sorted Computational resonators on the chip, sorted. couplers Tunable couplers on the chip, in any order. couplers_sorted Tunable couplers on the chip, sorted by numerical IDs. probe_lines Probe lines on the chip, in any order. probe_lines_sorted Probe lines on the chip, sorted. all_components All components on the chip. coupler_to_components Map from each coupler to all other components it connects to. component_to_couplers Map from each component to all couplers connected to it. probe_line_to_components Map from each probe line to all components it connects to. component_to_probe_line Map from each component to the probeline connected to it. Methods from_chad Construct a ChipTopology instance from a CHAD. from_chip_design_record Construct a ChipTopology instance from a raw Chip design record. get_all_common_resonators Computational resonators connected to all the given qubits via a coupler. get_common_computational_resonator Convenience method for getting the name of a computational resonator which is connected to both specified qubit components via tunable couplers. get_connected_coupler_map Returns a ComponentMap , including only the couplers between components that both are in the given subset. get_connected_probe_lines Get probelines that are connected to any of the given components. get_connecting_couplers Couplers that only connect to the given chip components, and connect at least two of them. get_coupler_for Common coupler for the given chip components (e.g. qubit or computational resonator). get_loci Gives all the loci of a given gate. get_neighbor_couplers Couplers that connect to at least one of the given chip components. get_neighbor_locus_components Chip components that are connected to the given components by a coupler, but not included in them. is_computational_resonator True iff the given component is a computational resonator. is_coupler True iff the given component is a coupler. is_probe_line True iff the given component is a probe line. is_qubit True iff the given component is a qubit. limit_values Prunes the given dictionary (e.g. a coupler-to-qubits map) to a subset of values. map_locus Returns the mapped components for the given locus and the given gate. map_to_locus Returns the locus that is mapped to the given components. set_locus_mapping Add a custom mapping from a gate locus to a set of components required for the gate operation. Computational resonators on the chip, in any order. Computational resonators on the chip, sorted. Tunable couplers on the chip, in any order. Tunable couplers on the chip, sorted by numerical IDs. Probe lines on the chip, in any order. Probe lines on the chip, sorted. All components on the chip. Map from each coupler to all other components it connects to. The values are sorted. Map from each component to all couplers connected to it. Map from each probe line to all components it connects to. Map from each component to the probeline connected to it.\nMax 1 connection per component is assumed.\nComponents without connection to a probe line don\u2019t appear. Construct a ChipTopology instance from a raw Chip design record. record ( dict ) \u2013 Record as returned by Station control. Corresponding chip topology ChipTopology Construct a ChipTopology instance from a CHAD. Use from_chip_design_record() if possible. chad ( CHAD ) \u2013 parsed CHAD model corresponding chip topology ChipTopology Couplers that connect to at least one of the given chip components. components ( Iterable [ str ] ) \u2013 some chip components, typically qubits and computational resonators couplers that connect to at least one of components set [ str ] Couplers that only connect to the given chip components, and connect at least two of them. Equivalent to returning the edges in the components -induced\nsubgraph of the coupling topology. components ( Collection [ str ] ) \u2013 some chip components, typically qubits and computational resonators couplers that connect to only members of components , and to at least two of them set [ str ] Common coupler for the given chip components (e.g. qubit or computational resonator). component_1 ( str ) \u2013 first component component_2 ( str ) \u2013 second component the common coupler ValueError \u2013 the given components have zero or more than one connecting coupler str Chip components that are connected to the given components by a coupler, but not included in them. components ( Collection [ str ] ) \u2013 some chip components, typically qubits and computational resonators components that are connected to components by a coupler, but not included in them set [ str ] Get probelines that are connected to any of the given components. components ( Collection [ str ] ) \u2013 set [ str ] Returns a ComponentMap , including only the couplers between components that both are in the given subset. components ( Collection [ str ] ) \u2013 Collection of coupled components to restrict the returned couplers. A ComponentMap , a dict mapping coupler names to the names of the coupled components. ComponentMap Prunes the given dictionary (e.g. a coupler-to-qubits map) to a subset of values. Used to prune e.g. coupler_to_components to a subset of relevant elements. dct ( ComponentMap ) \u2013 Dictionary of collections of values. limit_to ( Collection [ str ] ) \u2013 Components to limit the output to. The input dictionary, but only with key-value pairs where the value intersects with limit_to . ComponentMap True iff the given component is a qubit. component ( str ) \u2013 bool True iff the given component is a coupler. component ( str ) \u2013 bool True iff the given component is a probe line. component ( str ) \u2013 bool True iff the given component is a computational resonator. component ( str ) \u2013 bool Add a custom mapping from a gate locus to a set of components required for the gate operation. The mapping is of the form {<locus>: <components mapped to locus>}, where a locus can be mapped to one or more\ncomponents. The locus itself can be a frozenset (denoting a symmetric gate) or a tuple (non-symmetric gate). Some examples:\n- DEFAULT_2QB_MAPPING (added in __init__() ) maps pairs of qubits to their common coupler symmetrically.\n- Fast flux CZ-gate maps pairs of qubits to their couplers non-symmetrically (first locus qubit can perform flux pulses).\n- A two-qubit gate implementation that includes playing pulses on neighboring components in addition to the connecting coupler. name ( str ) \u2013 The name for the gate & implementation this locus mapping represents (typically in the format \"<gate name>.<implementation name>\" ). mapping ( dict [ tuple [ str , ... ] | frozenset [ str ] , tuple [ str , ... ] ] ) \u2013 The locus mapping to be added. None Validate that the components given in mapping are found in self and the mapping is correctly formed. mapping ( dict [ str | tuple [ str ] , tuple [ str , ... ] | frozenset [ str ] ] | None ) \u2013 None Returns the mapped components for the given locus and the given gate. If the locus or the gate is not found from the locus mappings of self, returns None. locus ( tuple [ str , ... ] | frozenset [ str ] ) \u2013 The locus to map. name ( str | None ) \u2013 The name for the gate & implementation with which to map the locus (typically in the format \"<gate name>.<implementation name>\" ). The components mapped to the given locus or None if locus is not found in the given mapping. str | tuple [ str ] | None Returns the locus that is mapped to the given components. mapped ( str | tuple [ str ] ) \u2013 The mapped components. name ( str ) \u2013 The name for the gate & implementation with which to map the locus (typically in the format \"<gate name>.<implementation name>\" ). The locus mapped to the given components or None if the components are not mapped to any locus. tuple [ str , \u2026] | frozenset [ str ] | None Gives all the loci of a given gate. If no mapping with the given the name nor a default mapping with the given dimensionality is found,\nreturns an empty list. name ( str ) \u2013 The name for the gate & implementation with which to map the locus (typically in the format \"<gate name>.<implementation name>\" ). default_mapping_dimension ( int | None ) \u2013 If provided, will return the loci of the default mapping of the given\ndimensionality in case no mapping for name can be found. The loci associated with the given gate. list [ tuple [ str , \u2026] | frozenset [ str ]] Convenience method for getting the name of a computational resonator which is connected to both specified\nqubit components via tunable couplers. first_qubit ( str ) \u2013 The name of the first qubit. second_qubit ( str ) \u2013 The name of the second qubit. The order of qubits does not matter, i.e. the first_qubit and second_qubit arguments are interchangeable. The name of the second qubit. The order of qubits does not matter, i.e. the first_qubit and second_qubit arguments are interchangeable. The name of the computational resonator that is connected to both inputted qubits via tunable couplers. The name of the computational resonator that is connected to both inputted qubits via tunable couplers. - ValueError \u2013 If no computational resonator was found that is connected to both qubits via tunable couplers. \u2013 str Computational resonators connected to all the given qubits via a coupler. qubits ( list [ str ] ) \u2013 Qubit names. Names of the computational resonators neighboring all of qubits (can be an empty set). set [ str ] previous exa.common.qcm_data.chip_topology.sort_couplers next file_adapter \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-exa-common",
    "title": "CenterSpanBaseOptions",
    "url": "/iqm-exa-common/api/exa.common.control.sweep.option.center_span_base_options.CenterSpanBaseOptions.html",
    "description": "Bases: SweepOptions Range generation options. Values are generated over the interval from base power start of the range\nwith the center center and the size of span to base power end of the range\nwith ...",
    "content": "Bases: SweepOptions Range generation options. Values are generated over the interval from base power start of the range\nwith the center center and the size of span to base power end of the range\nwith the center center and the size of span . The number of values = count .\nThese options are used only for exponential sweep range. Module: exa.common.control.sweep.option.center_span_base_options Attributes asc Order of generated values. base  count Number of values to generate. data List of values for parameter center Value of interval center for the power. span Size of the interval for the power Methods center ( int | float ) \u2013 span ( int | float ) \u2013 count ( int | None ) \u2013 base ( int | float | None ) \u2013 asc ( bool | None ) \u2013 Value of interval center for the power. Size of the interval for the power Number of values to generate. Default to exa.common.control.sweep.option.constants.DEFAULT_COUNT . Order of generated values. Default to ascending List of values for parameter previous center_span_base_options next center_span_options \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 26.20.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "IQM Pulla",
    "url": "/iqm-pulla/readme.html",
    "description": "Pulla (pulse-level access) is a client-side software which allows the user to control the generation and\nexecution of pulse schedules on a quantum computer. Within the existing IQM QCCSW stack, PulLA ...",
    "content": "Pulla (pulse-level access) is a client-side software which allows the user to control the generation and\nexecution of pulse schedules on a quantum computer. Within the existing IQM QCCSW stack, PulLA is somewhere between\ncircuit-level execution and EXA-experiment. An interactive user guide is available as a Jupyter notebook in the docs folder. Create a virtual environment and install dependencies: The [qiskit] option is to enable Qiskit-related features and utilities, like converting Qiskit circuits to Pulla circuits, constructing a compatible compiler instance, or constructing a PullaBackend for running Qiskit jobs. The [qir] option is to enable QIR support, e.g. the qir_to_pulla function. The [notebook] option is to be able to run the example notebooks, using\nand run it in Jupyter Notebook: Install development and testing dependencies: e2e testing is execution of all user guides (Jupyter notebooks). User guides cover the majority of user-level features,\nso we achieve two things: end-to-end-test Pulla as a client library, and make sure the user guides are correct.\n(Server-side use of Pulla is e2e-tested as part of CoCoS.) You have to provide CoCoS and Station Control URLs as environment variables: Notebooks are executed using jupyter execute command. It does not print any output if there are no errors. If you want\nto run a particular notebook and see the output cells printed in the terminal, you can use nbconvert with jq ( https://jqlang.github.io/jq/download/ ) like so: Run unit tests, build docs, build package: Copyright 2025 IQM Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d);\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \u201cAS IS\u201d BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. previous IQM Pulla next Migration guide By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "Example: Measuring T1",
    "url": "/iqm-pulla/Example - Measuring T1.html",
    "description": "T1 is an experiment that measures the relaxation time of a qubit. Information stored in a qubit decays exponentially. The time constant of the decay is called the relaxation time $T_1$. The experiment...",
    "content": "T1 is an experiment that measures the relaxation time of a qubit. Information stored in a qubit decays exponentially. The time constant of the decay is called the relaxation time $T_1$. The experiment measures $T_1$ by preparing selected qubits in the  excited state by playing an X gate,\nwaiting some time, and measuring the qubit. The waiting time is swept to reveal the exponential decay of the excited state probability. High-level QuantumOperations like Quantum gates can be implemented using different GateImplementations.\nTo control low-level aspects of the execution, we can create custom operations, the implementation of which we can control. Here we invent a custom operation \"custom\" and write an implementation \"Wait\" , which only inserts a delay of certain duration.\nIn principle, the custom gate implementation could include any number of low-level instructions,\nbut for this task we only need a wait.\nhttps://iqm-finland.github.io/docs/iqm-pulse/using_builder.html for more details about lower level controls. In later cells, we mix the custom gate with other, more familiar gates. We must register the operation, so that the compiler knows what to do with it: We need to select the physical qubits to work on. These are available on the QPU: Out of these, we select a few: Now we create all the circuits. In each circuit, we do a PRX(pi), or X, then our custom operation that waits, then measure all qubits.\nWe create a circuit for each delay time we want on the time axis. Then compile the circuits. We tweak the settings so that the shots are averaged by the server, so that we don\u2019t need to.\nThe results therefore return as sampled probabilities. Extract the results We can also visualise the final playlist. We should see that each circuit is different and the waits at the end are increasing towards the end. previous Examples next Example: Dynamical decoupling By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "User guides",
    "url": "/iqm-pulla/user_guides.html",
    "description": "previous Migration guide next Quick Start By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27....",
    "content": "previous Migration guide next Quick Start By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "Example: Dynamical decoupling",
    "url": "/iqm-pulla/Example - Simple Dynamical Decoupling.html",
    "description": "There is a standard compilation stage for automatically applying dynamical decoupling (DD) sequences to an instruction schedule,\ncontrolled by the dd_mode compiler option. By default the DD stage is d...",
    "content": "There is a standard compilation stage for automatically applying dynamical decoupling (DD) sequences to an instruction schedule,\ncontrolled by the dd_mode compiler option. By default the DD stage is disabled. The iqm.cpc.compiler.dd module contains various utility functions the DD stage uses, e.g. for locating specific instructions in a schedule, constructing DD sequences, and replacing select instructions with them. For example, we can find locations of Wait instructions on qubit drive channels with a certain minimum duration, and replace them with an arbitrary sequence of Wait and IQPulse instructions that dynamically decouples the qubit, given that the total duration of the sequence is the same as the duration of the original Wait . Let\u2019s create and transpile a quantum circuit that prepares a superposition on one qubit, and then executes a long sequence of gates on other qubits while the first qubit is idling and experiencing decoherence. Finally we reverse the superposition and measure the qubits. Now let us create a pair of Pulla compilers, one with DD and one without. Compiling the circuit using the non-DD compiler produces a schedule with a long wait on QB1__drive.awg. We then execute this schedule and compute the probability of finding QB1 in the |0> state. Ideally this should be one, but due to the decoherence experienced by the superposition state it will be less. Compiling the circuit using the DD compiler instead produces a schedule where the long wait on QB1__drive.awg is replaced by a DD sequence. We execute the DD schedule and again compute the probability of finding QB1 in the |0> state, and will likely see that the probability has gone up, due to the DD sequence partially decoupling the idling QB1 from various decoherence sources and better preserving the superposition state. We can see that the long wait on QB1__drive.awg was indeed replaced by a DD sequence. previous Example: Measuring T1 next Executing QIR programs By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "Custom Gates and Gate Implementations",
    "url": "/iqm-pulla/Custom Gates and Implementations.html",
    "description": "This notebook demonstrates how to work with user-defined quantum operations and gate implementations that go beyond the standard gate set. Each quantum operation is associated with one or more GateImp...",
    "content": "This notebook demonstrates how to work with user-defined quantum operations and gate implementations that go beyond the standard gate set. Each quantum operation is associated with one or more GateImplementation s which translate the high-level concepts to lower-level instructions accepted by the IQM server. This example shows how the user can Selecting a non-default implementation for a gate Add a custom implementation for an existing gate Add a custom gate and a custom implementation for it by using existing gates as building blocks (composite gates) Defining new pulse waveforms for implementations Please refer to the User Guide.ipynb for basic usage, termninology, and environment setup. Circuits are usually defined without specifying implementations for any of the gates.\nThe implementations available in a given calibration set are listed in the corresponding dynamic quantum architecture, through Cocos. Let\u2019s see a list of available implementations, with their parameters: You can specify a default implementation for each native operation type in the circuit, and then override it for specific loci.\nLet\u2019s change all cz gates to use the slepian implementation, and make an execption for the qubit pair (QB1, QB2) . Note that the default implementations are merely suggestions to the compiler. If the compiler does not have calibration data for a default implementation, it will ignore it and use what it can. If you executed the cell below, you would get an error if the requested implementation 'drag_gaussian' does not have calibration data. You can also force the compiler to use a specific implementation for each circuit instruction separately in the IQM Pulse native format, which describes a circuit as a list of CircuitOperation instances. IQM Pulse allows the user to define composite gates: gates consisting of other registered gates.\nComposite gates are particularly useful because they allow reusing the calibrated of data of the other gates.\nFurthermore, it is possible to use different calibration data for the registered gates inside a composite gate than outside it. Let\u2019s define a prx implementation that acts like a normal prx , except it implements x with 2 pulses with a 100 ns wait between them.\nThe __call__ method produces a TimeBox using IQM Pulse\u2019s ScheduleBuilder.\nIt\u2019s worth mentioning that the composite gate is not restricted to using only registered gates; it could equally well return a TimeBox with lower level instructions. Now we register a new gate custom_x , which StretchedX implements. We want to make it compatible with the circuit-level prx , so we declare that it has the same parameters.\nThen we change the fist prx in the IQM Pulse circuit to use our new implementation. Inspecting the schedule, we can see that the X gate in the circuit is indeed split into two pulses with a wait in between: Finally, let\u2019s change the pulse waveforms of an existing gate. The tricky part of this is that we need to provide the calibration data by hand.\nIQM Pulse provides several \u201cgate with custom waveforms\u201d base classes so that users need only write the waveforms. Let\u2019s define a new implementation of PRX using a raised cosine pulse: The class attributes of the waveforms define the calibration data they require. The PRX_CustomWaveforms class adds some more. We can add the new prx implementation to the compiler, and check what calibration data it needs: Let us then make one of the prx gates in the circuit use our new implementation: Compiling this circuit right now would fail with an error: (The locus (\u2018QB1\u2019,) may differ in your output due to the stochastic nature of routing.) The point is that the compiler does not have necessary calibration data for this new implementation. One way to fix this is to amend the current calibration. The numbers here are arbitrary, in reality you would need to calibrate the gate parameters somehow. Data with gates.prx.raised_cosine.* is now visible in compiler.get_calibration() . Note that we added the same calibration data to all qubits. In practice, this rarely makes sense, because each qubit\nis usually calibrated differently. Now the compilation succeeds and we see that raised_cosine was used once. Using the schedule visualization you could also verify that the pulse shape is indeed different on the first prx instance. previous Compilation Stages next Examples By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "Quick Start",
    "url": "/iqm-pulla/Quick Start.html",
    "description": "IQM PulLA is a client-side software which allows the user to control the generation and execution of pulse-level instruction schedules on a quantum computer. Within the existing IQM QCCSW stack, PulLA...",
    "content": "IQM PulLA is a client-side software which allows the user to control the generation and execution of pulse-level instruction schedules on a quantum computer. Within the existing IQM QCCSW stack, PulLA is somewhere between circuit-level execution and EXA-experiment. Namely, with pulse-level access the user can: compile a quantum circuit (e.g. a Qiskit circuit) into an instruction schedule on the client side access and modify the calibration data to be used for the circuit-to-schedule compilation view and modify the default implementations of quantum gates define custom implementations of quantum gates define new composite gates out of native gates and set their calibration data control the multi-step compilation procedure, and edit the intermediate data use custom pulse shapes This notebook contains a small meaningful example for a \u201cquick start\u201d. Refer to other chapters for more details on various aspects of Pulla. Pulla provides a Qiskit backend, with limited functionality. Its main purpose is to replace the normal execution of run() , which submits circuits to the remote server, with a local compilation and submission of pulse schedules to the remote server. IQMPullaBackend does not provide any new functionality, but rather packs existing features and actions behind an illusion of using a normal Qiskit backend. You can perform all of the actions of IQMPullaBackend manually, but you may choose to use IQMPullaBackend in these cases: You don\u2019t need to control compilation, and want to use Pulla in the same way as a remote circuit-executing IQM Server uses it. You want to run some existing apps written for Qiskit, e.g. benchmarking tools; they often build on top ot the circuit abstraction, and don\u2019t necessarily give you easy access to the circuits, which makes it harder to use Pulla normally. You don\u2019t have access to a remote circuit-executing IQM Server, only to a pulse-executing IQM Server. You don\u2019t have any remote servers at all; all of the quantum control software is running locally (relevant for niche research cases) To initialize an IQMPullaBackend instance, provide 3 arguments: Quantum architecture in QuantumArchitectureSpecification format of IQM Client Instance of Pulla Instance of Compiler When IQMPullaBackend.run() is called, the following steps are performed: Given Qiskit circuits are converted to Pulla format using qiskit_circuits_to_pulla() . Circuits are compiled with the provided compiler using Compiler.compile() . Settings are generated with the provided compiler using Compiler.build_settings() . Circuits are executed on the station associated with the provided Pulla instance. Results are retrieved and converted into a DummyJob , partially compatible with Qiskit Job . Working example below: If the remote station requires authentication: Install IQM Client CLI with pip install iqm-client[cli] Run iqmclient init . The wizard will start and ask questions. Accepting defaults is ok. Wizard will ask for Authentication server URL . Usually, it\u2019s of the form https://STATION_ROOT/auth . E.g. if the Station Control URL is \"https://abc.com/station/\" , then the auth server URL is \"https://abc.com/auth/\" Run iqmclient auth login . You should see info like so: Set the environment variable IQM_TOKENS_FILE accordingly in your Jupyter notebook and pass get_token_callback to the Pulla initialization call like so: Setting IQM_TOKENS_FILE env. variable enables authentication for CoCoS as well, so your Qiskit runs against the same station will work, too. Pulla can also be used with IQM Resonance cloud service. You need to set the station URL to point to Resonance. In addition to that, you must provide a get_token_callback parameter function that returns your Resonance API token. IQM Pulse comes with a schedule visualizer. It takes a Playlist (i.e. a compressed list of instruction schedules) and a list of schedule/segment indices to inspect.\nThe playlist variable below is the one which we derived from the original Qiskit circuit using the Pulla compiler, and it only has one schedule. previous User guides next Configuration and Usage By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "Migration guide",
    "url": "/iqm-pulla/migration_guide.html",
    "description": "This document describes the changes that need to be made to existing code to migrate between major versions of Pulla. The changes in 4.0 are not truly breaking, as your code should still run. However,...",
    "content": "This document describes the changes that need to be made to existing code to migrate between major versions of Pulla. The changes in 4.0 are not truly breaking, as your code should still run. However, there are some changes that\nmight affect the compilation results, and you might want to adjust your code accordingly: New compilation pass prepend_reset added to the (TimeBox-level) standard compiler stage. It adds a reset timebox\nto all circuits. It is the last pass of the TimeBox-level stage. If the calibration lacks reset_wait data, the prepend_reset will have no effect. Optional attribute :attr: .CircuitExecutionOptions.active_reset_cycles added to CircuitExecutionOptions ,\nthat is used to control the reset functionality. By default, it is set to None , which results in delay by wait. :meth`.Pulla.get_standard_compiler` now has an optional argument for overriding default circuit execution options. The function iqm.pulla.utils_qiskit.qiskit_to_cpc was replaced by iqm.pulla.utils_qiskit.qiskit_circuits_to_pulla() and iqm.pulla.utils_qiskit.qiskit_to_pulla() . qiskit_circuits_to_pulla() is a more direct replacement, with the difference that it also requires a\nmapping of qiskit qubit indices to physical qubit names which was not required before.\nThis can be e.g. obtained from an iqm.qiskit_iqm.iqm_provider.IQMBackend instance. qiskit_to_pulla() is a convenience method that in addition to\nconverting the Qiskit circuit(s) also returns a Compiler instance that can be used to compile them\ninto a playlist. It takes as additional parameters a Pulla instance (for building the compiler),\nand an IQMBackend instance (containing the calibration set ID and\nqubit mapping to use). The IQMBackend instance should usually be the same one that was used to transpile\nthe Qiskit circuits. Compiler code is consolidated under the iqm.cpc.compiler.compiler module.\nThere is no more iqm.cpc.compiler.compiler2 . Compiler , CompilationStage are now under iqm.cpc.compiler.compiler . Pulla no longer needs CoCoS URL: Compiler initialization now requires all arguments to be keyword arguments. Pulla no longer retrieves qubit mapping from CoCoS. If your circuit uses same qubits names as physical qubits\n(e.g. QB1 , QB2 , etc.), then you don\u2019t have to do anything. If your circuit uses other qubit names, then you have to\nprovide component_mapping to the Compiler like so: If you use Qiskit, the mapping can be generated with {str(idx): qb for idx, qb in backend._idx_to_qb.items()} . .Compiler.set_default_implementation_for_locus changed to Compiler.set_default_implementation_for_loci() : Compiler.amend_calibration_for_gate_implementation() now accepts a Locus (a tuple of strings)\ninstead of string qubit name, so you can apply the change to multiple loci in a single call: iqm.pulla.utils.qiskit_to_cpc() and iqm.pulla.station_control_result_to_qiskit() , previously marked for\ndeprecation in v. 1.0, are now removed. Use iqm.pulla.utils_qiskit.qiskit_to_cpc() and iqm.pulla.utils_qiskit.station_control_result_to_qiskit() , respectively. The main change in 1.0 is the splitting of Pulla and Compiler , and the move of some compiler-related methods to\nthe more appropriate Compiler class. The Pulla class now only contains methods to retrieve calibration data,\nconstruct a standard compiler instance, and submit pulse schedules to the server. Setting default implementation is now done in the compiler directly, and there is no need to manually refresh the\ncompiler anymore. Same goes for adding implementations, and amending the calibration set with custom data for custom implementations: The calibration is now stored solely in the compiler instance, and can be retrieved using Compiler.get_calibration() : Fetching calibration sets from the server is still done via Pulla.fetch_latest_calibration_set() and Pulla.fetch_calibration_set_by_id() . Standard compilation stages are now available via get_standard_stages() . This ensures the immutability of\nbuilt-in standard stages. previous IQM Pulla next User guides By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "Examples",
    "url": "/iqm-pulla/examples.html",
    "description": "previous Custom Gates and Gate Implementations next Example: Measuring T1 By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27....",
    "content": "previous Custom Gates and Gate Implementations next Example: Measuring T1 By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "References",
    "url": "/iqm-pulla/references.html",
    "description": "Nic Ezzell, Bibek Pokharel, Lina Tewala, Gregory Quiroz, and Daniel\u00a0A. Lidar. Dynamical decoupling for superconducting qubits: a performance survey. Phys. Rev. Appl. , 20:064027, Dec 2023. arXiv:2207....",
    "content": "Nic Ezzell, Bibek Pokharel, Lina Tewala, Gregory Quiroz, and Daniel\u00a0A. Lidar. Dynamical decoupling for superconducting qubits: a performance survey. Phys. Rev. Appl. , 20:064027, Dec 2023. arXiv:2207.03670 , doi:10.1103/PhysRevApplied.20.064027 . previous License By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "API Reference",
    "url": "/iqm-pulla/API.html",
    "description": "iqm.cpc IQM Circuit to Pulse Compiler. iqm.pulla Client-side library for Pulse-level access to IQM quantum computers. previous Executing QIR programs next iqm.cpc By IQM Pulla developers \u00a9 Copyright 2...",
    "content": "iqm.cpc IQM Circuit to Pulse Compiler. iqm.pulla Client-side library for Pulse-level access to IQM quantum computers. previous Executing QIR programs next iqm.cpc By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "Contributors",
    "url": "/iqm-pulla/authors.html",
    "description": "Rakhim Davletkaliyev < rakhim . davletkaliyev @ meetiqm . com > Ville Bergholm < ville @ meetiqm . com > Joni Ikonen < joni @ meetiqm . com > Arianne Meijer < qaremei @ meetiqm . com > Tuukka Hiltunen...",
    "content": "Rakhim Davletkaliyev < rakhim . davletkaliyev @ meetiqm . com > Ville Bergholm < ville @ meetiqm . com > Joni Ikonen < joni @ meetiqm . com > Arianne Meijer < qaremei @ meetiqm . com > Tuukka Hiltunen < tuukka @ meetiqm . com > Jussi Ritvas < jussi . ritvas @ meetiqm . com > Miikka Koistinen < miikka @ meetiqm . com > previous Changelog next License By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "Configuration and Usage",
    "url": "/iqm-pulla/Configuration and Usage.html",
    "description": "This notebook describes the basic concepts and configuration of Pulla. Now let\u2019s create a Pulla object. A Pulla object is conceptually an IQM quantum computer client for fetching calibration data and ...",
    "content": "This notebook describes the basic concepts and configuration of Pulla. Now let\u2019s create a Pulla object. A Pulla object is conceptually an IQM quantum computer client for fetching calibration data and constructing a circuit-to-pulse compiler. . It consists of: methods for fetching calibration sets from the server methods for fetching metadata about the QC from the server method for executing pulse-level instruction schedules (e.g. ones created by the compiler) A Compiler object defines a particular circuit-to-pulse compilation logic . It consists of: single calibration set schedule builder based on the calibration set circuit compilation options information about the QC (chip topology, channel properties, etc.) compilation stages set of available circuit-level quantum operations (\u201cnative operations\u201d) (including user-defined operations) set of implementations for each native operation (including user-defined implementations) methods for manipulating the calibration, operations, and implementations Pulla can construct a standard compiler equivalent to the one used by the server side (CoCoS). You can also construct a Compiler manually. To create an instance of Pulla, you need to provide the URL of Station Control. Upon successful initialization, some configuration data is printed (the verbosity of such messages will be controlled by a debug level value). You can access various things like channel properties of the connected station, chip topology, or the current calibration. The initial calibration is the latest calibration of the connected station. Call get_standard_compiler() method to get an instance of Compiler . It will be pre-populated with the latest default calibration set and standard compilation stages. This standard compiler is the same one that CoCoS uses on the server side when processing circuits. get_standard_compiler() fetches the latest calibration set from the server. This network request takes a few moments. You may want to create many Compiler instances without such delay. It may also be possible that, due to human error, the latest calibration set stored on the server is invalid (or incompatible with your version of Pulla or IQM Pulse). In that case get_standard_compiler() will fail. To avoid this, you can pass the calibration set manually, and Pulla will construct the compiler with it instead of getting one from the server. If you want to reuse the calibration of an existing compiler, call Compiler.get_calibration() , e.g.: You can also get a specific calibration set from the server if you know its UUID by calling Pulla.fetch_calibration_set_by_id() , e.g.: The compiler initializes with the following default configuration options: circuit_boundary_mode='all' measurement_mode='all' heralding_mode='none' dd_mode='none' You can change them by changing the corresponding attributes of compiler.options . For the constant implementation of the measure operation, the readout type is controlled by the acquisition_type parameter. By default, it\u2019s set to \"threshold\" . Let\u2019s change it to \"complex\" . The full key in the calibration set dictionary is gates.measure.constant.QUBIT.acquisition_type , where QUBIT is the physical qubit name. Note that we call get_calibration() to get a copy of the compiler\u2019s current calibration set, make changes to the copy, then replace the compiler\u2019s set with the copy. The compiler always contains a single calibration set only. previous Quick Start next Compilation Stages By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "Compilation using a locally created calibration set",
    "url": "/iqm-pulla/Example - Compilation With Local Calibration Set.html",
    "description": "This notebook shows how to construct a calibration set locally and use the local calibration set for compiling circuits. The calibration itself is done using IQM\u2019s Graph Based Calibration (GBC) softwa...",
    "content": "This notebook shows how to construct a calibration set locally and use the local calibration set for compiling circuits. The calibration itself is done using IQM\u2019s Graph Based Calibration (GBC) software. In this notebook we show recalibration based on the latest calibration set. The usage of Pulla with a local calibration set works mostly the same way also for a full calibration from scratch. In that case you would just have to use a different GBC graph, and possibly manually add observations to the observation stash if it does not yet have all observations required for a valid calibration set. Using the principles shown in this notebook, it is possible to use all Pulla functionality as a helpful tool during the calibration process. NOTE: Some of the libraries used in this notebook are only available to on-premise customers and are not currently available publicly. First we prepare a Pulla object, a qiskit-iqm backend, and a circuit as explained in Quick Start.ipynb . Let\u2019s also define a function that compiles and runs the above circuit using the given compiler state. This function will be used to compile and execute the circuit at different points of the calibration process: First we compile and execute the circuit using the compiler obtained above, which uses the current default calibration set on the server. The results of this execution can then be compared to the results after performing (parts of) the recalibration process. Now we will start recalibration using GBC. We need a CalibrationSetWrapper instance for handling calibration sets and a Calibrator for running the calibration: To start with, we run the first node that runs any actual calibration experiments: Then we can create a local calibration set based on the results of the above calibration node, and update the compiler to use this calibration set. We compile and execute a circuit using the updated compiler to see how our updates to the calibration set affect the results. Because many observations of the updated calibration set don\u2019t yet take into account the results of the executed node, the results could even be worse than before updating the calibration set with these intermediate results. We could repeat the above steps multiple times for different nodes of the calibration graph, to see how the results change during the calibration process. Finally, we run the full recalibration, which runs all the remaining nodes that we did not run above: Then we again update the compiler using the results of the calibration in the same way as before. If the full recalibration was successful, the execution results should hopefully be at least as good as before the recalibration. By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "IQM Pulla",
    "url": "/iqm-pulla/index.html",
    "description": "7.18.0 2025-05-27 Client-side library for Pulse-level access to IQM quantum computers. Index Module Index Search Page next IQM Pulla By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Rele...",
    "content": "7.18.0 2025-05-27 Client-side library for Pulse-level access to IQM quantum computers. Index Module Index Search Page next IQM Pulla By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "Import required packages",
    "url": "/iqm-pulla/Example - Randomized Benchmarking.html",
    "description": "Contact: pedro.romero@meetiqm.com & manish.thapa@meetiqm.com NB: Familiarity with quantum channels, gates and Clifford gates is assumed. The idea behind Clifford Randomized Benchmarking (CRB) is that ...",
    "content": "Contact: pedro.romero@meetiqm.com & manish.thapa@meetiqm.com NB: Familiarity with quantum channels, gates and Clifford gates is assumed. The idea behind Clifford Randomized Benchmarking (CRB) is that under certain (simplified) types of noise, the average survival probability of the initial state of a quantum system under uniformly random sequences of multi-qubit Clifford gates with sequence inversion will decay exponentially in the length of the sequences. From such decay, one can in turn infer the average fidelity of the corresponding Clifford group. CRB sequences are of the form $$\\mathcal{S} m:=\\mathcal{C} {m+1}\\circ\\mathcal{C}_m\\circ\\cdots\\circ\\mathcal{C}_1,$$ for any $m\\geq1$, where $\\mathcal{C} i(\\cdot):=C_i(\\cdot)C_i^\\dagger$ is a unitary channel with $C_i$ being a Clifford gate, and where by definition $$\\mathcal{C} {m+1}=(\\mathcal{C}_m\\circ\\cdots\\circ\\mathcal{C} 1)^{-1}.$$ It is important to notice that $C {m+1}$ is itself a Clifford gate, i.e., one would not implement the sequence $\\mathcal{C}_m\\circ\\cdots\\circ\\mathcal{C} 1$ in practice, but rather compile the corresponding unitary operator $C_mC {m-1}\\cdots{C}_1$ into a single Clifford gate. The main assumption is that the real noisy gates can be approximately modeled independently by a quantum channel $\\mathcal{E}$ (completely positive, trace non-increasing map) as $\\tilde{\\mathcal{C}}_i\\approx\\mathcal{E}\\circ\\mathcal{C}_i$, or (ultimately equivalently) as $\\tilde{\\mathcal{C}}_i\\approx\\mathcal{C}_i\\circ\\mathcal{E}$. This implies that the noise is modeled as Markovian , time-stationary and gate-independent \u2014 while here we will take these for granted, a lot about RB in more general regimes is known, but it is in general more complicated, and often this simplistic scenario goes a long way as a useful first approximation. NB: CRB is not generally intended to work for $n>2$, both because of the scaling of the size of the $n$-qubit Clifford group in $n$, and because such gates have to eventually be transpiled to a native basis of 1Q and 2Q gates! While a high level of optimization in transpile is usually desirable, one must be careful for the optimization not to mess with the Clifford gates, i.e., we want the transformations between barriers in the circuit to implement a Clifford regardless of how it is decomposed. The specific decomposition still matters, however, because the (average) number of 2Q and 1Q gates (i.e., cz and r , respectively) will dictate how noisily we can implement the Cliffords on average, i.e., the average gate fidelity we will ultimately obtain. We will not do this check here, but it is now known that a good decomposition of Clifford gates in our basis will have on average 8.25 cz gates and 1.5 r gates (e.g., see arXiv:1402.4848 ). We can count the number of native 1Q and 2Q gates by using the circuit attribute count_ops() One important reason why CRB works \u2013and why specifically it uses Clifford gates\u2013, is that the uniformly distributed multi-qubit Clifford group forms a unitary 2-design. This essentially means that any quantity that takes two copies of the pair $C, C^\\dagger$ and then averaged over all possible $C$s, will be exactly the same as if $C$ had been any uniformly distributed (so-called Haar) random unitary. This matters because there are plenty of results allowing to easily compute such quantities (i.e., second moments) over the whole uniformly distributed unitary group \u2014 in fact, such second moment simply takes the form of a depolarizing channel (RB precisely extracts the average gate fidelity through the corresponding polarization parameter). The CRB sequences are quantities of this type because of the final inverse at the end (i.e. all sequences will have 2 copies of pairs $C_i,C_i^\\dagger$ for all $i=1,2,\\ldots,m$). This is the reason why the theory behind RB, under the noise assumptions above, can ensure that the decay in average fidelity, i.e., quantities like $$f_0=\\langle0|\\mathcal{S}_m(|0\\rangle!\\langle0|)|0\\rangle$$ take the form of a function $$f_0=Ap^m+B$$ for $0\\leq{A,B,p}\\leq1$. Furthermore, it ensures that $p$ will encode the average gate fidelity of the noisy Clifford gates, whilst $A,B$ will encode (and isolate) errors due to state preparation and measurement. This is what is meant by RB being SPAM-robust. In the modeling with assummptions of noisy gates above, this means $p\\sim\\int{d}\\psi\\langle\\psi|\\mathcal{E}(|\\psi\\rangle!\\langle\\psi|)|\\psi\\rangle$ for all possible uniformly distributed pure states $|\\psi\\rangle$, and $A\\sim\\langle0|\\mathcal{E} \\text{spam}(|0\\rangle!\\langle0|)|0\\rangle$, $B\\sim\\langle0|\\mathcal{E} \\text{spam}(\\mathbb{I}/2^n)|0\\rangle$ for a composition of the state preparation and measurement noise. We may now fix a number of circuit samples and sequence lengths. Despite the Clifford group having a (super) exponential amount of terms (e.g., 24 for 1Q, then 11,520 for 2Q), approximating the average over the whole group with finite samples quickly converges to the Haar average. On the other hand, the sequence lengths can be chosen as exponentially spaced and aiming at long sequences, if possible, serves to better determine the offset constant (often named the nuisance parameter, for obvious reasons) in the decay. Depending on how many circuits we want to execute, we could either generate all circuit samples for all circuit lengths and send all for execution once, or we may, for example, generate a given amount of circuits, send them to execution while meanwhile continuing to generate circuits and sending them. In either case, one may retrieve the results later. Here we will generate all circuits for all sequence lengths, and send them to execute as a single batch on the backend. It is generally a good idea to store (at least at this stage) both the abstract and the transpiled circuits, so that we can inspect them later on. We can inspect the circuits just as a sanity check Task : Count the average number of 1Q and 2Q gates in the circuits for each sequence length. Task : Since the Clifford group is a 2-design, its so-called frame potential (see e.g., arXiv:1610.04903 ) has to satisfy $\\displaystyle{\\sum_{k,,k^\\prime=1}^K}\\left|\\mathrm{tr}\\left(C_{k^\\prime}^{\\dagger}C_k\\right)\\right|^4/K^2 = 2$. Verify this condition for the 1Q Clifford group. warning for the 2Q Clifford group: there are in total $n=11,520^2 = 132,710,400$ values in the sum! It suffices to compute the values in a triangular part of the matrix $U_{k^\\prime}^{\\dagger}U_k$  \u2014 so you can definitely verify this property, however there will still be $n(n-1)/2$ such terms for your computer to sum up! We can now send the transpiled circuits to be run on the hardware. NB: It is generally preferable to use backend.run instead of execute command, since the latter performs a transpilation pass \u201cunder the hood\u201d. We can now inspect the results for a given sequence length (we will use the one defined above). The counts at the ground state relate to the survival probability (or state fidelity) of such state under our random Clifford circuits. Task : Compare the histograms between the outcomes for the narrowest and the deepest circuits NB: You can wrap plot_histogram() with display(*) to show both results in one cell By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "Common errors",
    "url": "/iqm-pulla/common_errors.html",
    "description": "This document describes some common errors which you may encounter when using Pulla, and ways to fix them. If you have modified any timing aspect of the schedule, you may encounter an error like this:...",
    "content": "This document describes some common errors which you may encounter when using Pulla, and ways to fix them. If you have modified any timing aspect of the schedule, you may encounter an error like this: The granularity is an instrument limitation. Specifically, the part (e.g. HDAWG) which plays the drive pulses.\nSome instrument may use e.g. a sample rate of 2.4 GHz, and each instruction duration must be an integer multiple of 16\nsamples. Instructions therefore must be a multiple of 6.666ns (16 / 2.4 GHz).\nDurations that are within 0.005 samples of an allowed number of samples are rounded to that\n(the software assumes it is what the user meant), otherwise an error is raised. Different stations have different instruments.\nIQM instruments use a fixed sample rate of 2 GHz, and have a granularity of 8 samples. You can view the granularity information in channel properties, for example Pulla.get_channel_properties()[0]['QB1__drive.awg'] : If you were to turn off the error and use an instruction with a duration that does not fit the granularity, it would\njust silently be extended to the next longest allowed granularity, and would not do what you expect. previous iqm.pulla.utils_qiskit.IQMPullaBackend next Changelog By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "Compilation Stages",
    "url": "/iqm-pulla/Compilation Stages.html",
    "description": "The generic lifecycle of a Pulla job is a one-way multi-step transformation. The states are as follow: Quantum Circuit in a specific format (e.g. Qiskit, Cirq) Equivalent Quantum Circuit in an IQM Pul...",
    "content": "The generic lifecycle of a Pulla job is a one-way multi-step transformation. The states are as follow: Quantum Circuit in a specific format (e.g. Qiskit, Cirq) Equivalent Quantum Circuit in an IQM Pulse format (list of CircuitOperations) IQM Pulse nested Timebox representation IQM Pulse Schedule representation Measurement results You don\u2019t have to start with a circuit, you can define quantum operations directly (roughly starting from state 2), or define pulse shapes directly (roughly starting from state 3 or 4). The compilation which produces states 3 and 4 is itself multi-step: it consists of multiple stages, and each stage of one or more passes. Let\u2019s go over the generic use case, starting from creating a Qiskit circuit to work on: Pulla has utility functions which accept circuits in different formats (Qiskit, Cirq, IQM JSON) and convert them into Pulla/IQM Pulse format, which is a list of CircuitOperation objects. Let\u2019s do that. Note that none of the operations have an implementation specified ( implementation=None ). The Qiskit conversion utility also gives us a standard compiler with the same calibration set as the one used by backend , in this case the current default one. In order to understand how the compilation stages work, let\u2019s remove the standard stages from the compiler: You can check the readiness of the compiler by calling compiler.ready() . Right now it would return False due to empty stages list. The compiler flow consists of one or more stages, and each stage consists of one or more passes. When the compiler is initialized created by Pulla, it is pre-populated with standard stages. You can define your own stages, with your own passes, grouping them in some meaningful way. Each pass is a function which accepts two arguments: data and context. Data is an iterable of objects of an applicable data type, and context is a dictionary of any additional information. Each pass can transform the data and modify the context, and must return both data and context. This convention allows the compiler to pipe arbitrary amount of passes. A stage is just an ordered collection of passes. The compiler has methods run_stage() and run_pass() allowing you to run particular stages or passes. The compile() method is just calling run_stage() in correct order and passes its initial context to the first pass of the first stage. Let\u2019s write a simple compilation stage to illustrate the concept: Now let\u2019s write two simple passes for that stage. For the first: perhaps we want to add a leading barrier to each circuit. add_leading_barrier below determines the locations of qubits used in the circuit and adds a barrier on those qubits as the first instruction. Note that the function takes data and context and returns data and context. It happens to neither use nor modify the context, but it should still provide it down to the next passes. Ok, let\u2019s define another pass: this one would increase the phase of each prx operation by 0.25 . This may or may\nnot make practical sense, but bear with us for the purposes of illustration: Now let\u2019s add those two passes to our stage, then replace the empty stages property of the compiler with a list consisting of our single stage, and then call show_stages() : The boolean flag full of show_stages() is optional; when True , the doc strings of each pass are printed on the screen. Now that the compiler is ready and we can run compile . The compiler always operates on batches of circuits, so you need to provide an iterable; in our case, it\u2019s a list with a single circuit. Note that it did not really compile the circuits into pulse schedules, because the only passes we\u2019ve defined only modify the circuits, but don\u2019t perform the conversion to pulse schedules. The compilation to pulse schedules usually consists of converting circuits to TimeBox es, then resolving TimeBox es into a single TimeBox , then resolving it into a Schedule , and finally converting a Schedule into a final Schedule ready to be submitted to the server. There might be cases when your compilation stages need additional data. You can provide such data as a custom context dictionary. Get the initial compiler context and modify it, then pass it when calling compile . As mentioned earlier, Pulla comes with a pre-defined \u201cstandard\u201d set of stages which you can use and, if needed, modify. These standard stages are used by CoCoS if you were to submit a circuit to CoCoS (without using Pulla). Thus, if you use the same version of the Pulla library that the remote CoCoS uses, you will be able to produce and inspect the same pulse schedules that CoCoS would (assuming you use the same calibration set). Let\u2019s replace our current single stage with standard stages, and view them: There are 7 standard stages: circuit-level: takes care of validating the circuit, renaming some deprecated names, gathering\ninformation for the next stages circuit resolution: converts circuits to TimeBox es timebox-level: optimizes \u201cmeasure\u201d gates by multiplexing them if possible timebox resolution: converts TimeBox es to Schedule schedule-level: applies dynamical decoupling schedule-level: potentially applies some corrections, then cleans up the schedules schedule resolution: converts Schedule to the final Playlist ready to be executed Variable data now contains the Playlist in its final form, and context contains a dictionary of various things\nwhich were either necessary in some of the passes, or will be necessary for the final execution. It also contains a\ncopy of schedules from before the final playlist resolution. Some of those pieces of data will be needed to build\nStation  Control settings (more on that later). Instead of calling compile() , which runs all the stages, you can run each stage, or even each separate pass, by yourself. In that case you will have to take care of two things: Provide initial context to the first pass of the first stage. Save data and context returned by each pass (or stage) in order to provide it to the next pass (or stage). To help you with 1, the compiler has a method compiler_context() which returns a dictionary of initial context. (Note: to run a pass of any particular stage: compiler.stages[0].passes[0](data, context) ) Let\u2019s create another circuit and compile it manually. We\u2019ll use this example to understand each standard stage: The first stage is circuit-level passes: When defining a circuit in IQM JSON or IQM Pulse format directly, you can specify an implementation for each gate (selecting from implementations provided by the calibration set). If no implementation is specified, the standard circuit-level stage will select the default implementation for each gate automatically. Currently, the choice of the default implementation is global: e.g. prx may have drag_gaussian as the default. In the future, the calibration may yield different implementations for different loci, striving to provide the best quality. Now we can convert the circuit to TimeBox es. TimeBox is a concept of IQM Pulse: a container for one or more instruction schedule fragments, to be scheduled according to a given scheduling strategy. timeboxes is a list of TimeBox objects, and you can edit them manually. A TimeBox can contain multiple children TimeBox es, each containing either more TimeBox es or a Schedule . A TimeBox containing a Schedule rather than children is referred to as \u201catomic\u201d. In our example here the circuit was converted into one TimeBox containing 11 children atomic TimeBox es, which correspond to 11 circuit operations (7 gates + 1 barrier gate + 3 measurement gates). An atomic TimeBox holds its Schedule in an atom property: Next is a timebox-level stage, which only has one pass: multiplexing measurements. The measure_all() we called when\ncreating the circuit adds a single TimeBox with the gate implementation Measure_Constant for each qubit in the\ncircuit.\nWith the measurement_mode='all' option, the first stage has also added a measurement TimeBox for the unused qubits. Multiplexing means executing all of these measurements at once, instead of one after the other.\nThe multiplexing pass does this optimization for us: If you construct a circuit in Qiskit, and want to ensure multiplexing of measurement instructions, you have to \u201cwrap\u201d a group of measurement instructions with barrier s. This would prevent the Qiskit transpiler from putting any other instructions, acting on the same qubits, in between measurements, thus allowing the compiler to multiplex. Next we convert TimeBox es into a single Schedule . This is a recursive process which resolves all nested TimeBox es into atomic TimeBox es, and finally assembles a single Schedule out each of batches of TimeBox es. At this stage, all relative timings between pulses are resolved and fixed. Dynamical decoupling pulse sequences get inserted to replace Wait instructions. The process is controlled by a user-submitted dynamical decoupling strategy. By default, this stage is disabled. Please see other notebooks for examples of how to enable and apply dynamical decoupling. Next is a schedule-level stage. Its first pass applies calibrated phase corrections if MOVE gates are used (only applicable to QCs with computational resonator, i.e. IQM Star Architecture). The second pass removes non-functional instructions from the schedules. Finally, the last stage builds a final schedule from a number of instruction schedules. A playlist is just a compressed Schedule with no duplicate information, ready to be submitted for execution. In order to submit this final schedule for execution, we have to do one more thing: build the Station Control settings. The settings control the behaviour of instruments. At this point everything is ready to be submitted for execution to the server. Namely, these three objects will be used to construct a request to Station Control Service: playlist : sequence of instruction schedules corresponding to the batch of circuits to be executed settings : Station Control settings node context['readout_mappings'] : a mapping from measurement keys to the names of readout controller acquisition labels that will hold the measurement results Now we can convert these raw results into a Qiskit Result object: We can also submit the same circuit to CoCoS for execution. CoCoS is essentially a server-side Pulla with fixed standard stages. Since we started with a normal Qiskit backend and a circuit, execution is as simple as: previous Configuration and Usage next Custom Gates and Gate Implementations By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "Executing QIR programs",
    "url": "/iqm-pulla/Example - Executing QIR programs.html",
    "description": "If you have a QIR string or bitcode, you can start by creating Pulla-compatible circuits representation. You can also generate a QIR string or bitcode from a qiskit circuit using IQM\u2019s fork of qiskit_...",
    "content": "If you have a QIR string or bitcode, you can start by creating Pulla-compatible circuits representation. You can also generate a QIR string or bitcode from a qiskit circuit using IQM\u2019s fork of qiskit_qir , available as the package iqm-qiskit-qir . previous Example: Dynamical decoupling next API Reference By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils_qiskit.IQMPullaBackend",
    "url": "/iqm-pulla/api/iqm.pulla.utils_qiskit.IQMPullaBackend.html",
    "description": "Bases: IQMBackendBase A backend that compiles circuits locally using Pulla and submits them to Station Control for execution. architecture ( DynamicQuantumArchitecture ) \u2013 Describes the backend archit...",
    "content": "Bases: IQMBackendBase A backend that compiles circuits locally using Pulla and submits them to Station Control for execution. architecture ( DynamicQuantumArchitecture ) \u2013 Describes the backend architecture. pulla ( Pulla ) \u2013 Instance of Pulla used to execute the circuits. compiler ( Compiler ) \u2013 Instance of Compiler used to compile the circuits. Attributes max_circuits The maximum number of circuits (or Pulse schedules) that can be run in a single job. architecture Dynamic quantum architecture of the backend instance. name Name of the backend. description Optional human-readable description. online_date Date that the backend came online. backend_version Version of the backend being provided. Methods _default_options () Return the default options run (run_input,\u00a0**options) Run on the backend. Run on the backend. This method returns a Job object\nthat runs circuits. Depending on the backend this may be either an async\nor sync call. It is at the discretion of the provider to decide whether\nrunning should block until the execution is finished or not: the Job\nclass can handle either situation. run_input ( QuantumCircuit or Schedule or ScheduleBlock or list ) \u2013 An\nindividual or a list of QuantumCircuit , ScheduleBlock , or Schedule objects to\nrun on the backend. options \u2013 Any kwarg options to pass to the backend for running the\nconfig. If a key is also present in the options\nattribute/object then the expectation is that the value\nspecified will be used instead of what\u2019s set in the options\nobject. The job object for the run Job The maximum number of circuits (or Pulse schedules) that can be\nrun in a single job. If there is no limit this will return None previous iqm.pulla.utils_qiskit.DummyJob next Common errors By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.interface.compiler.ReadoutMapping",
    "url": "/iqm-pulla/api/iqm.cpc.interface.compiler.ReadoutMapping.html",
    "description": "Type for matching measurement keys from the quantum circuit with acquisition labels in Station Control. In quantum circuits, measurements are identified by measurement keys.\nMeasurements in Station Co...",
    "content": "Type for matching measurement keys from the quantum circuit with acquisition labels in Station Control. In quantum circuits, measurements are identified by measurement keys.\nMeasurements in Station Control are identified by acquisition labels specific to a readout controller.\nThis type is a dictionary mapping measurement keys to lists of acquisition labels \u2014 each acquisition\nlabel should hold the readout of a single qubit at a single point in the circuit, and the order in\nthe list corresponds to the order of qubits in the measurement instruction. E.g. if one has\nmeasurement instruction with key='mk' and qubits=[QB2, QB1] , then the corresponding entry in\nthis dict would be 'mk': ('QB2__mk', 'QB1__mk') The values of the ReadoutMapping are used to determine which measurement results Station Control\nshould return to Cocos. alias of dict [ str , tuple [ str , \u2026]] previous iqm.cpc.interface.compiler.PRXSequence next iqm.cpc.interface.compiler.ReadoutMappingBatch By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.interface.compiler.ReadoutMappingBatch",
    "url": "/iqm-pulla/api/iqm.cpc.interface.compiler.ReadoutMappingBatch.html",
    "description": "Type that represents tuple of readout mappings, one per each circuit in a circuit batch. alias of tuple [ dict [ str , tuple [ str , \u2026]], \u2026] previous iqm.cpc.interface.compiler.ReadoutMapping next iqm...",
    "content": "Type that represents tuple of readout mappings, one per each circuit in a circuit batch. alias of tuple [ dict [ str , tuple [ str , \u2026]], \u2026] previous iqm.cpc.interface.compiler.ReadoutMapping next iqm.cpc.interface.compiler.Circuit By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.errors.CircuitError",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.errors.CircuitError.html",
    "description": "There is something wrong with the quantum circuit. previous iqm.cpc.compiler.errors.CalibrationError next iqm.cpc.compiler.errors.ClientError By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland...",
    "content": "There is something wrong with the quantum circuit. previous iqm.cpc.compiler.errors.CalibrationError next iqm.cpc.compiler.errors.ClientError By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils_qiskit.DummyJob",
    "url": "/iqm-pulla/api/iqm.pulla.utils_qiskit.DummyJob.html",
    "description": "Bases: JobV1 A dummy job object that can be used to retrieve the result of a locally compiled circuit. The job_id is the same as the sweep_id of the StationControlResult . Attributes Methods result ()...",
    "content": "Bases: JobV1 A dummy job object that can be used to retrieve the result of a locally compiled circuit. The job_id is the same as the sweep_id of the StationControlResult . Attributes Methods result () Return the results of the job. status () Return the status of the job, among the values of JobStatus . submit () Submit the job to the backend for execution. Return the results of the job. Return the status of the job, among the values of JobStatus . Submit the job to the backend for execution. previous iqm.pulla.utils_qiskit.station_control_result_to_qiskit next iqm.pulla.utils_qiskit.IQMPullaBackend By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.interface.TaskStatus",
    "url": "/iqm-pulla/api/iqm.pulla.interface.TaskStatus.html",
    "description": "Bases: StrEnum Status of a Station Control task. Attributes READY Task has completed successfully FAILED Task has failed PROGRESS Task is being executed PENDING Task is waiting to be executed Methods ...",
    "content": "Bases: StrEnum Status of a Station Control task. Attributes READY Task has completed successfully FAILED Task has failed PROGRESS Task is being executed PENDING Task is waiting to be executed Methods __format__ (format_spec,\u00a0/) Return a formatted version of the string as described by format_spec. __new__ (value)  __str__ () Return str(self). Task has completed successfully Task has failed Task is being executed Task is waiting to be executed previous iqm.pulla.interface.StationControlResult next iqm.pulla.interface.CHADRetrievalException By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils_cirq.cirq_to_cpc",
    "url": "/iqm-pulla/api/iqm.pulla.utils_cirq.cirq_to_cpc.html",
    "description": "Convert a Cirq Circuit to an IQM CPC Circuit. previous iqm.pulla.utils_cirq next iqm.pulla.utils_dd By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-...",
    "content": "Convert a Cirq Circuit to an IQM CPC Circuit. previous iqm.pulla.utils_cirq next iqm.pulla.utils_dd By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.standard_stages.map_components",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.standard_stages.map_components.html",
    "description": "Map the logical QPU components to physical QPU components using component_mapping . circuits ( Iterable [ Circuit ] ) \u2013 builder ( ScheduleBuilder ) \u2013 component_mapping ( dict [ str , str ] ) \u2013 previou...",
    "content": "Map the logical QPU components to physical QPU components using component_mapping . circuits ( Iterable [ Circuit ] ) \u2013 builder ( ScheduleBuilder ) \u2013 component_mapping ( dict [ str , str ] ) \u2013 previous iqm.cpc.compiler.standard_stages.get_standard_stages next iqm.cpc.compiler.standard_stages.map_old_operations By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.interface.BUFFER_AFTER_MEASUREMENT_PROBE",
    "url": "/iqm-pulla/api/iqm.pulla.interface.BUFFER_AFTER_MEASUREMENT_PROBE.html",
    "description": "Buffer that allows the readout resonator and qubit state to stabilize after a probe pulse, in s.\nTODO: not needed after EXA-2089 is done. previous iqm.pulla.interface.CircuitMeasurementResultsBatch ne...",
    "content": "Buffer that allows the readout resonator and qubit state to stabilize after a probe pulse, in s.\nTODO: not needed after EXA-2089 is done. previous iqm.pulla.interface.CircuitMeasurementResultsBatch next iqm.pulla.interface.Circuit By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.interface.compiler.CircuitMetrics",
    "url": "/iqm-pulla/api/iqm.cpc.interface.compiler.CircuitMetrics.html",
    "description": "Bases: object Metrics describing a circuit and its compilation result. Attributes min_execution_time shots * (instruction schedule duration + reset), in seconds. schedule_duration Duration of the inst...",
    "content": "Bases: object Metrics describing a circuit and its compilation result. Attributes min_execution_time shots * (instruction schedule duration + reset), in seconds. schedule_duration Duration of the instruction schedule created for the circuit, in seconds. components Locus components used in the circuit. component_pairs_with_gates Pairs of locus components which have two-component gates between them in the circuit. gate_loci Mapping from operation name to mapping from implementation name to a counter of loci of that operation in the circuit. Methods __eq__ (other) Return self==value. __repr__ () Return repr(self). components ( frozenset [ str ] ) \u2013 component_pairs_with_gates ( frozenset [ tuple [ str , str ] ] ) \u2013 gate_loci ( dict [ str , dict [ str , Counter [ tuple [ str , ... ] ] ] ] ) \u2013 schedule_duration ( float ) \u2013 min_execution_time ( float ) \u2013 Locus components used in the circuit. Pairs of locus components which have two-component gates between them in the circuit. Mapping from operation name to mapping from implementation name to a counter of loci of\nthat operation in the circuit. Duration of the instruction schedule created for the circuit, in seconds. shots * (instruction schedule duration + reset), in seconds. Lower bound on the actual execution time previous iqm.cpc.interface.compiler.CircuitExecutionOptions next iqm.cpc.interface.compiler.DDMode By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.interface.compiler.CircuitExecutionOptions",
    "url": "/iqm-pulla/api/iqm.cpc.interface.compiler.CircuitExecutionOptions.html",
    "description": "Bases: object Various discrete options for quantum circuit execution. Attributes measurement_mode  heralding_mode  dd_mode  dd_strategy  circuit_boundary_mode  move_gate_validation  move_gate_frame_tr...",
    "content": "Bases: object Various discrete options for quantum circuit execution. Attributes measurement_mode  heralding_mode  dd_mode  dd_strategy  circuit_boundary_mode  move_gate_validation  move_gate_frame_tracking  active_reset_cycles  Methods __delattr__ (name) Implement delattr(self, name). __eq__ (other) Return self==value. __hash__ () Return hash(self). __repr__ () Return repr(self). __setattr__ (name,\u00a0value) Implement setattr(self, name, value). measurement_mode ( MeasurementMode ) \u2013 heralding_mode ( HeraldingMode ) \u2013 dd_mode ( DDMode ) \u2013 dd_strategy ( DDStrategy | None ) \u2013 circuit_boundary_mode ( CircuitBoundaryMode ) \u2013 move_gate_validation ( MoveGateValidationMode ) \u2013 move_gate_frame_tracking ( MoveGateFrameTrackingMode ) \u2013 active_reset_cycles ( int | None ) \u2013 previous iqm.cpc.interface.compiler.CircuitCompilationResult next iqm.cpc.interface.compiler.CircuitMetrics By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils.InstructionLocation",
    "url": "/iqm-pulla/api/iqm.pulla.utils.InstructionLocation.html",
    "description": "Bases: tuple Return type for locate_instructions() . Attributes channel_name Alias for field number 0 duration Alias for field number 2 index Alias for field number 1 Methods __getnewargs__ () Return ...",
    "content": "Bases: tuple Return type for locate_instructions() . Attributes channel_name Alias for field number 0 duration Alias for field number 2 index Alias for field number 1 Methods __getnewargs__ () Return self as a plain tuple. __new__ (_cls,\u00a0channel_name,\u00a0index,\u00a0duration) Create new instance of InstructionLocation(channel_name, index, duration) __repr__ () Return a nicely formatted representation string _asdict () Return a new dict which maps field names to their values. _make (iterable) Make a new InstructionLocation object from a sequence or iterable _replace (**kwds) Return a new InstructionLocation object replacing specified fields with new values Alias for field number 0 Alias for field number 2 Alias for field number 1 previous iqm.pulla.utils next iqm.pulla.utils.build_settings By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils.find_circuit_boundary",
    "url": "/iqm-pulla/api/iqm.pulla.utils.find_circuit_boundary.html",
    "description": "Determine the boundary of a circuit executed on the QPU. See CircuitBoundaryMode for the definitions of the circuit boundaries. mode ( CircuitBoundaryMode ) \u2013 method of determining the circuit border ...",
    "content": "Determine the boundary of a circuit executed on the QPU. See CircuitBoundaryMode for the definitions of the circuit boundaries. mode ( CircuitBoundaryMode ) \u2013 method of determining the circuit border circuit_components ( set [ str ] | frozenset [ str ] ) \u2013 all locus components used in the circuit circuit_couplers ( set [ str ] ) \u2013 all couplers used in the circuit to apply gates device ( ChipTopology ) \u2013 describes the QPU topology boundary locus components, boundary couplers ValueError \u2013 unknown mode tuple [ set [ str ], set [ str ]] previous iqm.pulla.utils.extract_readout_controller_result_names next iqm.pulla.utils.get_hash_for By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.interface.Circuit",
    "url": "/iqm-pulla/api/iqm.pulla.interface.Circuit.html",
    "description": "Bases: BaseModel Quantum circuit to be executed. Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name name of the ...",
    "content": "Bases: BaseModel Quantum circuit to be executed. Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name name of the circuit instructions instructions comprising the circuit metadata arbitrary metadata associated with the circuit Methods to_dataclass () Convert the model to a dataclass. name ( str ) \u2013 instructions ( tuple [ Instruction , ... ] ) \u2013 metadata ( dict [ str , Any ] | None ) \u2013 name of the circuit instructions comprising the circuit arbitrary metadata associated with the circuit Convert the model to a dataclass. Circuit Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous iqm.pulla.interface.BUFFER_AFTER_MEASUREMENT_PROBE next iqm.pulla.interface.Instruction By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.standard_stages",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.standard_stages.html",
    "description": "Standard compilation stages, their constituent compiler passes, and functions for implementing them. There are 6 standard compilation stages: Circuit-to-circuit. Circuit-to-timebox. Timebox-to-timebox...",
    "content": "Standard compilation stages, their constituent compiler passes, and functions for implementing them. There are 6 standard compilation stages: Circuit-to-circuit. Circuit-to-timebox. Timebox-to-timebox. Timebox-to-schedule. Schedule-to-schedule. Schedule-to-playlist. Breakdown of compiler passes of each stage: Validate the circuit execution options. Map backwards-compatible aliases for quantum operation names into the current name. This is needed until old\noperation names such as phased_rx and measurement are no longer supported. Validate the contents of the circuits. Map the logical QPU components to physical QPU components. Provided mapping is used, if any.\nOtherwise, identity mapping is used. Choose implementations for circuit operations based on the calibration set. Derive mapping between station acquisition labels and user\u2019s measurement keys. Populates readout_mappings and heralded_components of context. Resolve the circuits to timeboxes using ScheduleBuilder.circuit_to_timebox() . Merge any MultiplexedProbeTimeBoxes inside each TimeBox using TimeBox.composite() . Add the heralding measurement timebox to all circuits if HeraldingMode in circuit execution options\nrequires it. Add a reset timebox to all circuits. Resolve the timeboxes to schedules using ScheduleBuilder.resolve_timebox() . Apply dynamical decoupling sequences to the schedule if requested. Apply resonator-related phase corrections if MOVE gates are used. Remove non-functional instructions from schedules using ScheduleBuilder._finish_schedule() . Build the playlist from the schedules using ScheduleBuilder.build_playlist() . Functions apply_dd_strategy (schedules,\u00a0builder,\u00a0options) Insert dynamical decoupling sequences into the schedules, if dynamical decoupling is enabled. apply_move_gate_phase_corrections (schedules,\u00a0...) Apply calibrated phase corrections if MOVE gates are used. build_playlist (schedules,\u00a0builder) Build the playlist from the schedules. choose_op_implementations (circuits,\u00a0builder,\u00a0...) Analyze the instructions in the circuits and pick an implementation for each (operation, locus). clean_schedule (schedules,\u00a0builder) Remove non-functional instructions from schedules . derive_readout_mappings (circuits,\u00a0builder,\u00a0...) Derive mapping between station acquisition labels and user's measurement keys. get_standard_stages ([idempotent]) Get a copy of the standard compilation stages. map_components (circuits,\u00a0builder,\u00a0...) Map the logical QPU components to physical QPU components using component_mapping . map_old_operations (circuits) Map backwards-compatible aliases for quantum operation names into the current name. merge_multiplexed_timeboxes (circuit_box) Merge any MultiplexedProbeTimeBoxes inside a TimeBox representing a circuit. multiplex_readout (timeboxes) Merge any MultiplexedProbeTimeBoxes inside a TimeBox representing a circuit. prepend_heralding (timeboxes,\u00a0builder,\u00a0...) Add the heralding measurement timebox to all circuits. prepend_reset (timeboxes,\u00a0builder,\u00a0options,\u00a0...) Add a reset timebox to all circuits. resolve_circuits (circuits,\u00a0builder) Resolve the circuits to timeboxes. resolve_timeboxes (timeboxes,\u00a0builder) Resolve the timeboxes to schedules. validate_circuits (circuits,\u00a0builder) Validate the contents of the quantum circuits. validate_execution_options (circuits,\u00a0options) Validate the circuit execution options (only some combinations make sense). previous iqm.cpc.compiler.errors.UnknownLogicalQubitError next iqm.cpc.compiler.standard_stages.apply_dd_strategy By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.standard_stages.validate_execution_options",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.standard_stages.validate_execution_options.html",
    "description": "Validate the circuit execution options (only some combinations make sense). circuits ( Iterable [ Circuit ] ) \u2013 options ( CircuitExecutionOptions ) \u2013 previous iqm.cpc.compiler.standard_stages.validate...",
    "content": "Validate the circuit execution options (only some combinations make sense). circuits ( Iterable [ Circuit ] ) \u2013 options ( CircuitExecutionOptions ) \u2013 previous iqm.cpc.compiler.standard_stages.validate_circuits next iqm.cpc.compiler.station_settings By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.dd.merge_wait_instructions_in_schedule",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.dd.merge_wait_instructions_in_schedule.html",
    "description": "Merge adjacent Wait instructions in the drive channels of the given schedule. Makes a deep copy schedule and iterates through its drive channels to merge adjacent Wait instructions into a single Wait ...",
    "content": "Merge adjacent Wait instructions in the drive channels of the given schedule. Makes a deep copy schedule and iterates through its drive channels to merge adjacent Wait instructions into a single Wait instruction. Also merges Wait instructions if they are separated by Block instructions. builder ( ScheduleBuilder ) \u2013 Provides channel information. schedule ( Schedule ) \u2013 Schedule to process. Deep copy of schedule with Wait instructions merged. Schedule previous iqm.cpc.compiler.dd.insert_dd_sequences next iqm.cpc.compiler.errors By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.standard_stages.map_old_operations",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.standard_stages.map_old_operations.html",
    "description": "Map backwards-compatible aliases for quantum operation names into the current name. circuits ( Iterable [ Circuit ] ) \u2013 previous iqm.cpc.compiler.standard_stages.map_components next iqm.cpc.compiler.s...",
    "content": "Map backwards-compatible aliases for quantum operation names into the current name. circuits ( Iterable [ Circuit ] ) \u2013 previous iqm.cpc.compiler.standard_stages.map_components next iqm.cpc.compiler.standard_stages.merge_multiplexed_timeboxes By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils.build_settings",
    "url": "/iqm-pulla/api/iqm.pulla.utils.build_settings.html",
    "description": "Construct the Station Control settings needed for executing a batch of quantum circuits. shots ( int ) \u2013 number of times to execute/sample each circuit calibration_set ( dict [ str , bool | str | int ...",
    "content": "Construct the Station Control settings needed for executing a batch of quantum circuits. shots ( int ) \u2013 number of times to execute/sample each circuit calibration_set ( dict [ str , bool | str | int | float | complex | ndarray ] ) \u2013 calibration data for the station the circuits are executed on builder ( ScheduleBuilder ) \u2013 schedule builder object, encapsulating station properties and gate calibration data circuit_metrics ( Iterable [ CircuitMetrics ] ) \u2013 statistics about the circuits to be executed options ( CircuitExecutionOptions ) \u2013 various discrete options for circuit execution that affect compilation Station Control settings SettingNode previous iqm.pulla.utils.InstructionLocation next iqm.pulla.utils.calset_from_observations By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.interface",
    "url": "/iqm-pulla/api/iqm.cpc.interface.html",
    "description": "Pydantic models used by the API. Subpackages and modules compiler Pydantic models used by the API. previous iqm.cpc.compiler.station_settings.Map next iqm.cpc.interface.compiler By IQM Pulla developer...",
    "content": "Pydantic models used by the API. Subpackages and modules compiler Pydantic models used by the API. previous iqm.cpc.compiler.station_settings.Map next iqm.cpc.interface.compiler By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils.initialize_schedule_builder",
    "url": "/iqm-pulla/api/iqm.pulla.utils.initialize_schedule_builder.html",
    "description": "Initialize a new schedule builder for the station, validate that it is configured properly. calibration_set ( dict [ str , bool | str | int | float | complex | ndarray ] ) \u2013 calibration data for the s...",
    "content": "Initialize a new schedule builder for the station, validate that it is configured properly. calibration_set ( dict [ str , bool | str | int | float | complex | ndarray ] ) \u2013 calibration data for the station the circuits are executed on chip_topology ( ChipTopology ) \u2013 topology of the QPU the circuits are executed on channel_properties ( dict [ str , ChannelProperties ] ) \u2013 properties of control channels on the station component_channels ( dict [ str , dict [ str , str ] ] ) \u2013 QPU component to function to channel mapping schedule builder for the station ScheduleBuilder previous iqm.pulla.utils.get_hash_for next iqm.pulla.utils.iqm_circuit_to_gate_implementation By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.standard_stages.merge_multiplexed_timeboxes",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.standard_stages.merge_multiplexed_timeboxes.html",
    "description": "Merge any MultiplexedProbeTimeBoxes inside a TimeBox representing a circuit. This pass optimizes a situation where multiple \u201cmeasure\u201d gates on disjoint set of loci exist sequentially in the\ncircuit.\nW...",
    "content": "Merge any MultiplexedProbeTimeBoxes inside a TimeBox representing a circuit. This pass optimizes a situation where multiple \u201cmeasure\u201d gates on disjoint set of loci exist sequentially in the\ncircuit.\nWithout optimization, each gate would result in a separate trigger event, which results in worse performance.\nFor example, with the measurement instructions [M(QB1), M(QB2), M(QB3)], we\u2019d first measure QB1, then QB2, then QB3.\nThis optimization merges the measurement timeboxes, so that we\u2019ll measure QB1, QB2, and QB3 at the same time\n(if the hardware channel configuration allows it), corresponding to M(QB1, QB2, QB3). Goes through the children of circuit_box , and places them in the same temporal order.\nWhenever a MultiplexedProbeTimeBox is encountered (i.e. from a measure gate), it is merged with the previous pending\nMultiplexedProbeTimeBox and left pending.\nIf any other box type with colliding loci is encountered, first places the pending MultiplexedProbeTimeBox.\nThis essentially delays all measurements until the last possible moment. circuit_box ( TimeBox ) \u2013 Timebox representing a circuit, where each child should represent a single gate. A new Timebox with the same content, except with some MultiplexedProbeTimeBoxes merged. TimeBox previous iqm.cpc.compiler.standard_stages.map_old_operations next iqm.cpc.compiler.standard_stages.multiplex_readout By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils.calset_to_cal_data_tree",
    "url": "/iqm-pulla/api/iqm.pulla.utils.calset_to_cal_data_tree.html",
    "description": "Build an iqm-pulse QuantumOp calibration data tree from a calibration set. Splits the dotted observation names that are prefixed with \u201cgates.\u201d into the corresponding\ncalibration data tree paths. calib...",
    "content": "Build an iqm-pulse QuantumOp calibration data tree from a calibration set. Splits the dotted observation names that are prefixed with \u201cgates.\u201d into the corresponding\ncalibration data tree paths. calibration_set ( dict [ str , bool | str | int | float | complex | ndarray ] ) \u2013 dict [ str , dict [ str , dict [ tuple [ str , \u2026] | None, dict [ str , Any ]]]] previous iqm.pulla.utils.calset_from_observations next iqm.pulla.utils.circuit_operations_to_cpc By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils_dd.generate_phases_of_urn_sequence",
    "url": "/iqm-pulla/api/iqm.pulla.utils_dd.generate_phases_of_urn_sequence.html",
    "description": "Generate PRX gate phases for the URn sequence. More information on the URn sequence is available in [ 1 ] , at the end in Appendix A.1. n ( int ) \u2013 Number of single qubit PRX pulses with different pha...",
    "content": "Generate PRX gate phases for the URn sequence. More information on the URn sequence is available in [ 1 ] , at the end in Appendix A.1. n ( int ) \u2013 Number of single qubit PRX pulses with different phases to apply, must be a positive even number. Phases to be used by the URn sequence. list [ float ] previous iqm.pulla.utils_dd next iqm.pulla.utils_qiskit By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils.calset_from_observations",
    "url": "/iqm-pulla/api/iqm.pulla.utils.calset_from_observations.html",
    "description": "Create a calibration set from the given observations. calset_observations ( Iterable [ ObservationBase ] ) \u2013 observations that form a calibration set calibration set dict [ str , bool | str | int | fl...",
    "content": "Create a calibration set from the given observations. calset_observations ( Iterable [ ObservationBase ] ) \u2013 observations that form a calibration set calibration set dict [ str , bool | str | int | float | complex | ndarray ] previous iqm.pulla.utils.build_settings next iqm.pulla.utils.calset_to_cal_data_tree By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.station_settings.Map",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.station_settings.Map.html",
    "description": "Bases: object Mapping from a calibration observation path to a corresponding station settings path. If settings_path_template is None , it is derived from observation_path_template . A Parameter objec...",
    "content": "Bases: object Mapping from a calibration observation path to a corresponding station settings path. If settings_path_template is None , it is derived from observation_path_template . A Parameter object is included in the mapping to conveniently handle the unit and data type.\nIts name is unused. Attributes required  settings_path_template  parameter  observation_path_template  Methods __delattr__ (name) Implement delattr(self, name). __eq__ (other) Return self==value. __hash__ () Return hash(self). __repr__ () Return repr(self). __setattr__ (name,\u00a0value) Implement setattr(self, name, value). observation_path (component) Observation path for the given component. settings_path (component) Settings path for the given component. parameter ( Parameter ) \u2013 observation_path_template ( str ) \u2013 settings_path_template ( str | None ) \u2013 required ( bool ) \u2013 Observation path for the given component. component ( str ) \u2013 str Settings path for the given component. component ( str ) \u2013 str previous iqm.cpc.compiler.station_settings.find_observation next iqm.cpc.interface By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils.circuit_operations_to_cpc",
    "url": "/iqm-pulla/api/iqm.pulla.utils.circuit_operations_to_cpc.html",
    "description": "Convert a list of CircuitOperations to an IQM CPC Circuit. circ_ops ( tuple [ CircuitOperation ] ) \u2013 The CircuitOperations to convert. name ( str | None ) \u2013 Optional name of the circuit. The equivalen...",
    "content": "Convert a list of CircuitOperations to an IQM CPC Circuit. circ_ops ( tuple [ CircuitOperation ] ) \u2013 The CircuitOperations to convert. name ( str | None ) \u2013 Optional name of the circuit. The equivalent IQM CPC Circuit. Circuit previous iqm.pulla.utils.calset_to_cal_data_tree next iqm.pulla.utils.convert_sweep_spot By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.standard_stages.multiplex_readout",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.standard_stages.multiplex_readout.html",
    "description": "Merge any MultiplexedProbeTimeBoxes inside a TimeBox representing a circuit. timeboxes ( Iterable [ TimeBox ] ) \u2013 previous iqm.cpc.compiler.standard_stages.merge_multiplexed_timeboxes next iqm.cpc.com...",
    "content": "Merge any MultiplexedProbeTimeBoxes inside a TimeBox representing a circuit. timeboxes ( Iterable [ TimeBox ] ) \u2013 previous iqm.cpc.compiler.standard_stages.merge_multiplexed_timeboxes next iqm.cpc.compiler.standard_stages.prepend_heralding By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.standard_stages.resolve_circuits",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.standard_stages.resolve_circuits.html",
    "description": "Resolve the circuits to timeboxes. circuits ( Iterable [ Circuit ] ) \u2013 builder ( ScheduleBuilder ) \u2013 list [ TimeBox ] previous iqm.cpc.compiler.standard_stages.prepend_reset next iqm.cpc.compiler.stan...",
    "content": "Resolve the circuits to timeboxes. circuits ( Iterable [ Circuit ] ) \u2013 builder ( ScheduleBuilder ) \u2013 list [ TimeBox ] previous iqm.cpc.compiler.standard_stages.prepend_reset next iqm.cpc.compiler.standard_stages.resolve_timeboxes By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.interface.compiler.DDStrategy",
    "url": "/iqm-pulla/api/iqm.cpc.interface.compiler.DDStrategy.html",
    "description": "Bases: object Describes a particular dynamical decoupling strategy. The current standard DD stategy can be found in STANDARD_DD_STRATEGY ,\nbut users can use this class to provide their own dynamical d...",
    "content": "Bases: object Describes a particular dynamical decoupling strategy. The current standard DD stategy can be found in STANDARD_DD_STRATEGY ,\nbut users can use this class to provide their own dynamical decoupling strategies. See [ 1 ] for information on DD sequences. Attributes merge_contiguous_waits Merge contiguous Wait instructions into one if they are separated only by Block instructions. skip_leading_wait Skip processing leading Wait instructions. skip_trailing_wait Skip processing trailing Wait instructions. target_qubits Qubits on which dynamical decoupling should be applied. gate_sequences Available decoupling gate sequences to chose from in this strategy. Methods __eq__ (other) Return self==value. __repr__ () Return repr(self). merge_contiguous_waits ( bool ) \u2013 target_qubits ( frozenset [ str ] | None ) \u2013 skip_leading_wait ( bool ) \u2013 skip_trailing_wait ( bool ) \u2013 gate_sequences ( list [ tuple [ int , str | list [ tuple [ float , float ] ] , str ] ] ) \u2013 Merge contiguous Wait instructions into one if they are separated only by Block instructions. Qubits on which dynamical decoupling should be applied. If None , all qubits are targeted. Skip processing leading Wait instructions. Skip processing trailing Wait instructions. Available decoupling gate sequences to chose from in this strategy. Each sequence is defined by a tuple of (ratio, gate pattern, align) : ratio: Minimal duration for the sequence (in PRX gate durations). gate pattern: Gate pattern can be defined in two ways. It can be a string containing \u201cX\u201d and \u201cY\u201d characters,\nencoding a PRX gate sequence. For example, \u201cYXYX\u201d corresponds to the\nXY4 sequence, \u201cXYXYYXYX\u201d to the EDD sequence, etc. If more flexibility is needed, a gate pattern can be\ndefined as a sequence of PRX gate argument tuples (that contain a rotation angle and a phase angle). For\nexample, sequence \u201cYX\u201d could be written as [(math.pi, math.pi / 2), (math.pi, 0)] . align: Controls the alignment of the sequence within the time window it is inserted in. Supported values: \u201casap\u201d: Corresponds to a ASAP-aligned sequence with no waiting time before the first pulse. \u201ccenter\u201d: Corresponds to a symmetric sequence. \u201calap\u201d: Corresponds to a ALAP-aligned sequence. The Dynamical Decoupling algorithm uses the best fitting gate sequence by first sorting them\nby ratio in descending order. Then the longest fitting pattern is determined by comparing ratio with the duration of the time window divided by the PRX gate duration. previous iqm.cpc.interface.compiler.DDMode next iqm.cpc.interface.compiler.HeraldingMode By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc",
    "url": "/iqm-pulla/api/iqm.cpc.html",
    "description": "IQM Circuit to Pulse Compiler. IQM Circuit to Pulse Compiler is a Python-based library for converting quantum circuits\ninto instruction schedules (which map Station Control controller names to their p...",
    "content": "IQM Circuit to Pulse Compiler. IQM Circuit to Pulse Compiler is a Python-based library for converting quantum circuits\ninto instruction schedules (which map Station Control controller names to their pulse playlists) and Station Control settings\nrequired for circuit execution, using the calibration data it is given.\nThe generated schedules and settings can be sent to Station Control\nfor execution on real or simulated quantum hardware. CPC is normally only accessed indirectly through Cocos or its reference client IQM client ,\nor a frontend such as Cirq on IQM or Qiskit on IQM . Subpackages and modules compiler Compile quantum circuits into instruction schedules and settings that can be executed on a station. interface Pydantic models used by the API. previous API Reference next iqm.cpc.compiler By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils.print_schedule",
    "url": "/iqm-pulla/api/iqm.pulla.utils.print_schedule.html",
    "description": "Print all instructions in each segment of a schedule. schedule ( Schedule ) \u2013 The schedule to print None previous iqm.pulla.utils.print_channel next iqm.pulla.utils.replace_instruction_in_place By IQM...",
    "content": "Print all instructions in each segment of a schedule. schedule ( Schedule ) \u2013 The schedule to print None previous iqm.pulla.utils.print_channel next iqm.pulla.utils.replace_instruction_in_place By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.interface.StationControlResult",
    "url": "/iqm-pulla/api/iqm.pulla.interface.StationControlResult.html",
    "description": "Bases: object Result of a station control task Attributes end_time Time when the sweep ended in the station control message Information about task failure result Sweep results converted to the circuit...",
    "content": "Bases: object Result of a station control task Attributes end_time Time when the sweep ended in the station control message Information about task failure result Sweep results converted to the circuit measurement results expected by the client start_time Time when the sweep began in the station control sweep_id ID of the executed sweep task_id ID of the station control task status Status of the station control task Methods __eq__ (other) Return self==value. __repr__ () Return repr(self). sweep_id ( UUID ) \u2013 task_id ( UUID ) \u2013 status ( TaskStatus ) \u2013 start_time ( str | None ) \u2013 end_time ( str | None ) \u2013 result ( list [ dict [ str , list [ list [ int ] ] ] ] | None ) \u2013 message ( str | None ) \u2013 ID of the executed sweep ID of the station control task Status of the station control task Time when the sweep began in the station control Time when the sweep ended in the station control Sweep results converted to the circuit measurement results expected by the client Information about task failure previous iqm.pulla.interface.Instruction next iqm.pulla.interface.TaskStatus By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.interface.compiler.CircuitBoundaryMode",
    "url": "/iqm-pulla/api/iqm.cpc.interface.compiler.CircuitBoundaryMode.html",
    "description": "Bases: StrEnum Circuit boundary mode for circuit compilation. Attributes NEIGHBOUR Circuit boundary consists of those QPU elements (qubits and couplers) that are adjacent to the qubits and couplers us...",
    "content": "Bases: StrEnum Circuit boundary mode for circuit compilation. Attributes NEIGHBOUR Circuit boundary consists of those QPU elements (qubits and couplers) that are adjacent to the qubits and couplers used by the circuit, but do not belong to them. ALL Circuit boundary consists of all the QPU elements that are not used in the circuit. Methods __format__ (format_spec,\u00a0/) Return a formatted version of the string as described by format_spec. __new__ (value)  __str__ () Return str(self). Circuit boundary consists of those QPU elements (qubits and couplers) that\nare adjacent to the qubits and couplers used by the circuit, but do not belong to them.\nSpecifically, Boundary qubits are connected to a circuit qubit by any coupler, but are not circuit qubits themselves. Boundary couplers are connected to at least one circuit qubit, but are not used in the circuit themselves. Circuit boundary consists of all the QPU elements that are not used in the circuit. previous iqm.cpc.interface.compiler.Circuit next iqm.cpc.interface.compiler.CircuitCompilationResult By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.interface.compiler.CircuitCompilationResult",
    "url": "/iqm-pulla/api/iqm.cpc.interface.compiler.CircuitCompilationResult.html",
    "description": "Bases: object Compiled circuit and associated settings returned by CPC to Cocos. Attributes playlist sequence of instruction schedules corresponding to the batch of circuits to be executed readout_map...",
    "content": "Bases: object Compiled circuit and associated settings returned by CPC to Cocos. Attributes playlist sequence of instruction schedules corresponding to the batch of circuits to be executed readout_mappings For each circuit in the batch, mapping from measurement keys to the names of readout controller result parameters that will hold the measurement results. settings Station Control settings node containing the settings for circuit execution circuit_metrics metrics describing the circuit and its compilation result for each circuit in the batch Methods __eq__ (other) Return self==value. __repr__ () Return repr(self). playlist ( Playlist ) \u2013 readout_mappings ( tuple [ dict [ str , tuple [ str , ... ] ] , ... ] ) \u2013 settings ( SettingNode ) \u2013 circuit_metrics ( tuple [ CircuitMetrics , ... ] ) \u2013 sequence of instruction schedules corresponding to the batch of circuits to be executed For each circuit in the batch, mapping from measurement keys to the names of readout\ncontroller result parameters that will hold the measurement results. If heralding is enabled, qubits\nwhich are not measured in the circuit itself but are heralded appear under the reserved key \u201c__herald. Station Control settings node containing the settings for circuit execution metrics describing the circuit and its compilation result for each circuit in the batch previous iqm.cpc.interface.compiler.CircuitBoundaryMode next iqm.cpc.interface.compiler.CircuitExecutionOptions By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.interface.ChipLabelRetrievalException",
    "url": "/iqm-pulla/api/iqm.pulla.interface.ChipLabelRetrievalException.html",
    "description": "Exception for chip label retrieval failures. previous iqm.pulla.interface.CHADRetrievalException next iqm.pulla.interface.SettingsRetrievalException By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM ...",
    "content": "Exception for chip label retrieval failures. previous iqm.pulla.interface.CHADRetrievalException next iqm.pulla.interface.SettingsRetrievalException By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla",
    "url": "/iqm-pulla/api/iqm.pulla.html",
    "description": "Client-side library for Pulse-level access to IQM quantum computers. Subpackages and modules calibration Provider of calibration sets and quality metrics from remote IQM servers. interface Common data...",
    "content": "Client-side library for Pulse-level access to IQM quantum computers. Subpackages and modules calibration Provider of calibration sets and quality metrics from remote IQM servers. interface Common data types and exceptions for the IQM Pulla interface. utils Utility functions for IQM Pulla. utils_cirq Utilities for working with Cirq objects. utils_dd Utilities for working with Dynamical Decoupling. utils_qiskit Utilities for working with Qiskit objects. previous iqm.cpc.interface.compiler.MoveGateValidationMode next iqm.pulla.calibration By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.dd",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.dd.html",
    "description": "Dynamical decoupling utilities. Module Attributes STANDARD_DD_STRATEGY The default DD strategy uses the following gate sequences: Functions insert_dd_sequences (builder,\u00a0schedule,\u00a0strategy) Insert dyn...",
    "content": "Dynamical decoupling utilities. Module Attributes STANDARD_DD_STRATEGY The default DD strategy uses the following gate sequences: Functions insert_dd_sequences (builder,\u00a0schedule,\u00a0strategy) Insert dynamical decoupling sequences into the given schedule. merge_wait_instructions_in_schedule (builder,\u00a0...) Merge adjacent Wait instructions in the drive channels of the given schedule. previous iqm.cpc.compiler.compiler.Compiler next iqm.cpc.compiler.dd.STANDARD_DD_STRATEGY By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.standard_stages.build_playlist",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.standard_stages.build_playlist.html",
    "description": "Build the playlist from the schedules. schedules ( Iterable [ Schedule ] ) \u2013 builder ( ScheduleBuilder ) \u2013 tuple [ Playlist , dict [ str , Any ]] previous iqm.cpc.compiler.standard_stages.apply_move_g...",
    "content": "Build the playlist from the schedules. schedules ( Iterable [ Schedule ] ) \u2013 builder ( ScheduleBuilder ) \u2013 tuple [ Playlist , dict [ str , Any ]] previous iqm.cpc.compiler.standard_stages.apply_move_gate_phase_corrections next iqm.cpc.compiler.standard_stages.choose_op_implementations By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils_dd",
    "url": "/iqm-pulla/api/iqm.pulla.utils_dd.html",
    "description": "Utilities for working with Dynamical Decoupling. Functions generate_phases_of_urn_sequence (n) Generate PRX gate phases for the URn sequence. previous iqm.pulla.utils_cirq.cirq_to_cpc next iqm.pulla.u...",
    "content": "Utilities for working with Dynamical Decoupling. Functions generate_phases_of_urn_sequence (n) Generate PRX gate phases for the URn sequence. previous iqm.pulla.utils_cirq.cirq_to_cpc next iqm.pulla.utils_dd.generate_phases_of_urn_sequence By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.interface.CircuitMeasurementResultsBatch",
    "url": "/iqm-pulla/api/iqm.pulla.interface.CircuitMeasurementResultsBatch.html",
    "description": "Type that represents measurement results for a batch of circuits. alias of list [ dict [ str , list [ list [ int ]]]] previous iqm.pulla.interface.CircuitMeasurementResults next iqm.pulla.interface.BU...",
    "content": "Type that represents measurement results for a batch of circuits. alias of list [ dict [ str , list [ list [ int ]]]] previous iqm.pulla.interface.CircuitMeasurementResults next iqm.pulla.interface.BUFFER_AFTER_MEASUREMENT_PROBE By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.standard_stages.prepend_reset",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.standard_stages.prepend_reset.html",
    "description": "Add a reset timebox to all circuits. timeboxes ( Iterable [ TimeBox ] ) \u2013 builder ( ScheduleBuilder ) \u2013 options ( CircuitExecutionOptions ) \u2013 circuit_metrics ( Iterable [ CircuitMetrics ] ) \u2013 Iterable...",
    "content": "Add a reset timebox to all circuits. timeboxes ( Iterable [ TimeBox ] ) \u2013 builder ( ScheduleBuilder ) \u2013 options ( CircuitExecutionOptions ) \u2013 circuit_metrics ( Iterable [ CircuitMetrics ] ) \u2013 Iterable [ TimeBox ] previous iqm.cpc.compiler.standard_stages.prepend_heralding next iqm.cpc.compiler.standard_stages.resolve_circuits By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.station_settings.find_observation",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.station_settings.find_observation.html",
    "description": "Return the value of the given calibration observation, or raise an error. observation_path ( str ) \u2013 observation we want to find in calibration_set calibration_set ( CalibrationSet ) \u2013 mapping of obse...",
    "content": "Return the value of the given calibration observation, or raise an error. observation_path ( str ) \u2013 observation we want to find in calibration_set calibration_set ( CalibrationSet ) \u2013 mapping of observation paths to observation values required ( bool ) \u2013 iff True and the observation cannot be found, raise an error value of the observation, or None if not found CalibrationError \u2013 required is True and the observation cannot be\n    found in calibration_set ObservationValue previous iqm.cpc.compiler.station_settings.build_station_settings next iqm.cpc.compiler.station_settings.Map By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.errors.UnknownLogicalQubitError",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.errors.UnknownLogicalQubitError.html",
    "description": "A logical qubit in the circuit has not been defined in the qubit mapping. previous iqm.cpc.compiler.errors.UnknownHardwareComponentError next iqm.cpc.compiler.standard_stages By IQM Pulla developers \u00a9...",
    "content": "A logical qubit in the circuit has not been defined in the qubit mapping. previous iqm.cpc.compiler.errors.UnknownHardwareComponentError next iqm.cpc.compiler.standard_stages By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils.map_sweep_results_to_logical_qubits",
    "url": "/iqm-pulla/api/iqm.pulla.utils.map_sweep_results_to_logical_qubits.html",
    "description": "Convert sweep results returned by Station Control to the circuit measurement results the client expects. sweep_results ( dict [ str , list [ ndarray ] ] ) \u2013 mapping of acquisition labels to a list of ...",
    "content": "Convert sweep results returned by Station Control to the circuit measurement results the client expects. sweep_results ( dict [ str , list [ ndarray ] ] ) \u2013 mapping of acquisition labels to a list of soft sweep spots, each represented by a 1D\narray of readout results, with shots * num_triggers_for_label elements. readout_mappings ( tuple [ dict [ str , tuple [ str , ... ] ] , ... ] ) \u2013 for each circuit in the batch, a mapping of measurement keys to corresponding\ntuples of result parameter names. heralding_mode ( HeraldingMode ) \u2013 Heralding mode, either ZEROS (when doing heralded readout) or NONE . converted, filtered measurement results, with the heralding measurement data removed list [ dict [ str , list [ list [ int ]]]] previous iqm.pulla.utils.map_qubit_indices next iqm.pulla.utils.print_channel By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.compiler",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.compiler.html",
    "description": "Convert quantum circuits into instruction schedules. This is the core module of CPC . It contains the functionality to define a compiler, whose job is to\nconvert quantum circuits and calibration data ...",
    "content": "Convert quantum circuits into instruction schedules. This is the core module of CPC . It contains the functionality to define a compiler, whose job is to\nconvert quantum circuits and calibration data into configuration settings and instruction schedules that\ncan be executed by the IQM server on quantum hardware. Module Attributes PassFunction A function that takes the data and context as arguments and returns the modified data and context. Functions compiler_pass (function) Convenience wrapper to create a valid compiler pass. pass_function_idempotent (function) Wrap a pass function to make it idempotent. Classes CompilationStage (name) Sequence of compiler passes that are applied to the data. Compiler (*,\u00a0calibration_set,\u00a0chip_topology,\u00a0...) Stateful object that contains a calibration set, a schedule builder, and a set of compilation stages. Inheritance previous iqm.cpc.compiler.circuit_compilation_request_handler.handle_circuit_compilation_request next iqm.cpc.compiler.compiler.PassFunction By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils_cirq",
    "url": "/iqm-pulla/api/iqm.pulla.utils_cirq.html",
    "description": "Utilities for working with Cirq objects. Functions cirq_to_cpc () Convert a Cirq Circuit to an IQM CPC Circuit. previous iqm.pulla.utils.replace_instruction_in_place next iqm.pulla.utils_cirq.cirq_to_...",
    "content": "Utilities for working with Cirq objects. Functions cirq_to_cpc () Convert a Cirq Circuit to an IQM CPC Circuit. previous iqm.pulla.utils.replace_instruction_in_place next iqm.pulla.utils_cirq.cirq_to_cpc By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.errors.SettingsConventionError",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.errors.SettingsConventionError.html",
    "description": "While parsing Station Control settings, something breaks a structural or naming convention. previous iqm.cpc.compiler.errors.InsufficientContextError next iqm.cpc.compiler.errors.UnknownHardwareCompon...",
    "content": "While parsing Station Control settings, something breaks a structural or naming convention. previous iqm.cpc.compiler.errors.InsufficientContextError next iqm.cpc.compiler.errors.UnknownHardwareComponentError By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.standard_stages.resolve_timeboxes",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.standard_stages.resolve_timeboxes.html",
    "description": "Resolve the timeboxes to schedules. timeboxes ( Iterable [ TimeBox ] ) \u2013 builder ( ScheduleBuilder ) \u2013 list [ Schedule ] previous iqm.cpc.compiler.standard_stages.resolve_circuits next iqm.cpc.compile...",
    "content": "Resolve the timeboxes to schedules. timeboxes ( Iterable [ TimeBox ] ) \u2013 builder ( ScheduleBuilder ) \u2013 list [ Schedule ] previous iqm.cpc.compiler.standard_stages.resolve_circuits next iqm.cpc.compiler.standard_stages.validate_circuits By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.interface.compiler",
    "url": "/iqm-pulla/api/iqm.cpc.interface.compiler.html",
    "description": "Pydantic models used by the API. Module Attributes CircuitBatch Type that represents a list of quantum circuits to be executed together in a single batch. PRXSequence A sequence of PRX gates. ReadoutM...",
    "content": "Pydantic models used by the API. Module Attributes CircuitBatch Type that represents a list of quantum circuits to be executed together in a single batch. PRXSequence A sequence of PRX gates. ReadoutMapping Type for matching measurement keys from the quantum circuit with acquisition labels in Station Control. ReadoutMappingBatch Type that represents tuple of readout mappings, one per each circuit in a circuit batch. Classes Circuit (name,\u00a0instructions) Quantum circuit to be executed. CircuitBoundaryMode (value[,\u00a0names,\u00a0module,\u00a0...]) Circuit boundary mode for circuit compilation. CircuitCompilationResult (playlist,\u00a0...) Compiled circuit and associated settings returned by CPC to Cocos. CircuitExecutionOptions (measurement_mode,\u00a0...) Various discrete options for quantum circuit execution. CircuitMetrics (components,\u00a0...[,\u00a0gate_loci,\u00a0...]) Metrics describing a circuit and its compilation result. DDMode (value[,\u00a0names,\u00a0module,\u00a0qualname,\u00a0...]) Dynamical Decoupling (DD) mode for circuit execution. DDStrategy ([merge_contiguous_waits,\u00a0...]) Describes a particular dynamical decoupling strategy. HeraldingMode (value[,\u00a0names,\u00a0module,\u00a0...]) Heralding mode for circuit execution. MeasurementMode (value[,\u00a0names,\u00a0module,\u00a0...]) Measurement mode for circuit execution. MoveGateFrameTrackingMode (value[,\u00a0names,\u00a0...]) MOVE gate frame tracking mode for circuit compilation. MoveGateValidationMode (value[,\u00a0names,\u00a0...]) MOVE gate validation mode for circuit compilation. Inheritance previous iqm.cpc.interface next iqm.cpc.interface.compiler.CircuitBatch By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.standard_stages.apply_dd_strategy",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.standard_stages.apply_dd_strategy.html",
    "description": "Insert dynamical decoupling sequences into the schedules, if dynamical decoupling is enabled. schedules ( Iterable [ Schedule ] ) \u2013 builder ( ScheduleBuilder ) \u2013 options ( CircuitExecutionOptions ) \u2013 ...",
    "content": "Insert dynamical decoupling sequences into the schedules, if dynamical decoupling is enabled. schedules ( Iterable [ Schedule ] ) \u2013 builder ( ScheduleBuilder ) \u2013 options ( CircuitExecutionOptions ) \u2013 list [ Schedule ] previous iqm.cpc.compiler.standard_stages next iqm.cpc.compiler.standard_stages.apply_move_gate_phase_corrections By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.dd.insert_dd_sequences",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.dd.insert_dd_sequences.html",
    "description": "Insert dynamical decoupling sequences into the given schedule. Note Modifies schedule in-place. Note Assumes that the PRX implementation used only applies non-wait instructions on a single drive chann...",
    "content": "Insert dynamical decoupling sequences into the given schedule. Note Modifies schedule in-place. Note Assumes that the PRX implementation used only applies non-wait instructions on a single drive channel,\nand that the PRX duration does not depend on its arguments. builder ( ScheduleBuilder ) \u2013 Schedule builder used to build schedule , containing channel information. schedule ( Schedule ) \u2013 Schedule to modify. strategy ( DDStrategy ) \u2013 Dynamical decoupling strategy to use. None previous iqm.cpc.compiler.dd.STANDARD_DD_STRATEGY next iqm.cpc.compiler.dd.merge_wait_instructions_in_schedule By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.compiler.PassFunction",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.compiler.PassFunction.html",
    "description": "A function that takes the data and context as arguments and returns the modified data and context.\nThe context is a dictionary that can contain any information that needs to be passed between the pass...",
    "content": "A function that takes the data and context as arguments and returns the modified data and context.\nThe context is a dictionary that can contain any information that needs to be passed between the passes. alias of Callable [ Any , dict [ str , Any ], tuple [ Any , dict [ str , Any ]]] previous iqm.cpc.compiler.compiler next iqm.cpc.compiler.compiler.compiler_pass By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.interface.compiler.PRXSequence",
    "url": "/iqm-pulla/api/iqm.cpc.interface.compiler.PRXSequence.html",
    "description": "A sequence of PRX gates. A generic PRX gate is defined by rotation angle and phase angle, Theta and Phi\nrespectively. alias of list [ tuple [ float , float ]] previous iqm.cpc.interface.compiler.Circu...",
    "content": "A sequence of PRX gates. A generic PRX gate is defined by rotation angle and phase angle, Theta and Phi\nrespectively. alias of list [ tuple [ float , float ]] previous iqm.cpc.interface.compiler.CircuitBatch next iqm.cpc.interface.compiler.ReadoutMapping By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.interface.SettingsRetrievalException",
    "url": "/iqm-pulla/api/iqm.pulla.interface.SettingsRetrievalException.html",
    "description": "Exception for Station Control settings retrieval failures. previous iqm.pulla.interface.ChipLabelRetrievalException next iqm.pulla.utils By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, ...",
    "content": "Exception for Station Control settings retrieval failures. previous iqm.pulla.interface.ChipLabelRetrievalException next iqm.pulla.utils By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils.print_channel",
    "url": "/iqm-pulla/api/iqm.pulla.utils.print_channel.html",
    "description": "Print all instructions in a channel of a schedule. schedule ( Schedule ) \u2013 The schedule to search. channel_name ( str ) \u2013 The name of the channel to print. None previous iqm.pulla.utils.map_sweep_resu...",
    "content": "Print all instructions in a channel of a schedule. schedule ( Schedule ) \u2013 The schedule to search. channel_name ( str ) \u2013 The name of the channel to print. None previous iqm.pulla.utils.map_sweep_results_to_logical_qubits next iqm.pulla.utils.print_schedule By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils_qiskit",
    "url": "/iqm-pulla/api/iqm.pulla.utils_qiskit.html",
    "description": "Utilities for working with Qiskit objects. Functions qiskit_circuits_to_pulla (qiskit_circuits,\u00a0...) Convert Qiskit quantum circuits into IQM Pulse quantum circuits. qiskit_to_pulla (pulla,\u00a0backend,\u00a0q...",
    "content": "Utilities for working with Qiskit objects. Functions qiskit_circuits_to_pulla (qiskit_circuits,\u00a0...) Convert Qiskit quantum circuits into IQM Pulse quantum circuits. qiskit_to_pulla (pulla,\u00a0backend,\u00a0qiskit_circuits) Convert transpiled Qiskit quantum circuits to IQM Pulse quantum circuits. station_control_result_to_qiskit (...) Convert a Station Control result to a Qiskit Result. Classes DummyJob (backend,\u00a0qiskit_result) A dummy job object that can be used to retrieve the result of a locally compiled circuit. IQMPullaBackend (architecture,\u00a0pulla,\u00a0compiler) A backend that compiles circuits locally using Pulla and submits them to Station Control for execution. Inheritance previous iqm.pulla.utils_dd.generate_phases_of_urn_sequence next iqm.pulla.utils_qiskit.qiskit_circuits_to_pulla By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.calibration",
    "url": "/iqm-pulla/api/iqm.pulla.calibration.html",
    "description": "Provider of calibration sets and quality metrics from remote IQM servers. Classes CalibrationDataProvider (station_control_client) Access calibration info via station control client and cache data in ...",
    "content": "Provider of calibration sets and quality metrics from remote IQM servers. Classes CalibrationDataProvider (station_control_client) Access calibration info via station control client and cache data in memory. Inheritance previous iqm.pulla next iqm.pulla.calibration.CalibrationDataProvider By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils.iqm_circuit_to_gate_implementation",
    "url": "/iqm-pulla/api/iqm.pulla.utils.iqm_circuit_to_gate_implementation.html",
    "description": "Wrap a circuit to a single GateImplementation that can then be registered as an independent \u201cgate\u201d. Returns a composite GateImplementation which, when called, produces a TimeBox with the circuit conte...",
    "content": "Wrap a circuit to a single GateImplementation that can then be registered as an independent \u201cgate\u201d. Returns a composite GateImplementation which, when called, produces a TimeBox with the circuit contents\nscheduled ASAP. The input circuit must contain only gates that are registered in IQM Pulse.\nThe gate implementation does not need calibration data of its own: it uses the calibration of the registered gates. circuit ( Circuit ) \u2013 circuit to wrap, typically a small subset of a larger circuit. qubit_mapping ( dict [ str , str ] ) \u2013 Mapping from logical qubit names to physical qubit names. A new class CircuitAsComposite which can be registered as a new gate implementation. type [ CompositeGate ] previous iqm.pulla.utils.initialize_schedule_builder next iqm.pulla.utils.locate_instructions By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.circuit_compilation_request_handler.handle_circuit_compilation_request",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.circuit_compilation_request_handler.handle_circuit_compilation_request.html",
    "description": "Compile a batch of quantum circuits into a form that can be executed by Station Control. job_id ( str ) \u2013 ID of the job requesting compilation, used in logging circuits ( list [ Circuit ] ) \u2013 quantum ...",
    "content": "Compile a batch of quantum circuits into a form that can be executed by Station Control. job_id ( str ) \u2013 ID of the job requesting compilation, used in logging circuits ( list [ Circuit ] ) \u2013 quantum circuits to compile into schedules shots ( int ) \u2013 number of times to repeat the execution of each circuit calibration_set ( dict [ str , bool | str | int | float | complex | ndarray ] ) \u2013 calibration data for the station the circuits are executed on chip_topology ( ChipTopology ) \u2013 topology of the QPU the circuits are executed on channel_properties ( dict [ str , ChannelProperties ] ) \u2013 properties of control channels on the station component_channels ( dict [ str , dict [ str , str ] ] ) \u2013 QPU component to function to channel mapping options ( CircuitExecutionOptions ) \u2013 various discrete options for circuit execution that affect compilation custom_settings ( SettingNode | None ) \u2013 additional Station Control settings to override generated settings qubit_mapping ( dict [ str , str ] | None ) \u2013 Mapping of logical qubit names to physical qubit names. None means the identity mapping. trace_context ( dict [ str , Any ] | None ) \u2013 telemetry context to be propagated during circuit compilation circuit compilation result CircuitCompilationResult previous iqm.cpc.compiler.circuit_compilation_request_handler next iqm.cpc.compiler.compiler By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils.convert_sweep_spot_with_heralding_mode_zero",
    "url": "/iqm-pulla/api/iqm.pulla.utils.convert_sweep_spot_with_heralding_mode_zero.html",
    "description": "Like convert_sweep_spot() , but for results that contain heralding measurements. For each circuit we only keep the shots for which the heralding result is zero for all the\nqubits used in the circuit. ...",
    "content": "Like convert_sweep_spot() , but for results that contain heralding measurements. For each circuit we only keep the shots for which the heralding result is zero for all the\nqubits used in the circuit. results ( dict [ str , ndarray ] ) \u2013 Mapping of acquisition labels to 1D arrays of readout results with the length num_shots * num_triggers_for_label_in_batch . The herald\nresults are found under HERALDING_KEY . readout_mappings ( tuple [ dict [ str , tuple [ str , ... ] ] , ... ] ) \u2013 For each circuit in the batch, a mapping of measurement keys to corresponding\ntuples of acquisition labels. converted, filtered measurement results, with the heralding measurement data removed list [ dict [ str , list [ list [ int ]]]] previous iqm.pulla.utils.convert_sweep_spot next iqm.pulla.utils.extract_readout_controller_result_names By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.standard_stages.apply_move_gate_phase_corrections",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.standard_stages.apply_move_gate_phase_corrections.html",
    "description": "Apply calibrated phase corrections if MOVE gates are used. schedules ( Iterable [ Schedule ] ) \u2013 builder ( ScheduleBuilder ) \u2013 circuit_metrics ( Iterable [ CircuitMetrics ] ) \u2013 options ( CircuitExecut...",
    "content": "Apply calibrated phase corrections if MOVE gates are used. schedules ( Iterable [ Schedule ] ) \u2013 builder ( ScheduleBuilder ) \u2013 circuit_metrics ( Iterable [ CircuitMetrics ] ) \u2013 options ( CircuitExecutionOptions ) \u2013 list [ Schedule ] previous iqm.cpc.compiler.standard_stages.apply_dd_strategy next iqm.cpc.compiler.standard_stages.build_playlist By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.interface.compiler.CircuitBatch",
    "url": "/iqm-pulla/api/iqm.cpc.interface.compiler.CircuitBatch.html",
    "description": "Type that represents a list of quantum circuits to be executed together in a single batch. alias of list [ Circuit ] previous iqm.cpc.interface.compiler next iqm.cpc.interface.compiler.PRXSequence By ...",
    "content": "Type that represents a list of quantum circuits to be executed together in a single batch. alias of list [ Circuit ] previous iqm.cpc.interface.compiler next iqm.cpc.interface.compiler.PRXSequence By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.standard_stages.choose_op_implementations",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.standard_stages.choose_op_implementations.html",
    "description": "Analyze the instructions in the circuits and pick an implementation for each (operation, locus). Note This function modifies circuits in place. circuits ( Iterable [ Circuit ] ) \u2013 builder ( ScheduleBu...",
    "content": "Analyze the instructions in the circuits and pick an implementation for each (operation, locus). Note This function modifies circuits in place. circuits ( Iterable [ Circuit ] ) \u2013 builder ( ScheduleBuilder ) \u2013 options ( CircuitExecutionOptions ) \u2013 tuple [ list [ Circuit ], dict [ str , Any ]] previous iqm.cpc.compiler.standard_stages.build_playlist next iqm.cpc.compiler.standard_stages.clean_schedule By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.standard_stages.prepend_heralding",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.standard_stages.prepend_heralding.html",
    "description": "Add the heralding measurement timebox to all circuits. timeboxes ( Iterable [ TimeBox ] ) \u2013 builder ( ScheduleBuilder ) \u2013 heralded_components ( tuple [ tuple [ str , ... ] , ... ] ) \u2013 options ( Circui...",
    "content": "Add the heralding measurement timebox to all circuits. timeboxes ( Iterable [ TimeBox ] ) \u2013 builder ( ScheduleBuilder ) \u2013 heralded_components ( tuple [ tuple [ str , ... ] , ... ] ) \u2013 options ( CircuitExecutionOptions ) \u2013 list [ TimeBox ] previous iqm.cpc.compiler.standard_stages.multiplex_readout next iqm.cpc.compiler.standard_stages.prepend_reset By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.compiler.Compiler",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.compiler.Compiler.html",
    "description": "Bases: object Stateful object that contains a calibration set, a schedule builder, and a set\nof compilation stages. The compiler\u2019s state does not include the data to be compiled. calibration_set ( Cal...",
    "content": "Bases: object Stateful object that contains a calibration set, a schedule builder, and a set\nof compilation stages. The compiler\u2019s state does not include the data to be compiled. calibration_set ( CalibrationSet ) \u2013 Calibration data. chip_topology ( ChipTopology ) \u2013 Physical layout and connectivity of the quantum chip. channel_properties ( dict [ str , ChannelProperties ] ) \u2013 Channel properties. component_channels ( dict [ str , dict [ str , str ] ] ) \u2013 Mapping between components and their control channels. component_mapping ( dict [ str , str ] | None ) \u2013 Custom mapping of components. Defaults to None. options ( CircuitExecutionOptions ) \u2013 Circuit execution options.\nDefaults to STANDARD_CIRCUIT_EXECUTION_OPTIONS. stages ( list [ CompilationStage ] | None ) \u2013 List of compilation stages. Defaults to None.\nNote that in the absence of stages, the compiler will not be ready to compile circuits. strict ( bool ) \u2013 If True, raises CalibrationError on calibration validation failures.\nIf False, only logs warnings. Defaults to False. CalibrationError \u2013 When strict=True and calibration validation fails during compiler initialization. Attributes gates Registered quantum gates. Methods _refresh () Refresh the compiler by re-creating the ScheduleBuilder and validating the calibration. add_implementation (op_name,\u00a0impl_name,\u00a0...) Adds a new implementation of a quantum operation (gate). amend_calibration_for_gate_implementation (...) Update the current local calibration set with calibration values for a specific gate/implementation/locus. build_settings (context,\u00a0shots) Build the settings for the execution. compile (data[,\u00a0context]) Run all compiler stages. compiler_context () Return initial compiler context dictionary. get_calibration () Returns a copy of the current local calibration set. print_all_implementations_trees () Prints all implementations of all currently known quantum operations (gates), including parameters. print_implementations_trees (op) Prints all implementation of a particular quantum operation (gate). ready () Check if the compiler is ready to compile circuits. set_calibration (calibration) Sets the current calibration set to a given calibration set, then refreshes the compiler. set_default_implementation (gate_name,\u00a0...) Set the default implementation of a gate. set_default_implementation_for_loci (...) Set the default implementation for a gate for a specific loci. show_stages ([full]) Print the stages and passes defined in the compiler. Returns a copy of the current local calibration set. dict [ str , bool | str | int | float | complex | ndarray ] Sets the current calibration set to a given calibration set, then refreshes the compiler. calibration ( dict [ str , bool | str | int | float | complex | ndarray ] ) \u2013 The calibration set to be set as the current calibration set. None Registered quantum gates. Set the default implementation of a gate. gate_name ( str ) \u2013 Name of the gate. implementation_name ( str ) \u2013 Name of the implementation to set as the default. None Set the default implementation for a gate for a specific loci. gate_name ( str ) \u2013 Name of the gate. implementation_name ( str ) \u2013 Name of the implementation to set as the default for loci . loci ( Iterable [ tuple [ str , ... ] ] ) \u2013 Loci of the gate for which to set implementation_name as the default. None Update the current local calibration set with calibration values for a specific gate/implementation/locus. The calibration values are given as a dictionary\nof parameter names and their values. This method refreshes the compiler after amending the calibration set. gate_name ( str ) \u2013 Name of the gate to which the calibration values are applied. impl_name ( str ) \u2013 Name of the implementation of the gate to which the calibration values are applied. locus ( tuple [ str , ... ] ) \u2013 Locus of the gate to which the calibration values are applied. params ( dict [ str , Any ] ) \u2013 Updated parameter names and their values. None Adds a new implementation of a quantum operation (gate). Refreshes the compiler after adding a new implementation. op_name ( str ) \u2013 The gate name for which to register a new implementation. impl_name ( str ) \u2013 The \u201chuman-readable\u201d name with which the new gate implementation will be found e.g. in settings. implementation ( type [ GateImplementation ] ) \u2013 The python class of the new gate implementation to be added. set_as_default ( bool ) \u2013 Whether to set the new implementation as the default implementation for the gate. overwrite ( bool ) \u2013 If True, allows replacing any existing implementation of the same name. quantum_op_specs ( QuantumOp | dict | None ) \u2013 The quantum operation this gate represents. If a QuantumOp is given, it is used as is.\nIf None is given and the same gate has been registered before, the previously registered properties are\nused.\nOtherwise, the given dict values are given to the constructor of QuantumOp .\nFor any missing constructor values, some defaults suitable for a 1-QB gate are used. None Check if the compiler is ready to compile circuits. The compiler is ready if at least one stage is defined, and\nall the stages are non-empty. bool Prints all implementations of all currently known quantum operations (gates), including parameters. None Prints all implementation of a particular quantum operation (gate). op ( QuantumOp ) \u2013 Quantum operation (gate) to print implementations of. None Print the stages and passes defined in the compiler. full ( bool ) \u2013 Iff True, also print the docstring of each pass function. None Return initial compiler context dictionary. Used automatically by Compiler.compile() . dict [ str , Any ] Run all compiler stages. Initial context will be derived from Compiler.compiler_context() unless a custom\ncontext dictionary is provided. data ( Iterable [ Any ] ) \u2013 An iterable of circuits to be compiled. context ( dict [ str , Any ] | None ) \u2013 Custom initial compiler context dictionary. tuple [ Iterable [ Any ], dict [ str , Any ]] Build the settings for the execution. Updates context[\u201ccircuit_metrics\u201d] with schedule_duration and\nmin_execution_time. context ( dict [ str , Any ] ) \u2013 A dictionary containing the necessary data for building the settings. shots ( int ) \u2013 The number of shots to be executed. A dictionary containing the settings for the execution.\ncontext: The updated context. settings previous iqm.cpc.compiler.compiler.CompilationStage next iqm.cpc.compiler.dd By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils.convert_sweep_spot",
    "url": "/iqm-pulla/api/iqm.pulla.utils.convert_sweep_spot.html",
    "description": "Convert the sweep measurement results from Station Control into circuit measurement results. results ( dict [ str , ndarray ] ) \u2013 mapping of acquisition labels to 1D arrays of readout results with the...",
    "content": "Convert the sweep measurement results from Station Control into circuit measurement results. results ( dict [ str , ndarray ] ) \u2013 mapping of acquisition labels to 1D arrays of readout results with the length num_shots * num_triggers_for_label_in_batch readout_mappings ( tuple [ dict [ str , tuple [ str , ... ] ] , ... ] ) \u2013 for each circuit in the batch, a mapping of measurement keys to corresponding\ntuples of acquisition labels converted measurement results list [ dict [ str , list [ list [ int ]]]] previous iqm.pulla.utils.circuit_operations_to_cpc next iqm.pulla.utils.convert_sweep_spot_with_heralding_mode_zero By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.interface.compiler.MeasurementMode",
    "url": "/iqm-pulla/api/iqm.cpc.interface.compiler.MeasurementMode.html",
    "description": "Bases: StrEnum Measurement mode for circuit execution. Determines which QPU components are measured by Station Control in the final measurement.\nMeasurement results which are not required by the circu...",
    "content": "Bases: StrEnum Measurement mode for circuit execution. Determines which QPU components are measured by Station Control in the final measurement.\nMeasurement results which are not required by the circuits to be executed are discarded. Attributes CIRCUIT In each circuit separately, measure only the components that have final measurement operations on them. ALL Measure all the components on the QPU that have measurement data in the calset. Methods __format__ (format_spec,\u00a0/) Return a formatted version of the string as described by format_spec. __new__ (value)  __str__ () Return str(self). In each circuit separately, measure only the components that have final measurement\noperations on them. Measure all the components on the QPU that have measurement data in the calset.\nThis is typically how measurement is calibrated. previous iqm.cpc.interface.compiler.HeraldingMode next iqm.cpc.interface.compiler.MoveGateFrameTrackingMode By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.compiler.CompilationStage",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.compiler.CompilationStage.html",
    "description": "Bases: object Sequence of compiler passes that are applied to the data. The data and context are returned after all passes have been applied.\nA pass is a function that takes the data and context as ar...",
    "content": "Bases: object Sequence of compiler passes that are applied to the data. The data and context are returned after all passes have been applied.\nA pass is a function that takes the data and context as arguments and\nreturns the modified data and context. The context is a dictionary that can contain any information that needs to be\npassed between the passes. Methods add_passes (*pass_functions) Add multiple passes to the stage. ready () Check if the stage is ready to run. run (data,\u00a0context) Run all the passes in the stage on the data and context. name ( str ) \u2013 Check if the stage is ready to run. A stage is ready if it has at least one pass defined. bool Add multiple passes to the stage. pass_functions ( Callable [ [ Any , dict [ str , Any ] ] , tuple [ Any , dict [ str , Any ] ] ] ) \u2013 One or more pass functions to be added to the stage. None Run all the passes in the stage on the data and context. The data and context are returned after all passes have\nbeen applied. data ( Any ) \u2013 The data to be processed. context ( dict [ str , Any ] ) \u2013 A dictionary containing any additional information that needs to be passed between the passes. The processed data and context. tuple [ Any , dict [ str , Any ]] previous iqm.cpc.compiler.compiler.pass_function_idempotent next iqm.cpc.compiler.compiler.Compiler By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.standard_stages.derive_readout_mappings",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.standard_stages.derive_readout_mappings.html",
    "description": "Derive mapping between station acquisition labels and user\u2019s measurement keys. circuits ( Iterable [ Circuit ] ) \u2013 builder ( ScheduleBuilder ) \u2013 options ( CircuitExecutionOptions ) \u2013 circuit_metrics (...",
    "content": "Derive mapping between station acquisition labels and user\u2019s measurement keys. circuits ( Iterable [ Circuit ] ) \u2013 builder ( ScheduleBuilder ) \u2013 options ( CircuitExecutionOptions ) \u2013 circuit_metrics ( Iterable [ CircuitMetrics ] ) \u2013 tuple [ list [ Circuit ], dict [ str , Any ]] previous iqm.cpc.compiler.standard_stages.clean_schedule next iqm.cpc.compiler.standard_stages.get_standard_stages By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.interface.compiler.Circuit",
    "url": "/iqm-pulla/api/iqm.cpc.interface.compiler.Circuit.html",
    "description": "Bases: object Quantum circuit to be executed. Attributes name name of the circuit instructions operations comprising the circuit Methods __eq__ (other) Return self==value. __repr__ () Return repr(self...",
    "content": "Bases: object Quantum circuit to be executed. Attributes name name of the circuit instructions operations comprising the circuit Methods __eq__ (other) Return self==value. __repr__ () Return repr(self). name ( str ) \u2013 instructions ( tuple [ CircuitOperation , ... ] ) \u2013 name of the circuit operations comprising the circuit previous iqm.cpc.interface.compiler.ReadoutMappingBatch next iqm.cpc.interface.compiler.CircuitBoundaryMode By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils_qiskit.station_control_result_to_qiskit",
    "url": "/iqm-pulla/api/iqm.pulla.utils_qiskit.station_control_result_to_qiskit.html",
    "description": "Convert a Station Control result to a Qiskit Result. station_control_result ( StationControlResult ) \u2013 The Station Control result to convert. shots ( int ) \u2013 number of shots requested execution_option...",
    "content": "Convert a Station Control result to a Qiskit Result. station_control_result ( StationControlResult ) \u2013 The Station Control result to convert. shots ( int ) \u2013 number of shots requested execution_options ( CircuitExecutionOptions ) \u2013 Circuit execution options used to produce the result. The equivalent Qiskit Result. Result previous iqm.pulla.utils_qiskit.qiskit_to_pulla next iqm.pulla.utils_qiskit.DummyJob By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.standard_stages.get_standard_stages",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.standard_stages.get_standard_stages.html",
    "description": "Get a copy of the standard compilation stages. idempotent ( bool ) \u2013 If True, the passes will be made idempotent. The standard compilation stages. list [ CompilationStage ] previous iqm.cpc.compiler.s...",
    "content": "Get a copy of the standard compilation stages. idempotent ( bool ) \u2013 If True, the passes will be made idempotent. The standard compilation stages. list [ CompilationStage ] previous iqm.cpc.compiler.standard_stages.derive_readout_mappings next iqm.cpc.compiler.standard_stages.map_components By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.station_settings",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.station_settings.html",
    "description": "Mapping calibration observations to station settings. Observations are physical quantities stored in the EXA database. CPC uses them to represent the\ncalibrated values of various instrument settings a...",
    "content": "Mapping calibration observations to station settings. Observations are physical quantities stored in the EXA database. CPC uses them to represent the\ncalibrated values of various instrument settings and gate parameters, needed to execute quantum circuits.\nThe following iqm.station_control.interface.models.observation.ObservationLite fields are needed\nfor this purpose: dut_field : identifies the quantity, and possibly the QPU component(s) it is associated with value : value of the quantity unit : unit of the quantity (currently only base SI units are used, e.g. Hz instead of GHz) The calibration observations come from two conceptually different sources. ConfigurationSource observations determine the base operating point of the station\n(in principle an arbitrary choice), and form the input of the calibration procedure. AnalysisSource observations are the output of the calibration procedure. When EXA saves its settings as observations, it maps the settings tree paths directly to observation dut_field paths. CPC uses the same direct mapping, with a single minor modification (\u201coptions.end_delay\u201d),\nto map observation dut_field paths to Station Control controller settings paths. Quantum operation parameters are stored in the EXA settings tree under the top-level branch gates .\nThis data is only used in building the instruction schedules. The controller settings paths may change whenever Station Control is updated, since it\nconsumes the settings. Hence, this may break old calibration sets. New paths may be introduced into the calibration set when the calibration procedure changes,\nor a new gate implementation is introduced. CPC only consumes observations created by the calibration process, stored explicitly as calibration\nsets in the database. In addition to the station settings obtained from the calibration set, circuit execution also\nrequires some static settings that typically change only when Station Control is updated, or\nthe station itself is physically modified. The settings that depend on the makeup of a particular\nstation, e.g. the types of the control instruments, are set in the station.yml configuration file\nif possible. Examples of such settings are the input and output ranges and powers of various instruments.\nNote that these settings can also be considered a part of the definition of the basic operating point. For some station settings, the default value is already good. Finally, there are some static station settings that are defined in this module, mostly because if\nthey were set in station.yml they might negatively interfere with running EXA experiments on\nthe station. Functions build_station_settings (*,\u00a0circuit_qubits,\u00a0...) Build the station settings for executing a batch of quantum circuits using the given QPU elements and calibration data. find_observation (observation_path,\u00a0...[,\u00a0...]) Return the value of the given calibration observation, or raise an error. Classes Map (parameter,\u00a0observation_path_template[,\u00a0...]) Mapping from a calibration observation path to a corresponding station settings path. Inheritance previous iqm.cpc.compiler.standard_stages.validate_execution_options next iqm.cpc.compiler.station_settings.build_station_settings By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.errors.UnknownHardwareComponentError",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.errors.UnknownHardwareComponentError.html",
    "description": "Circuit contains a reference to an unknown hardware component. previous iqm.cpc.compiler.errors.SettingsConventionError next iqm.cpc.compiler.errors.UnknownLogicalQubitError By IQM Pulla developers \u00a9 ...",
    "content": "Circuit contains a reference to an unknown hardware component. previous iqm.cpc.compiler.errors.SettingsConventionError next iqm.cpc.compiler.errors.UnknownLogicalQubitError By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.compiler.compiler_pass",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.compiler.compiler_pass.html",
    "description": "Convenience wrapper to create a valid compiler pass. When the wrapped function is called, the compilation data (e.g. circuits) is passed as the first argument.\nIf function has any other arguments, the...",
    "content": "Convenience wrapper to create a valid compiler pass. When the wrapped function is called, the compilation data (e.g. circuits) is passed as the first argument.\nIf function has any other arguments, the wrapper takes their values from the context dict.\nIf no matching key is found for a required argument, an error is raised. function` must return either a tuple of ``(data, ctx) where data is the\ncompilation result and ctx is a dict with any new context data, or only data .\nThe contents of ctx will be merged to the input context.\nNote the difference to a plain, unwrapped CompilationPass: not returning ctx is valid. Callable [[ Any , dict [ str , Any ]], tuple [ Any , dict [ str , Any ]]] previous iqm.cpc.compiler.compiler.PassFunction next iqm.cpc.compiler.compiler.pass_function_idempotent By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.errors.CalibrationError",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.errors.CalibrationError.html",
    "description": "A required calibration observation is missing from the calibration set, or an unknown\ngate calibration observation is encountered. previous iqm.cpc.compiler.errors next iqm.cpc.compiler.errors.Circuit...",
    "content": "A required calibration observation is missing from the calibration set, or an unknown\ngate calibration observation is encountered. previous iqm.cpc.compiler.errors next iqm.cpc.compiler.errors.CircuitError By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.errors",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.errors.html",
    "description": "Definitions of error classes used to raise issues during circuit compilation. Exceptions CalibrationError A required calibration observation is missing from the calibration set, or an unknown gate cal...",
    "content": "Definitions of error classes used to raise issues during circuit compilation. Exceptions CalibrationError A required calibration observation is missing from the calibration set, or an unknown gate calibration observation is encountered. CircuitError There is something wrong with the quantum circuit. ClientError Client submitted a bad request, and needs to be notified. CompilationPassError There is something wrong with the compilation pass. InsufficientContextError The context provided to the compilation pass does not contain all necessary fields. SettingsConventionError While parsing Station Control settings, something breaks a structural or naming convention. UnknownHardwareComponentError Circuit contains a reference to an unknown hardware component. UnknownLogicalQubitError A logical qubit in the circuit has not been defined in the qubit mapping. previous iqm.cpc.compiler.dd.merge_wait_instructions_in_schedule next iqm.cpc.compiler.errors.CalibrationError By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.dd.STANDARD_DD_STRATEGY",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.dd.STANDARD_DD_STRATEGY.html",
    "description": "The default DD strategy uses the following gate sequences: Simple symmetric CPMG sequence for short idling times. Asymmetric (left-aligned) universal XY4 sequence for medium idling times. Asymmetric (...",
    "content": "The default DD strategy uses the following gate sequences: Simple symmetric CPMG sequence for short idling times. Asymmetric (left-aligned) universal XY4 sequence for medium idling times. Asymmetric (left-aligned) universal EDD sequence for longer idling times. previous iqm.cpc.compiler.dd next iqm.cpc.compiler.dd.insert_dd_sequences By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.interface.Instruction",
    "url": "/iqm-pulla/api/iqm.pulla.interface.Instruction.html",
    "description": "Bases: BaseModel An instruction in a quantum circuit. Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name name of...",
    "content": "Bases: BaseModel An instruction in a quantum circuit. Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. name name of the quantum operation implementation name of the implementation qubits names of the logical qubits the operation acts on args arguments for the operation Methods to_dataclass () Convert the model to a dataclass. name ( str ) \u2013 implementation ( str | None ) \u2013 qubits ( tuple [ str , ... ] ) \u2013 args ( dict [ str , Any ] ) \u2013 name of the quantum operation name of the implementation names of the logical qubits the operation acts on arguments for the operation Convert the model to a dataclass. CircuitOperation Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous iqm.pulla.interface.Circuit next iqm.pulla.interface.StationControlResult By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.interface.CHADRetrievalException",
    "url": "/iqm-pulla/api/iqm.pulla.interface.CHADRetrievalException.html",
    "description": "Exception for CHAD retrieval failures. previous iqm.pulla.interface.TaskStatus next iqm.pulla.interface.ChipLabelRetrievalException By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Relea...",
    "content": "Exception for CHAD retrieval failures. previous iqm.pulla.interface.TaskStatus next iqm.pulla.interface.ChipLabelRetrievalException By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.html",
    "description": "Compile quantum circuits into instruction schedules and settings that can be executed on a station. Subpackages and modules circuit_compilation_request_handler Convert quantum circuits into instructio...",
    "content": "Compile quantum circuits into instruction schedules and settings that can be executed on a station. Subpackages and modules circuit_compilation_request_handler Convert quantum circuits into instruction schedules. compiler Convert quantum circuits into instruction schedules. dd Dynamical decoupling utilities. errors Definitions of error classes used to raise issues during circuit compilation. standard_stages Standard compilation stages, their constituent compiler passes, and functions for implementing them. station_settings Mapping calibration observations to station settings. previous iqm.cpc next iqm.cpc.compiler.circuit_compilation_request_handler By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.interface.compiler.MoveGateFrameTrackingMode",
    "url": "/iqm-pulla/api/iqm.cpc.interface.compiler.MoveGateFrameTrackingMode.html",
    "description": "Bases: StrEnum MOVE gate frame tracking mode for circuit compilation. Attributes FULL Perform complete MOVE gate frame tracking, applying both the explicit z rotations on the resonator and the dynamic...",
    "content": "Bases: StrEnum MOVE gate frame tracking mode for circuit compilation. Attributes FULL Perform complete MOVE gate frame tracking, applying both the explicit z rotations on the resonator and the dynamic phase correction due to qubit-resonator detuning to the qubit at the end of a MOVE sandwich. NO_DETUNING_CORRECTION Do not apply the detuning correction at the end of a MOVE sandwich. NONE Do not perform any MOVE gate frame tracking. Methods __format__ (format_spec,\u00a0/) Return a formatted version of the string as described by format_spec. __new__ (value)  __str__ () Return str(self). Perform complete MOVE gate frame tracking, applying both the explicit z rotations\non the resonator and the dynamic phase correction due to qubit-resonator detuning to\nthe qubit at the end of a MOVE sandwich. Do not apply the detuning correction at the end of a MOVE sandwich. Do not perform any MOVE gate frame tracking. previous iqm.cpc.interface.compiler.MeasurementMode next iqm.cpc.interface.compiler.MoveGateValidationMode By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.interface.CircuitMeasurementResults",
    "url": "/iqm-pulla/api/iqm.pulla.interface.CircuitMeasurementResults.html",
    "description": "Measurement results from a single circuit/schedule. For each measurement operation in the circuit,\nmaps the measurement key to the corresponding results. The outer list elements correspond to shots,\na...",
    "content": "Measurement results from a single circuit/schedule. For each measurement operation in the circuit,\nmaps the measurement key to the corresponding results. The outer list elements correspond to shots,\nand the inner list elements to the qubits measured in the measurement operation. alias of dict [ str , list [ list [ int ]]] previous iqm.pulla.interface next iqm.pulla.interface.CircuitMeasurementResultsBatch By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.standard_stages.validate_circuits",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.standard_stages.validate_circuits.html",
    "description": "Validate the contents of the quantum circuits. circuits ( Iterable [ Circuit ] ) \u2013 builder ( ScheduleBuilder ) \u2013 previous iqm.cpc.compiler.standard_stages.resolve_timeboxes next iqm.cpc.compiler.stand...",
    "content": "Validate the contents of the quantum circuits. circuits ( Iterable [ Circuit ] ) \u2013 builder ( ScheduleBuilder ) \u2013 previous iqm.cpc.compiler.standard_stages.resolve_timeboxes next iqm.cpc.compiler.standard_stages.validate_execution_options By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.compiler.pass_function_idempotent",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.compiler.pass_function_idempotent.html",
    "description": "Wrap a pass function to make it idempotent. function ( Callable [ [ Any , dict [ str , Any ] ] , tuple [ Any , dict [ str , Any ] ] ] ) \u2013 Callable [[ Any , dict [ str , Any ]], tuple [ Any , dict [ st...",
    "content": "Wrap a pass function to make it idempotent. function ( Callable [ [ Any , dict [ str , Any ] ] , tuple [ Any , dict [ str , Any ] ] ] ) \u2013 Callable [[ Any , dict [ str , Any ]], tuple [ Any , dict [ str , Any ]]] previous iqm.cpc.compiler.compiler.compiler_pass next iqm.cpc.compiler.compiler.CompilationStage By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.calibration.CalibrationDataProvider",
    "url": "/iqm-pulla/api/iqm.pulla.calibration.CalibrationDataProvider.html",
    "description": "Bases: object Access calibration info via station control client and cache data in memory. Methods get_calibration_set (cal_set_id) Get the calibration set from the database and cache it. get_latest_c...",
    "content": "Bases: object Access calibration info via station control client and cache data in memory. Methods get_calibration_set (cal_set_id) Get the calibration set from the database and cache it. get_latest_calibration_set (chip_label) Get the latest calibration set id for chip label from the database. station_control_client ( StationControlClient ) \u2013 Get the calibration set from the database and cache it. cal_set_id ( UUID ) \u2013 dict [ str , bool | str | int | float | complex | ndarray ] Get the latest calibration set id for chip label from the database. tuple [ dict [ str , bool | str | int | float | complex | ndarray ], UUID ] previous iqm.pulla.calibration next iqm.pulla.interface By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.errors.ClientError",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.errors.ClientError.html",
    "description": "Client submitted a bad request, and needs to be notified. Errors inheriting this class will be reported to the client in the message field of the failed job. previous iqm.cpc.compiler.errors.CircuitEr...",
    "content": "Client submitted a bad request, and needs to be notified. Errors inheriting this class will be reported to the client in the message field of the failed job. previous iqm.cpc.compiler.errors.CircuitError next iqm.cpc.compiler.errors.CompilationPassError By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils_qiskit.qiskit_to_pulla",
    "url": "/iqm-pulla/api/iqm.pulla.utils_qiskit.qiskit_to_pulla.html",
    "description": "Convert transpiled Qiskit quantum circuits to IQM Pulse quantum circuits. Also provides the Compiler object for compiling them, with the correct\ncalibration set and component mapping initialized. pull...",
    "content": "Convert transpiled Qiskit quantum circuits to IQM Pulse quantum circuits. Also provides the Compiler object for compiling them, with the correct\ncalibration set and component mapping initialized. pulla ( Pulla ) \u2013 Quantum computer pulse level access object. backend ( IQMBackend ) \u2013 qiskit-iqm backend used to transpile the circuits. Determines\nthe calibration set to be used by the returned compiler. qiskit_circuits ( QuantumCircuit | Sequence [ QuantumCircuit ] ) \u2013 One or many transpiled Qiskit QuantumCircuits to convert. Equivalent IQM Pulse circuit(s), compiler for compiling them. tuple [ list [CPC_Circuit], Compiler ] previous iqm.pulla.utils_qiskit.qiskit_circuits_to_pulla next iqm.pulla.utils_qiskit.station_control_result_to_qiskit By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils.replace_instruction_in_place",
    "url": "/iqm-pulla/api/iqm.pulla.utils.replace_instruction_in_place.html",
    "description": "Replace an instruction in a schedule with one or more instructions. schedule ( Schedule ) \u2013 The schedule to modify. channel_name ( str ) \u2013 The name of the channel containing the instruction to replace...",
    "content": "Replace an instruction in a schedule with one or more instructions. schedule ( Schedule ) \u2013 The schedule to modify. channel_name ( str ) \u2013 The name of the channel containing the instruction to replace. index ( int ) \u2013 The index of the instruction to replace. replacement ( Iterable [ Instruction ] ) \u2013 Instructions to replace the original instruction with. The modified schedule. Schedule previous iqm.pulla.utils.print_schedule next iqm.pulla.utils_cirq By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils_qiskit.qiskit_circuits_to_pulla",
    "url": "/iqm-pulla/api/iqm.pulla.utils_qiskit.qiskit_circuits_to_pulla.html",
    "description": "Convert Qiskit quantum circuits into IQM Pulse quantum circuits. Lower-level method, you may want to use qiskit_to_pulla() instead. qiskit_circuits ( QuantumCircuit | Sequence [ QuantumCircuit ] ) \u2013 O...",
    "content": "Convert Qiskit quantum circuits into IQM Pulse quantum circuits. Lower-level method, you may want to use qiskit_to_pulla() instead. qiskit_circuits ( QuantumCircuit | Sequence [ QuantumCircuit ] ) \u2013 One or many Qiskit quantum circuits to convert. qubit_idx_to_name ( dict [ int , str ] ) \u2013 Mapping from Qiskit qubit indices to the names of the corresponding\nqubit names. custom_gates ( Collection [ str ] ) \u2013 Names of custom gates that should be treated as additional native gates\nby qiskit-iqm, i.e. they should be passed as-is to Pulla. Equivalent IQM Pulse circuit(s). list [ Circuit ] previous iqm.pulla.utils_qiskit next iqm.pulla.utils_qiskit.qiskit_to_pulla By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils.extract_readout_controller_result_names",
    "url": "/iqm-pulla/api/iqm.pulla.utils.extract_readout_controller_result_names.html",
    "description": "Prepare readout controller names for the request. readout_mappings ( tuple [ dict [ str , tuple [ str , ... ] ] , ... ] ) \u2013 set [ str ] previous iqm.pulla.utils.convert_sweep_spot_with_heralding_mode_...",
    "content": "Prepare readout controller names for the request. readout_mappings ( tuple [ dict [ str , tuple [ str , ... ] ] , ... ] ) \u2013 set [ str ] previous iqm.pulla.utils.convert_sweep_spot_with_heralding_mode_zero next iqm.pulla.utils.find_circuit_boundary By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.standard_stages.clean_schedule",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.standard_stages.clean_schedule.html",
    "description": "Remove non-functional instructions from schedules . schedules ( Iterable [ Schedule ] ) \u2013 builder ( ScheduleBuilder ) \u2013 list [ Schedule ] previous iqm.cpc.compiler.standard_stages.choose_op_implementa...",
    "content": "Remove non-functional instructions from schedules . schedules ( Iterable [ Schedule ] ) \u2013 builder ( ScheduleBuilder ) \u2013 list [ Schedule ] previous iqm.cpc.compiler.standard_stages.choose_op_implementations next iqm.cpc.compiler.standard_stages.derive_readout_mappings By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.interface",
    "url": "/iqm-pulla/api/iqm.pulla.interface.html",
    "description": "Common data types and exceptions for the IQM Pulla interface. Many of these must be identical to those in iqm-client. Module Attributes CircuitMeasurementResults Measurement results from a single circ...",
    "content": "Common data types and exceptions for the IQM Pulla interface. Many of these must be identical to those in iqm-client. Module Attributes CircuitMeasurementResults Measurement results from a single circuit/schedule. CircuitMeasurementResultsBatch Type that represents measurement results for a batch of circuits. BUFFER_AFTER_MEASUREMENT_PROBE Buffer that allows the readout resonator and qubit state to stabilize after a probe pulse, in s. Classes Circuit (*,\u00a0name,\u00a0instructions[,\u00a0metadata]) Quantum circuit to be executed. Instruction (*,\u00a0name[,\u00a0implementation]) An instruction in a quantum circuit. StationControlResult (sweep_id,\u00a0task_id,\u00a0status) Result of a station control task TaskStatus (value[,\u00a0names,\u00a0module,\u00a0qualname,\u00a0...]) Status of a Station Control task. Exceptions CHADRetrievalException Exception for CHAD retrieval failures. ChipLabelRetrievalException Exception for chip label retrieval failures. SettingsRetrievalException Exception for Station Control settings retrieval failures. Inheritance previous iqm.pulla.calibration.CalibrationDataProvider next iqm.pulla.interface.CircuitMeasurementResults By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.errors.InsufficientContextError",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.errors.InsufficientContextError.html",
    "description": "The context provided to the compilation pass does not contain all necessary fields. previous iqm.cpc.compiler.errors.CompilationPassError next iqm.cpc.compiler.errors.SettingsConventionError By IQM Pu...",
    "content": "The context provided to the compilation pass does not contain all necessary fields. previous iqm.cpc.compiler.errors.CompilationPassError next iqm.cpc.compiler.errors.SettingsConventionError By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils",
    "url": "/iqm-pulla/api/iqm.pulla.utils.html",
    "description": "Utility functions for IQM Pulla. Module Attributes InstructionLocation (channel_name,\u00a0index,\u00a0...) Return type for locate_instructions() . Functions build_settings (shots,\u00a0calibration_set,\u00a0...) Constru...",
    "content": "Utility functions for IQM Pulla. Module Attributes InstructionLocation (channel_name,\u00a0index,\u00a0...) Return type for locate_instructions() . Functions build_settings (shots,\u00a0calibration_set,\u00a0...) Construct the Station Control settings needed for executing a batch of quantum circuits. calset_from_observations (calset_observations) Create a calibration set from the given observations. calset_to_cal_data_tree (calibration_set) Build an iqm-pulse QuantumOp calibration data tree from a calibration set. circuit_operations_to_cpc (circ_ops[,\u00a0name]) Convert a list of CircuitOperations to an IQM CPC Circuit. convert_sweep_spot (results,\u00a0readout_mappings) Convert the sweep measurement results from Station Control into circuit measurement results. convert_sweep_spot_with_heralding_mode_zero (...) Like convert_sweep_spot() , but for results that contain heralding measurements. extract_readout_controller_result_names (...) Prepare readout controller names for the request. find_circuit_boundary (mode,\u00a0...) Determine the boundary of a circuit executed on the QPU. get_hash_for (circuit) Get a unique id hash for a given circuit. initialize_schedule_builder (calibration_set,\u00a0...) Initialize a new schedule builder for the station, validate that it is configured properly. iqm_circuit_to_gate_implementation (circuit,\u00a0...) Wrap a circuit to a single GateImplementation that can then be registered as an independent \"gate\". locate_instructions (schedule,\u00a0instruction_type) Locate specific instructions in a schedule. map_qubit_indices (circuits,\u00a0context) Map qubit indices in circuits to the indices in the component mapping. map_sweep_results_to_logical_qubits (...) Convert sweep results returned by Station Control to the circuit measurement results the client expects. print_channel (schedule,\u00a0channel_name) Print all instructions in a channel of a schedule. print_schedule (schedule) Print all instructions in each segment of a schedule. replace_instruction_in_place (schedule,\u00a0...) Replace an instruction in a schedule with one or more instructions. Classes InstructionLocation (channel_name,\u00a0index,\u00a0...) Return type for locate_instructions() . Inheritance previous iqm.pulla.interface.SettingsRetrievalException next iqm.pulla.utils.InstructionLocation By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils.map_qubit_indices",
    "url": "/iqm-pulla/api/iqm.pulla.utils.map_qubit_indices.html",
    "description": "Map qubit indices in circuits to the indices in the component mapping. circuits ( Iterable [ Circuit ] ) \u2013 context ( dict [ str , Any ] ) \u2013 tuple [ list [ Circuit ], dict [ str , Any ]] previous iqm.p...",
    "content": "Map qubit indices in circuits to the indices in the component mapping. circuits ( Iterable [ Circuit ] ) \u2013 context ( dict [ str , Any ] ) \u2013 tuple [ list [ Circuit ], dict [ str , Any ]] previous iqm.pulla.utils.locate_instructions next iqm.pulla.utils.map_sweep_results_to_logical_qubits By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.interface.compiler.MoveGateValidationMode",
    "url": "/iqm-pulla/api/iqm.cpc.interface.compiler.MoveGateValidationMode.html",
    "description": "Bases: StrEnum MOVE gate validation mode for circuit compilation. Attributes STRICT MOVE(qubit, resonator) gates must only appear in sandwiches (pairs). ALLOW_PRX Allow PRX gates on the MOVE qubit ins...",
    "content": "Bases: StrEnum MOVE gate validation mode for circuit compilation. Attributes STRICT MOVE(qubit, resonator) gates must only appear in sandwiches (pairs). ALLOW_PRX Allow PRX gates on the MOVE qubit inside MOVE sandwiches during validation. NONE Do not perform any MOVE gate validation. Methods __format__ (format_spec,\u00a0/) Return a formatted version of the string as described by format_spec. __new__ (value)  __str__ () Return str(self). MOVE(qubit, resonator) gates must only\nappear in sandwiches (pairs). Inside a sandwich there must be no gates acting on the\nMOVE qubit, and no other MOVE gates acting on the resonator. Perform standard MOVE gate validation Allow PRX gates on the MOVE qubit inside MOVE sandwiches during validation. Do not perform any MOVE gate validation. previous iqm.cpc.interface.compiler.MoveGateFrameTrackingMode next iqm.pulla By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.circuit_compilation_request_handler",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.circuit_compilation_request_handler.html",
    "description": "Convert quantum circuits into instruction schedules. This is the entry-point for integrations, e.g. for a server-side component performing circuit-to-pulse compilation. Functions handle_circuit_compil...",
    "content": "Convert quantum circuits into instruction schedules. This is the entry-point for integrations, e.g. for a server-side component performing circuit-to-pulse compilation. Functions handle_circuit_compilation_request (job_id,\u00a0...) Compile a batch of quantum circuits into a form that can be executed by Station Control. previous iqm.cpc.compiler next iqm.cpc.compiler.circuit_compilation_request_handler.handle_circuit_compilation_request By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.interface.compiler.DDMode",
    "url": "/iqm-pulla/api/iqm.cpc.interface.compiler.DDMode.html",
    "description": "Bases: StrEnum Dynamical Decoupling (DD) mode for circuit execution. Attributes DISABLED Do not apply dynamical decoupling. ENABLED Apply dynamical decoupling. Methods __format__ (format_spec,\u00a0/) Retu...",
    "content": "Bases: StrEnum Dynamical Decoupling (DD) mode for circuit execution. Attributes DISABLED Do not apply dynamical decoupling. ENABLED Apply dynamical decoupling. Methods __format__ (format_spec,\u00a0/) Return a formatted version of the string as described by format_spec. __new__ (value)  __str__ () Return str(self). Do not apply dynamical decoupling. Apply dynamical decoupling. previous iqm.cpc.interface.compiler.CircuitMetrics next iqm.cpc.interface.compiler.DDStrategy By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.errors.CompilationPassError",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.errors.CompilationPassError.html",
    "description": "There is something wrong with the compilation pass. previous iqm.cpc.compiler.errors.ClientError next iqm.cpc.compiler.errors.InsufficientContextError By IQM Pulla developers \u00a9 Copyright 2024-2025, IQ...",
    "content": "There is something wrong with the compilation pass. previous iqm.cpc.compiler.errors.ClientError next iqm.cpc.compiler.errors.InsufficientContextError By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils.locate_instructions",
    "url": "/iqm-pulla/api/iqm.pulla.utils.locate_instructions.html",
    "description": "Locate specific instructions in a schedule. schedule ( Schedule ) \u2013 The schedule to search. instruction_type ( type [ Instruction ] ) \u2013 The type of the instruction to search for. min_duration ( int ) ...",
    "content": "Locate specific instructions in a schedule. schedule ( Schedule ) \u2013 The schedule to search. instruction_type ( type [ Instruction ] ) \u2013 The type of the instruction to search for. min_duration ( int ) \u2013 The minimum duration of the instruction to search for (in samples). channels ( Iterable [ str ] | None ) \u2013 Names of channels in schedule to search. Iff None, search all the channels. For each located instruction, a namedtuple containing the channel name, instruction index, and duration. list [ InstructionLocation ] previous iqm.pulla.utils.iqm_circuit_to_gate_implementation next iqm.pulla.utils.map_qubit_indices By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.interface.compiler.HeraldingMode",
    "url": "/iqm-pulla/api/iqm.cpc.interface.compiler.HeraldingMode.html",
    "description": "Bases: StrEnum Heralding mode for circuit execution. Attributes NONE Do not do any heralding. ZEROS Perform a heralding measurement on all the components used in each circuit (if they have measurement...",
    "content": "Bases: StrEnum Heralding mode for circuit execution. Attributes NONE Do not do any heralding. ZEROS Perform a heralding measurement on all the components used in each circuit (if they have measurement data available in the calset), only retain shots where all the components are measured to be in the zero state. Methods __format__ (format_spec,\u00a0/) Return a formatted version of the string as described by format_spec. __new__ (value)  __str__ () Return str(self). Do not do any heralding. Perform a heralding measurement on all the components used in each circuit (if they have\nmeasurement data available in the calset), only retain shots where all the components\nare measured to be in the zero state. previous iqm.cpc.interface.compiler.DDStrategy next iqm.cpc.interface.compiler.MeasurementMode By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.pulla.utils.get_hash_for",
    "url": "/iqm-pulla/api/iqm.pulla.utils.get_hash_for.html",
    "description": "Get a unique id hash for a given circuit. In the context of this function, two CPC circuits are considered equal if they have:\n1. The same CircuitOperations in the same order.\n2. The loci of those cir...",
    "content": "Get a unique id hash for a given circuit. In the context of this function, two CPC circuits are considered equal if they have:\n1. The same CircuitOperations in the same order.\n2. The loci of those circuit operations are the same in all operation. circuit ( Circuit ) \u2013 int previous iqm.pulla.utils.find_circuit_boundary next iqm.pulla.utils.initialize_schedule_builder By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulla",
    "title": "iqm.cpc.compiler.station_settings.build_station_settings",
    "url": "/iqm-pulla/api/iqm.cpc.compiler.station_settings.build_station_settings.html",
    "description": "Build the station settings for executing a batch of quantum circuits using the given QPU\nelements and calibration data. circuit_qubits ( Iterable [ str ] ) \u2013 physical qubit names used in the circuit c...",
    "content": "Build the station settings for executing a batch of quantum circuits using the given QPU\nelements and calibration data. circuit_qubits ( Iterable [ str ] ) \u2013 physical qubit names used in the circuit circuit_couplers ( Iterable [ str ] ) \u2013 coupler names used in the circuit measured_probe_lines ( Iterable [ str ] ) \u2013 probe line names used in the measurements shots ( int ) \u2013 number of times to repeat each circuit\u2019s execution calibration_set ( dict [ str , bool | str | int | float | complex | ndarray ] ) \u2013 calibration set as a mapping from observation paths to observation values boundary_qubits ( Iterable [ str ] ) \u2013 physical qubits connected to the boundary_couplers but not in circuit_qubits boundary_couplers ( Iterable [ str ] ) \u2013 coupler names of couplers connected to the circuit boundary but not in circuit_couplers flux_pulsed_qubits ( Collection [ str ] ) \u2013 names of qubits that have flux pulse capability station settings tree SettingNode previous iqm.cpc.compiler.station_settings next iqm.cpc.compiler.station_settings.find_observation By IQM Pulla developers \u00a9 Copyright 2024-2025, IQM Finland Oy, Release 7.18.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Concepts and Classes",
    "url": "/iqm-pulse/concepts.html",
    "description": "This section gives an overview of the main concepts and terminology in IQM Pulse. QPUs contain components : qubits, computational resonators, couplers, and probelines. Each component may have some con...",
    "content": "This section gives an overview of the main concepts and terminology in IQM Pulse. QPUs contain components : qubits, computational resonators, couplers, and probelines. Each component may have some control channels connected to it. Control channels deliver physical control pulses\nto the QPU. Quantum operations have a locus , which is the set of quantum information carrying components\n(qubits and resonators) the operation acts on.\nOne operation may involve sending pulses to multiple control channels. The assembly of a Playlist, or a batch of quantum circuits, can be summarized as follows: A Playlist contains multiple independent segments , to be executed as a batch. A segment is a conceptual unit at a time scale where the quantum information of the QPU can be\nassumed to be preserved. A quantum circuit corresponds to one segment. What is executed during a segment is determined by a Schedule . A Schedule is a set of hardware control channels, each with a strictly timed sequence of Instructions . A Schedule is formed by scheduling a Timebox . A TimeBox can contain other TimeBoxes without precise relative timing,\nor it can be atomic, in which case it contains a single Schedule . The image below illustrates how a Playlist of two segments is formed from TimeBoxes. Hardware instructions are the lowest-level construct visible on the client side.\nInstructions are a set of atomic, real-time execution commands for the control hardware supported by IQM.\nThey work in a time scale where the quantum information of the QPU can be assumed to be preserved.\nExamples of Instructions are IQPulse to play a microwave pulse on a channel, VirtualRZ to adjust the modulation phase, ReadoutTrigger to acquire measurement data,\nand Wait to delay the next Instruction for a given time.\nSee iqm.pulse.playlist.instructions for the complete list. During execution, each hardware control channel executes its own sequence of Instructions.\nEach Instruction blocks the next until it is completed.\nInstructions are as explicit as possible, so that there is no ambiguity on what will be executed when.\nIQM Station control transforms Instructions to machine-specific commands. All Instructions have a duration, measured in samples, though the duration can be zero.\nThe durations are subject to hardware-specific granularity constraints.\nFor example, some hardware might require all instructions to be a multiple of 16 samples long, with a minimum of 32.\nInstructions violating the granularity constraints will raise an error.\nHowever, a typical user does not need to concern themselves about the constraints, as\nthe gate implementations and IQM Pulse\u2019s scheduling ensures the constraints are respected.\nThe philosophy is that Station Control, which is inaccessible to the user, does not attempt to do any smart\n\u201cmagic\u201d to fix inconsistencies in the user\u2019s input, it simply executes the Playlist it is given.\nInstead, the magic happens on the client side so that it is transparent to the user. Note For technical reasons, IQM Pulse mostly uses classes from iqm.pulse.playlist.instructions , but when\nfinalizing the output, the instructions are converted to iqm.models.playlist.instructions .\nThese two class families are semantically equivalent, apart from a few exceptions like Block which\nonly exists on the client side to help with scheduling. Schedule contains a number of control channels, each with a lists of Instructions.\nAll channels in a Schedule start executing at the same instant, and the timing is defined by the duration of the\nindividual Instructions.\nSchedules can be thought of as a fixed block that occupies some interval on a timeline of some channels. Schedules appear in two contexts: gate implementations and as complete segments.\nFor example, when an implementation of a PRX gate is requested,\na small Schedule involving the drive channel of a single qubit is created.\nWhen all the desired gates in a circuit have been scheduled by concatenating the gate-schedules together,\nthe end result, a segment, is a large Schedule occupying all necessary channels.\nA typical segment starts with initializing the qubits and ends with reading out their state. Whereas a Schedule is a container with strict relative timing, a TimeBox is a container with undefined\nrelative timing.\nEach TimeBox can be labeled using a human-readable label describing it, and operates on a number\nof locus components , using some of their control channels.\nA composite TimeBox contains other TimeBoxes as children, whereas atomic TimeBoxes contain a Schedule. TimeBoxes are the main language in which users define the order and relative alignment of execution elements, be it\ngates, Schedules, or larger TimeBoxes. A key process is the scheduling, in which TimeBoxes are resolved recursively into a fixed Schedule.\nWhen resolving, all Schedules inside the TimeBox are concatenated and are either left-aligned (ASAP) or right-aligned\n(ALAP), respecting the hardware constraints.\nImportantly, if some TimeBoxes have content on disjoint channels, the Schedules are allowed to happen simultaneously.\nIf they have content on partly overlapping channels, the Schedules are concatenated while preserving their internal\ntiming.\nAny interval that does not have explicit instructions is filled with Wait Instructions.\nThe figure above demonstrates how TimeBoxes are resolved. The syntax and rules are explained in more detail in Using ScheduleBuilder . A higher-level concept, a QuantumOp can represent a unitary quantum gate,\nor for example a measurement operation (not all QuantumOps necessarily represent a unitary gate).\nQuantumOps are simple, abstract, self-contained actions one can execute on a station as parts of a quantum circuit.\nThey include quantum gates like PRX, CZ, and measurements and resets.\nWhereas Schedules and Instructions act on control channels, QuantumOps act on named components on the QPU, such as\nqubits or computational resonators. A QuantumOp has unambiguous definition in terms of its intended effect on the computational subspace of the\nQPU component, but it can be implemented in various ways.\nEach implementation is represented as a GateImplementation. The list of available QuantumOps at runtime can be obtained with iqm.pulse.builder.build_quantum_ops() .\nA new QuantumOp can be registered at runtime, together with an implementation, with iqm.pulse.gates.register_implementation() . A GateImplementation bridges the gap between QuantumOps and TimeBoxes.\nWhen a user requests a QuantumOp from ScheduleBuilder with specific parameters and locus components, the\nchosen GateImplementation (usually the default) for the operation is used to produce a TimeBox.\nThis TimeBox, usually atomic, contains a Schedule on the appropriate control channels.\nThe Instructions within are constructed following the calibration values from the ScheduleBuilder. All gate implementations are listed in iqm.pulse.gates .\nSection Custom gate implementations explains how to add more implementations. Once all TimeBoxes are scheduled into large Schedules, one for each segment/circuit,\nthe Schedules are collected into a Playlist .\nThe Playlist is the final product that is sent to Station Control.\nIts contents are compressed by indexing all unique Instructions and waveforms on each channel,\nand representing the control channels in each segment as lists of Instruction indices. During execution, the segments in the Playlist are executed in order, and the whole sequence is repeated\na number of times equal to the number of repetitions (shots). Segments are separated in time by end delay , a parameter outside the Playlist.\nA long end delay can be used to prevent quantum information carrying from one segment to the next,\nthus resetting the qubits.\nAlternatively, the reset can be encoded in each segment as a long Wait instruction or using some active reset scheme. Station Control aims to execute all segments together, but sometimes this is not possible due to various memory\nconstraints.\nIn case the whole Playlist does not fit in memory, the segments are split into chunks which are executed separately.\nThe delay between chunks is undefined.\nTherefore, the time between segments is guaranteed to be at least the duration of the end delay, but can be much larger. inspect_playlist() provides a neat visual representation of the playlist, as blocks of instructions on a\ntimeline. previous IQM Pulse next Using ScheduleBuilder \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Custom gate implementations",
    "url": "/iqm-pulse/custom_gates.html",
    "description": "Quantum gates are represented by QuantumOp data classes, containing the required\nmetadata to define the gate. A QuantumOp is identified by its name , and arity defines number of locus components the o...",
    "content": "Quantum gates are represented by QuantumOp data classes, containing the required\nmetadata to define the gate. A QuantumOp is identified by its name , and arity defines number of locus components the operation acts on. For example,\nthe PRX operation (Phased X Rotation) is a single-qubit operation, so its arity is 1, whereas the CZ (Controlled-Z) gate\nacts on two qubits, having arity 2. Arity 0 has a special meaning that the operation in question can act on any number\nof components (for example Barrier ). The attribute symmetric defines whether the effect of the quantum operation\nis symmetric with respect to changing the order of its locus components. As an example, the CZ gate is a symmetric\ntwo-qubit gate, whereas CNOT (Controlled-NOT) is not symmetric. Some quantum operations are defined as \u201cfunctions\u201d, taking one or more parameters to define the effect. These\narguments are stored in the attribute params . As an example, the PRX gate\ntakes two arguments, angle (the rotation angle with respect to the z-axis of the Bloch sphere), and phase (the rotation phase in the rotating frame). On the other hand, many operations do not require any parameters, in\nwhich case this field is an empty tuple (e.g. the CZ gate). A QuantumOp has unambiguous definition in terms of its intended effect on the computational subspace of the\nQPU component, but it can be implemented in various ways. Each implementation is represented as a GateImplementation subclass. A QuantumOp stores its known implementations in the\nfield implementations . Note that even though QuantumOp is a frozen data class, the implementations dictionary can be modified, e.g.\nto add new implementations or to change their order (usually programmatically by some client procedure, but nothing as\nsuch prevents the user from manipulating the contents manually). The default implementation is how the user prefers\nto implement the operation unless otherwise specified (in effect, this is what will get called in most cases the\noperation is invoked). In the implementations dict, the default implementation is defined as the first entry.\nQuantumOp contains helpful methods that allow setting and returning the default implementation for specific cases: set_default_implementation() , get_default_implementation_for_locus() , and set_default_implementation_for_locus() . The attribute unitary stores a function that can be used to get the unitary\nmatrix representing the quantum operation in question. The unitary function must have the same arguments\nas defined in params , such that for each collection of these parameters it\ngives the associated unitary matrix. Note that not all QuantumOps necessarily even represent a unitary gate (e.g.\nthe measure operation is not one), or the exact form of the unitary matrix might not be known. In these cases, the\nfield can be left None . The unitary does not need to be defined for most of the basic usage of a QuantumOp, but certain\nalgorithmic methods (e.g. some implementations of Randomized Benchmarking) may require the unitary matrices to be known,\nand such operations that do not define the getter function cannot then be used in these contexts. For more information, see the API docs of QuantumOp for the full list of fields needed\nto define a quantum operation and the available class methods. While QuantumOp represents an abstract quantum operation, its implementations contain\nthe concrete logic of how to make that operation happen using QC hardware. Gate implementations are subclasses of GateImplementation . In this section, the main features of that class are\nintroduced (for a full list of class methods see the API docs), with the emphasis being on how to create your own\ngate implementations. Starting with __init__() , it is important to note that the init\nmethods of all gate implementations must have the exact same signature: Here, parent is the QuantumOp this gate implementation implements, and name is the implementation\u2019s name in\nthe dictionary implementations . locus is the set of (usually logical) components\nthe QuantumOp acts on (the size of the locus must be consistent with the parent \u2019s arity ), while calibration_data gives the required calibration data values\nfor this implementation and locus (can be empty in case the implementation needs no calibration data). Finally,\nThe implementations store a reference to the ScheduleBuilder that created it. This is\nbecause GateImplementations are practically never created manually by calling the init method itself. Instead, one\nneeds a builder and uses get_implementation() . The responsibility of the init method is to (at least) store the calibration_data provided from the builder for\nfurther use, but in many cases, one might want to create some intermediate objects like pulses or instructions from that calibration data already at this point. Note that ScheduleBuilder caches its GateImplementations per each locus and calibration_data , so as long as the calibration is not changed, the code in init will be called just once per locus. GateImplementations are Callables, i.e. they implement the __call__ method. It should take as its arguments at least\nthe QuantumOpt parameters defined for the parent in params , but in\naddition it may have optional extra arguments. The call method should return a TimeBox object\nthat contains the pulses, instructions and other logic required to implement the quantum operation in question. The\ntypical usage of gate implementations then looks like this (See Using ScheduleBuilder and Pulse timing for more\ninfo on scheduling and the ScheduleBuilder): The base class __call__() method does automatic TimeBox caching based\non the unique values of the call arguments, and in many cases, one does not want to reimplement this caching in their own\nimplementations. For this reason, there is the method _call which contains just the pure TimeBox creation logic.\nDevelopers can choose to override that instead of __call__ in cases where the call args are hashable python types,\nand then they can utilize the default caching of TimeBoxes from the base class. When writing a GateImplementation, a developer should consider what parts of the logic should go to the class init and\nwhat to the __call__ or _call method. A general rule of thumb would be that any parts that can be precomputed\nand do not depend on the call arguments can go to init, and the rest to call. As an example, let\u2019s go through a simple PRX _call method (note that the default PRX implementations do not\nuse this exact call method, as this is a simplified example for educational purposes): Here, we first create an IQPulse object which is a low-level Instruction. IQPulse\nmeans a \u201ccomplex pulse\u201d which has two orthogonal components i and q \u2013 this what drive pulses look like in general. In\nthis simplified example, we have hardcoded the pulse waveforms into TruncatedGaussian and TruncatedGaussianDerivative for the i and q components, respectively (this is a DRAG implementation, so the\nq component is the derivative of the i component). The waveforms are parametrized by the calibration_data for the\ngiven locus (see the next subsection for more info on Waveforms and calibration data). The PRX QuantumOp param angle scales the pulse amplitude linearly (the waveforms are normalized to one), and the param phase defines relative\nphase modulation. Then the returned TimeBox is created out of the instruction . Note that\nsince we override _call here, instead of __call__ , so this implementation would utilize the default base class\ncaching such that the TimeBoxes are cached per unique values of (angle, phase) . Another important concept is a the so called locus mapping of a gate implementation. Locus mappings define on which\nloci, i.e. groups of components, a given implementation can be defined. They are used to relay the information which\nloci are supported to a client application (e.g. EXA). In addition, the gate implementation itself can programmatically\nuse this information self.builder.chip_topology . For example, a PRX can be defined on all single components that are connected to a drive line, and CZ can be defined on\nconnected pairs of qubits. Locus mappings live in ScheduleBuilder.chip_topology which is a ChipTopology object. Locus mapping is a dict whose keys are the loci\n( tuple[str, ...] keys denote asymmetric loci where the order of the components matter, and frozenset[str] type\nloci denote symmetric ones), and the values are groups of components, typed tuple[str, ...] , where each locus can be\nmapped with some additional components that are needed for the operation of the implementation. For example, some CZ\nimplementation that tries to correct for crosstalk could map the non-locus components that see this crosstalk here.\nThe values of the dict can be left empty or just replicate the key components in case such extra information is not\nneeded. GateImplementations can define their locus mappings via get_custom_locus_mapping() or if a client application already\nadds the mapping, we can just return its name via get_locus_mapping_name() .\nIf neither of these methods are overridden in a GateImplementation class, the default behaviour will be such that an arity==1 loci will be assumed to use the mapping where all single qubits are the keys, and arity==2 loci the\n(symmetric) mapping where the keys are all pairs of connected qubits. For other arities there is no default behaviour,\nso it is then mandatory to define the mapping explicitly using the aforementioned methods. In order to implement most QuantumOps, one has to physically alter the state of the QPU. This is typically done by playing\nspecified and correctly calibrated pulses via the control electronics (this applies to all typical logical gates such as\ne.g. PRX or CZ \u2013 non-physcial metaoperations such as Barrier are an exception). In defining these pulses, there are two\nlevels of abstractions: Waveform and Instruction . Waveform represents the physical form of the control pulse, typically normalized to the interval [-1.0, 1.0] . The\nEach Waveform subclass can define any number of waveform parameters as class\nattributes, which can be used to programmatically define the waveform. For example, a Gaussian could be defined in terms\nof the average mu and spread sigma . A Waveform class then essentially contains just the parameters\nand a recipe for computing the samples as an np.ndarray . As an example, here is how one writes the Waveform class\nfor Gaussian : The Instructions RealPulse and IQPulse allow handling the amplitudes (via the attribute scale ) without\nhaving to resample the waveform for every different amplitude value. However, one can always choose to include\nthe amplitude into the sampling and then use scale=1 . The waveform parameters (like sigma in the above Gaussian) typically require calibration when the Waveform is used\nin a quantum gate. However, the GateImplementation usually has other calibrated parameters as well defined in the\nimplementation itself. As an example, here are the implementation-level parameters of the default PRX implementation,\ndefined as class attribute: Note the amplitudes are defined here on this level, since the default PRX uses normalized Waveforms and factors in the\namplitudes via scale . In these parameters, the unit is not just metadata. The control electronics understand time\nin terms of samples and their sample rate, while human users typically want to input seconds instead of doing the sample\nconversion manually. For this reason, there is logic that converts anything that has the unit \"s\" into samples.\nSimilarly, parameters with \"Hz\" units are converted to 1/sample . For the Waveform parameters, the same logic\napplies, but by default it is assumed that all parameters are time-like and this converted from seconds to samples.\nIf some Waveform parameters needs to be made unitless or e.g. frequency-like (with \"Hz\" units), it can be achieved\nwith the method non_timelike_attributes() : In the above dict, the keys should be the attribute names and values their units. To make creating new GateImplementations more comfortable, there are additional base classes on top of GateImplementation itself. CompositeGate allows quick implementation of gates in terms of other gates,\nusing a similar syntax as with creating/scheduling several TimeBoxes together (see Using ScheduleBuilder ). At it\nsimplest, a ComposteGate is just the _call method: Here, one could use also builder.get_implementation instead of build() , but the latter allows calibrating the member gates\ncase specifically for this composite if they are first registered via registered_gates (in this case, there is\njust one member, PRX). Creating new implementations for the PRX, CZ and Measure gates often means just coming up with new waveforms for the\ncontrol pulses. If this is the case, there are helpful base classes that make those implementations into oneliners\n(outside of defining the Waveforms themselves): PRX_CustomWaveforms , FluxPulseGate , and Measure_CustomWaveforms . Using these\nbase classes at its simplest looks like this: All of these classes automatically include the associated Waveform parameters into the calibration parameters of\nthe implementation itself. There is also a general base class for any gate that implements a single IQPulse (both PRX_CustomWaveForms and Measure_MyCoolWaveforms actually inherit from it), regardless of the context: CustomIQWaveforms . Gate definitions (i.e. QuantumOps) are stored in ScheduleBuilder \u2019s attribute op_table . When the builder is created, the op_table comes preloaded with the all the basic QuantumOps needed for\ntypical circuit execution and their default implementations. These include e.g. the PRX gate, the CZ gate, the measure\noperation, the conditional prx operation, the reset operation, and the barrier operation. In order to add custom operations, there is a helpful function register_implementation() that\nin addition to adding new implementations allows one to add altogether new quantum operations. As an example here is a snippet that adds the CNOT gate, and its implementation, into an existing builder: Here, the CNOT implementation MyCNotClass needs to be of course defined first (a QuantumOp always needs at least one\nimplementation). Note: The end user cannot modify the canonical mapping (defined in iqm-pulse) between implementation_name and implementation_class . Note that often ScheduleBuilder is created and operated by some client application, and the same application usually\nhas its own interface for adding/manipulating QuantumOps. However, if the user has access to the builder object, the\nabove method will always work. previous Using ScheduleBuilder next Pulse timing \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Using ScheduleBuilder",
    "url": "/iqm-pulse/using_builder.html",
    "description": "This section describes how to use ScheduleBuilder to compose pulse schedules.\nScheduleBuilder encapsulates registered QuantumOps, the calibration information for them, QPU components and their\ntopolog...",
    "content": "This section describes how to use ScheduleBuilder to compose pulse schedules.\nScheduleBuilder encapsulates registered QuantumOps, the calibration information for them, QPU components and their\ntopology, and control channel properties. In the context of IQM Pulla and EXA, an instance of ScheduleBuilder is given by the framework,\nand it contains all the necessary information to execute against a particular quantum computer instance.\nHere, we assume that user has an instance of ScheduleBuilder builder to work with. A typical workflow begins with calling get_implementation() with the name of a desired QuantumOp and the locus\nfor the operation.\nThe locus is the logical target of the operation, usually a sequence of qubits or computational resonators.\nThis outputs a an instance of GateImplementation , which is capable of producing TimeBoxes with the correct\ncalibration for that locus. For example, here we ask for the GateImplementation of prx , cz , and measure , all of which are standard\ngates recognized by IQM Pulse, for qubits QB1 and QB3 .\nAny gate which is registered in the runtime can be requested this way. Notice how the number of qubits matches the operation: CZ acts on 2 qubits, while PRX acts on only one.\nMeasure can act on any number of qubits. There might be several available implementations for an operation. get_implementation gives the implementation that is set as the default, unless a specific implementation is\nrequested with a keyword argument. To instantiate some concrete TimeBoxes, we call time implementation with the logical parameters of the operations, as\ndefined by the QuantumOps.\nPRX has 2 parameters: the 2 angles of a phased rotation.\nCZ does not have any parameters. One important method is the wait() , which blocks the control channels of the given components for a certain time: In all of the examples above, the TimeBoxes are atomic, which can be organized into composite TimeBoxes to decide\ntheir relative order. TimeBoxes can be concatenated with the following rules: Addition ( + ) concatenates the children of the operands into a single TimeBox.\nUse addition to allow gates on disjoint loci to execute simultaneously, for example doing a PRX on all qubits. The pipe operation ( | ) groups two TimeBoxes together without concatenating.\nThis results in composite TimeBox with two children, the operands, which are scheduled separately.\nUse the pipe to ensure that certain operations execute before some others. Iterables of TimeBoxes are treated as the sum of the elements. This would execute 2 PRX gates on QB1 and QB2 simultaneously: If the last operator was | instead, the second gate on QB2 would execute only after the first 3 gates. Together, these rules provide a handy way of defining complex circuits easily: A TimeBox are made atomic by resolving it using ScheduleBuilder.resolve_timebox() .\nWhen using a framework like IQM Pulla or Exa, the framework will take care of the resolving as part of compilation,\nso the user does not need to do it explicitly. TimeBoxes are resolved recursively: The children of a TimeBox are resolved, and resulting (sub-)Schedules are aligned\naccording to the SchedulingStrategy (ASAP or ALAP) of the TimeBox.\nThe time duration of a TimeBox is determined by its contents and the way they are scheduled during the resolution.\nFinally, all channels are padded with Waits so that the total duration of Instructions on every channel is equal.\nIn other words, the Schedule becomes a \u201crectangle\u201d. An important part of the scheduling are the blocking rules, that is, whether the contents of two TimeBoxes block or\nslide past each other.\nThe rules are: An atomic TimeBox is considered to act on a component if it has instructions on any of the non-virtual channels\nrelated to that component. A composite TimeBox acts on the union of its children\u2019s locus components. A TimeBox blocks all channels related to any component it acts on. When scheduling two TimeBoxes, the instructions will not overlap in time if the TimeBoxes block overlapping channels. In addition to blocking the channels actually present in a TimeBox, it is possible to block neighbouring channels\nas well (for example in order to limit cross-talk).\nThe applied neighbourhood is specified in ScheduleBuilder.resolve_timebox() .\nThe neighbourhood is defined as an integer such that 0 means \u201cblock only the involved channels\u201d,\n1 means \u201cblock the involved channels and the channels of any neighbouring couplers\u201d,\n2 means \u201cthe same as in (1) but in addition block all channels connected by those couplers\u201d, and so on.\nThe blocking rules do not add actual Wait or Block instructions are added to the neighbourhood channels, and two\noverlapping neighbourhoods do not block each other.\nThe blocking comes in question only when actual content would be added to those neighbourhood channels. In practice, the rules and default GateImplementations ensure that the user can concatenate arbitrary gates\nwithout worrying that the gates have an adverse effect on each other.\nFor example, the pulse of a PRX gate playing at the same time as a CZ gate or a measurement would ruin both operations.\nIf overlapping of such gates is desired, the best way is to arrange the Instructions on the Schedule level and wrap the\nschedule into an atomic TimeBox. Note Virtual channels are special channels that exist only to aid the scheduling algorithm.\nExamples are tracking the phases of the MOVE gate, and timing of fast feedback.\nThese channels are removed when the Playlist is finalized. You are encouraged to discover the many features of ScheduleBuilder and TimeBox by reading the\nAPI: ScheduleBuilder , TimeBox . A quick reference of selected features is provided in the examples below. Finding information about the target system: Working with TimeBoxes: Some typical errors that are easy to make with the syntax: Not calling the implementation to get a TimeBox. The call is easy to forget especially if there are no parameters\nto give: Giving a single component as locus: previous Concepts and Classes next Custom gate implementations \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Pulse timing",
    "url": "/iqm-pulse/pulse_timing.html",
    "description": "The ReadoutTrigger Instruction responsible of qubit readout has several\ntiming-related attributes.\nThe measure.constant gate implementation produces the lower-level ReadoutTrigger instruction\nfrom a s...",
    "content": "The ReadoutTrigger Instruction responsible of qubit readout has several\ntiming-related attributes.\nThe measure.constant gate implementation produces the lower-level ReadoutTrigger instruction\nfrom a simplified set of settings.\nThe figure below shows how the settings relate to the more flexible attributes of the instruction. With conditional Instructions, we specify how the information from readout operations should affect Instructions at\nruntime.\nUsually, the goal is use the information as soon as possible, but it takes a finite time to propagate from the\nacquisition unit to the drive channels that execute the Instructions conditionally. Note On all hardware supported by IQM QCCSW, ConditionalInstruction reads the signal bit at the time of\nexcution, regardless of when the signal bit was last updated.\nThis means that if the Conditionalinstruction is executed too early, the condition will be executed based on the\nprevious state of the bit. To facilitate efficient timing of the feedback signals, IQM Pulse uses virtual channels between probeline channels\n(the source of the signals) and drive channels (the destinations).\nBlock instructions on the virtual channel represent the travel time of the signals. CCPRX_Composite is GateImplementation of the cc_prx (classically controlled PRX) that outputs two\nTimeBoxes:\nthe first one to represent the travel time, and the second one with the actual ConditionalInstruction .\nIn typical use, both should be scheduled in the same order, to ensure the Conditionalinstrucion starts when the\nsignal bit is available. The following image illustrates how the TimeBoxes are used for qubits QB2 and QB3 .\nFor QB2, this is also how Reset_Conditional implements the reset operation. The equaivalent code would be Instructions are spaced out in time only for visual clarity. When scheduled ASAP, they would be left-aligned\nsuch that the ConditionalInstructions start right after the associated control_delay has passed. The bottom of the image illustrates an alternative use of CCPRX_Composite to have more freedom in the timing.\nThere, the optional delay TimeBox is not used for scheduling the Instructions on QB4.\nInstead, the user has ensured that the other instructions take enough time for the signal to arrive.\nThis could be used to act on the previous feedback signal (not shown). Note This section is not about IQM Pulse itself, but might help in understanding the details of the execution. The image below shows a typical timing of a Playlist segment with 2 AWG devices for driving, and a readout instrument.\nHere, all statements that apply to an AWG apply to readout instruments as well.\nThe AWGs can output an arbitrary sequence of pulses, and the readout instrument can additionally read out\nthe response to the pulses. With readout, the raw signal response from the readout pulse will be integrated to produce a single number, such as a\ncomplex number or a bit, corresponding to a particular qubit in a particular segment. In the figure, one of the AWGs has been selected as the trigger master, which means it sends trigger pulses to\nstart the execution on the slave devices.\nAs shown in the picture, different delays caused by the travel time of signals can be compensated for by\nadjusting the trigger_delay setting of each device. Settings in the figure that can be adjusted by user in the higher level libraries: Setting Explanation <awg>.trigger_delay Wait time between the end of the trigger signal of the AWG master and the beginning of the pulse sequence. <awg>.trigger_delay (slave) Wait time between receiving the trigger signal at the AWG slave and the beginning of the pulse sequence. options.end_delay Wait time between the end of the pulse segment and the next trigger. <gate>.<implementation>.<locus>.duration The duration of the hardware instruction for a gate, possibly rounded to satisfy granularity constraints.\nFor the ReadoutTrigger instruction, the meaning is different, see below. Other notes: The AWG spcecified by options.trigger_master is the only channel that does not wait for a trigger\nat the start of a segment. Slave AWGs may also emit a trigger pulse to allow daisy chaining trigger signals. Systems with IQM Control System are triggered centrally and the channels run independently, and the options.trigger_master has no effect. Pipeline delays are delays between the execution of a command and the pulse actually getting outputted\nfrom a device. This delay is caused by the hardware and cannot be changed.\nIn practice, it can be thought as being part of the cable delays, and thus can be compensated with trigger_delay setting. previous Custom gate implementations next API Reference \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "References",
    "url": "/iqm-pulse/references.html",
    "description": "Eric Hyypp\u00e4, Antti Veps\u00e4l\u00e4inen, Miha Papi\u010d, Chun\u00a0Fai Chan, Sinan Inel, Alessandro Landra, Wei Liu, J\u00fcrgen Luus, Fabian Marxer, Caspar Ockeloen-Korppi, and others. Reducing leakage of single-qubit gate...",
    "content": "Eric Hyypp\u00e4, Antti Veps\u00e4l\u00e4inen, Miha Papi\u010d, Chun\u00a0Fai Chan, Sinan Inel, Alessandro Landra, Wei Liu, J\u00fcrgen Luus, Fabian Marxer, Caspar Ockeloen-Korppi, and others. Reducing leakage of single-qubit gates for superconducting quantum processors using analytical control pulse envelopes. PRX Quantum , 5(3):030353, 2024. doi:10.1103/PRXQuantum.5.030353 . John\u00a0M. Martinis and Michael\u00a0R. Geller. Fast adiabatic qubit gates using only $\\sigma _z$ control. Phys. Rev. A , 90:022307, Aug 2014. arXiv:1402.5467 , doi:10.1103/PhysRevA.90.022307 . R.\u00a0G. Lyons. Understanding Digital Signal Processing . Prentice Hall, 2nd edition, 2004. ISBN 978-0131089891. Cecilia\u00a0Gisele Jarne. A heuristic approach to obtain signal envelope with a simple software implementation. ANALES AFA , 29(2):51\u201357, 2018. arXiv:1703.06812 , doi:10.31527/analesafa.2018.29.2.51 . Eyob\u00a0A. Sete, Nicolas Didier, Angela\u00a0Q. Chen, Shobhan Kulshreshtha, Riccardo Manenti, and Stefano Poletto. Parametric-resonance entangling gates with a tunable coupler. Phys. Rev. Appl. , 16:024050, Aug 2021. arXiv:2104.03511 , doi:10.1103/PhysRevApplied.16.024050 . Youngkyu Sung, Leon Ding, Jochen Braum\u00fcller, Antti Veps\u00e4l\u00e4inen, Bharath Kannan, Morten Kjaergaard, Ami Greene, Gabriel\u00a0O. Samach, Chris McNally, David Kim, Alexander Melville, Bethany\u00a0M. Niedzielski, Mollie\u00a0E. Schwartz, Jonilyn\u00a0L. Yoder, Terry\u00a0P. Orlando, Simon Gustavsson, and William\u00a0D. Oliver. Realization of high-fidelity CZ and ZZ-free iSWAP gates with a tunable coupler. Phys. Rev. X , 11:021058, Jun 2021. arXiv:2011.01261 , doi:10.1103/PhysRevX.11.021058 . previous Changelog next License \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "API Reference",
    "url": "/iqm-pulse/API.html",
    "description": "iqm.pulse Control pulses, gates and instruction schedules for quantum computers. previous Pulse timing next pulse \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27....",
    "content": "iqm.pulse Control pulses, gates and instruction schedules for quantum computers. previous Pulse timing next pulse \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "IQM Pulse",
    "url": "/iqm-pulse/index.html",
    "description": "9.10.0 2025-05-27 IQM Pulse provides an abstraction that transforms high-level quantum circuit operations\nto a unified set of lower-level instructions for IQM quantum computers. A quantum circuit is a...",
    "content": "9.10.0 2025-05-27 IQM Pulse provides an abstraction that transforms high-level quantum circuit operations\nto a unified set of lower-level instructions for IQM quantum computers. A quantum circuit is an abstract mathematical construct which conveniently hides all implementation\ndetails such as the timing of microwave pulses, waveform shapes, sampling rates, signal capture, and so on.\nBut in order to execute a circuit you need to convert it into a schedule of hardware instructions which involve\nall of the above. IQM Pulse provides a framework for defining abstract quantum gates/operations, as well as their concrete implementations in terms of hardware instructions machinery to easily construct circuit-level gate sequences, and compile them into instruction schedules. a set of ready-made gates with implementations. IQM Pulse is not a standalone tool, but is used in IQM\u2019s client libraries, IQM Pulla and Exa.\nTo use them effectively, you are encouraged to familiarize yourself with IQM Pulse, especially the most common\nconcepts. Index Module Index Search Page next Concepts and Classes \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "RZ_ACStarkShift_CosineRiseFall",
    "url": "/iqm-pulse/api/iqm.pulse.gates.rz.RZ_ACStarkShift_CosineRiseFall.html",
    "description": "Bases: RZ_ACStarkShift AC stark pulse implemented as a modulated cosine rise fall pulse. Constructs an instance of the AC Stark pulse for the given locus. Module: iqm.pulse.gates.rz Attributes paramet...",
    "content": "Bases: RZ_ACStarkShift AC stark pulse implemented as a modulated cosine rise fall pulse. Constructs an instance of the AC Stark pulse for the given locus. Module: iqm.pulse.gates.rz Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of ModulatedCosineRiseFall Required calibration data, may be nested True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous RZ_ACStarkShift next RZ_ACStarkShift_smoothConstant \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.circuit_operations.get_unitary_from_circuit",
    "url": "/iqm-pulse/api/iqm.pulse.circuit_operations.get_unitary_from_circuit.html",
    "description": "Calculate the overall unitary implemented by a sequence of CircuitOperations. Iterate through the list of operations, skipping over barrier operations, and calculate the unitary\nfor each operation, an...",
    "content": "Calculate the overall unitary implemented by a sequence of CircuitOperations. Iterate through the list of operations, skipping over barrier operations, and calculate the unitary\nfor each operation, and then calculate the matrix product of all of them. The unitary definition must be present\nin the QuantumOpTable given as the second argument. circuit ( list [ CircuitOperation ] ) \u2013 list of CircuitOperations in order table ( dict [ str , QuantumOp ] | None ) \u2013 Table of all registered quantum ops. qubit_names ( list [ str ] | None ) \u2013 Optionally, the ordering of the qubits. Array describing the action of the circuit in big endian convention. ndarray previous circuit_operations next iqm.pulse.circuit_operations.get_unitary_from_op \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.playlist.fast_drag.evaluate_fast_drag_q_envelope",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.fast_drag.evaluate_fast_drag_q_envelope.html",
    "description": "Evaluate Q-envelope of FAST DRAG for given coefficients. The Q-envelope is defined as \\(Q(t) = \\sum_{n=1}^{N} c_n n (-1)^n \\sin(2\\pi n t/t_p)]\\) , where \\(N\\) is\nthe number of cosine terms in the seri...",
    "content": "Evaluate Q-envelope of FAST DRAG for given coefficients. The Q-envelope is defined as \\(Q(t) = \\sum_{n=1}^{N} c_n n (-1)^n \\sin(2\\pi n t/t_p)]\\) , where \\(N\\) is\nthe number of cosine terms in the series, \\(\\{c_n\\}\\) are the coefficients, and the pulse is defined on the\ninterval \\(t \\in [-t_p/2, t_p/2]\\) . t_arr ( ndarray ) \u2013 Array of time points, at which the function is to be evaluated pulse_duration ( float ) \u2013 Pulse duration in the same units as t_arr coefficients ( ndarray ) \u2013 Coefficients of a FAST DRAG pulse Q-envelope of a FAST DRAG pulse evaluated at t_arr ndarray previous iqm.pulse.playlist.fast_drag.evaluate_fast_drag_i_envelope next iqm.pulse.playlist.fast_drag.fourier_transform_of_cos_basis_functions_as_tensor \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "FastDrag",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.fast_drag.FastDrag.html",
    "description": "Bases: SuppressedPulse Base class for IQ components of the Fourier Ansatz Spectrum Tuning (FAST) DRAG pulse. The FAST DRAG pulse shapes the I-envelope in the frequency domain to suppress specified fre...",
    "content": "Bases: SuppressedPulse Base class for IQ components of the Fourier Ansatz Spectrum Tuning (FAST) DRAG pulse. The FAST DRAG pulse shapes the I-envelope in the frequency domain to suppress specified frequency intervals\naccording to given weights. Furthermore, the Q-envelope is obtained as a derivative of the I-envelope\nsimilarly to ordinary DRAG. This class represents a base class for an implementation using cosine functions\nas the I-envelope basis functions. See [ 1 ] for more details on FAST DRAG. number_of_cos_terms ( int ) \u2013 Number of cosine terms in the Fourier series expression of the I-component suppressed_interval_widths ( ndarray ) \u2013 Widths of the suppressed frequency intervals (in Hz). The last element corresponds\nto the width of a potential cutoff interval. weights ( ndarray ) \u2013 Weights corresponding to the suppressed frequency intervals n_samples ( int ) \u2013 full_width ( float ) \u2013 coefficients ( ndarray ) \u2013 suppressed_frequencies ( ndarray ) \u2013 compute_coefs_from_frequencies ( bool ) \u2013 center_offset ( float ) \u2013 Module: iqm.pulse.playlist.fast_drag Attributes center_offset  number_of_cos_terms  suppressed_interval_widths  weights  full_width  coefficients  suppressed_frequencies  compute_coefs_from_frequencies  n_samples Requested number of samples for the waveform. Methods non_timelike_attributes Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Used to construct the parameters for the calibration data required by the waveform.\nBy default all the waveform attributes are \u201ctimelike\u201d (the unit for their calibration data is s).\nHowever, some waveform attributes can be dimensionless, e.g. the relative amplitudes in a sum of\nconsisting of multiple terms, or frequency-like (calibration data has the unit \u2018Hz\u2019).\nIf a Waveform subclass has non-timelike attributes, it needs to redefine this method. When the Waveform is constructed, all timelike calibration data is converted to units of the\nsampling window duration, and all frequency-like calibration data into units of inverse sampling\nwindow duration. dict [ str , str ] previous iqm.pulse.playlist.fast_drag.solve_fast_coefficients_for_given_weights_and_ranges next FastDragI \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "CCPRX_Composite_DRAGGaussian",
    "url": "/iqm-pulse/api/iqm.pulse.gates.conditional.CCPRX_Composite_DRAGGaussian.html",
    "description": "Bases: CCPRX_Composite Conditional drag_gaussian pulse. Module: iqm.pulse.gates.conditional Attributes default_implementations Mapping from operation names to the designated default implementation of ...",
    "content": "Bases: CCPRX_Composite Conditional drag_gaussian pulse. Module: iqm.pulse.gates.conditional Attributes default_implementations Mapping from operation names to the designated default implementation of that operation. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Mapping from operation names to the designated default implementation of that operation. Filling this attribute\nallows one to define a different default implementation from the common default in self.builder.op_table to\nbe used in he context of this composite gate. If an operation is not found in this dict as a key, this\nCompositeGate will use the common default as the default implementation for it. previous CCPRX_Composite_DRAGCosineRiseFall next cz \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "MOVE_CustomWaveforms",
    "url": "/iqm-pulse/api/iqm.pulse.gates.move.MOVE_CustomWaveforms.html",
    "description": "Bases: FluxPulseGate Qubit-resonator MOVE gate using flux pulses on both components. This class implements the extra phase bookkeeping logic required to make the MOVE\ngates work as intended. Due to th...",
    "content": "Bases: FluxPulseGate Qubit-resonator MOVE gate using flux pulses on both components. This class implements the extra phase bookkeeping logic required to make the MOVE\ngates work as intended. Due to the unknown phase in the MOVE gate definition, the MOVEs\nneed to be applied in pairs, i.e. the resonator state is always moved back to the qubit\nit came from. Between this pair of MOVE gates you can apply any number of other two-component\ngates (CZs for example) between the resonator and other qubits. This sequence of\ngates acting on the resonator is called a MOVE sandwich . At the end of a sandwich we have\nto apply a local phase correction (z rotation) on the state that was moved back to the qubit. The __call__() method of this class uses the MoveMarker annotation instruction\nto mark the beginning and end of each MOVE sandwich, in order to enable the calculation of the\nangle of the z rotation to be applied on the moved qubit at the end of the sandwich to\ncounteract the phase accumulation during the sandwich relative to the computational frame of\nthe qubit.\nThe phase accumulation has two sources: Phase due to the frequency detuning between the qubit and the resonator,\nproportional to the time duration the MOVE sandwich. Phase due to the virtual z rotations applied on the resonator as\ngates are applied between it and another qubit, which need to be summed up.\nBy convention the resonator VirtualRZ angle of the MOVE implementation itself is currently\nalways zero (since only the sum of the resonator and qubit z rotation angles matters for MOVE),\nbut we also include it in the sum for completeness. The phases are calculated and applied on the qubits using apply_move_gate_phase_corrections() . Module: iqm.pulse.gates.move Attributes coupler_wave Flux pulse Waveform to be played in the coupler flux AWG. parameters Required calibration data, may be nested qubit_wave Flux pulse Waveform to be played in the qubit flux AWG. root_parameters Include the frequency difference between qubit and resonator in the gate parameters for phase tracking. symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Include the frequency difference between qubit and resonator in the gate parameters for phase tracking. The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Flux pulse Waveform to be played in the coupler flux AWG. Required calibration data, may be nested Flux pulse Waveform to be played in the qubit flux AWG. True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous MOVE_CRF_CRF next MOVE_TGSS_CRF \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "TimeBox",
    "url": "/iqm-pulse/api/iqm.pulse.timebox.TimeBox.html",
    "description": "Bases: object Container for one or more instruction schedule fragments, to be scheduled according to a given strategy. Each TimeBox can be labeled using a human-readable label describing it, and opera...",
    "content": "Bases: object Container for one or more instruction schedule fragments, to be scheduled according to a given strategy. Each TimeBox can be labeled using a human-readable label describing it, and operates on a number\nof locus components , using some of their control channels.  It can be either atomic or composite . An atomic box only contains a single Schedule . A composite box contains a sequence of other TimeBoxes as its children.\nThe locus components are the union of the locus components of the children.\nIf two children use the same channel so that they cannot happen simultaneously, they must\nhappen in the order they occur in the sequence. A box can be made atomic by resolving it using ScheduleBuilder.resolve_timebox .\nThe time duration of the box is determined by its contents and the way they are scheduled during the resolution. TimeBoxes can be concatenated with the following rules: Addition concatenates the children of the operands into a single TimeBox. The pipe operation groups two TimeBoxes together without concatenating. Iterables of Boxes are treated as the sum of the elements. Let a, b, c, d be TimeBoxes. Then Module: iqm.pulse.timebox Attributes scheduling Determines how the contents of a composite TimeBox are scheduled by ScheduleBuilder. scheduling_algorithm Determines the algorithm used in converting the TimeBox to a Schedule. label Description the contents of the box for users' convenience. locus_components Names of the QPU components on which this timebox operates. atom Resolved contents of the TimeBox, or None if not resolved. children Further Timeboxes inside this TimeBox. neighborhood_components Dict of neighborhood range integers mapped to sets of components neighboring the locus of this TimeBox . Methods atomic Build an atomic timebox from a schedule. composite Build a composite timebox from a sequence of timeboxes. print Print a simple representation of the contents of this box. set_alap Set the scheduling strategy to As late as possible (ALAP). set_asap Set the scheduling strategy to As soon as possible (ASAP). validate Validate the contents of the TimeBox. label ( str ) \u2013 locus_components ( set [ str ] ) \u2013 atom ( Schedule | None ) \u2013 children ( tuple [ TimeBox , ... ] ) \u2013 scheduling ( SchedulingStrategy ) \u2013 scheduling_algorithm ( SchedulingAlgorithm ) \u2013 neighborhood_components ( dict [ int , set [ str ] ] ) \u2013 Description the contents of the box for users\u2019 convenience. Has no functional effect. Names of the QPU components on which this timebox operates. These can include additional components\nto the ones included in one of the channels occupied by this TimeBox . The components included in this\nattribute will be blocked in scheduling, in addition to the ones dictated by the neighborhood range (see neighborhood_components ). Resolved contents of the TimeBox, or None if not resolved. Further Timeboxes inside this TimeBox. Determines how the contents of a composite TimeBox are scheduled by ScheduleBuilder.\nHas no meaning for an atomic TimeBox. Determines the algorithm used in converting the TimeBox to a Schedule. Dict of neighborhood range integers mapped to sets of components neighboring the locus of this TimeBox .\nThese are used in the scheduling when the corresponding neighborhood range is used.\nThe scheduling algorithm computes the neighborhood components (unless it has been already precomputed by\ne.g. the GateImplementation ) and caches them under this attribute. Neighborhood range 0 means just the components\naffected by one of the channels in self.atom + self.locus , 1 means also neighboring couplers, 2 the\ncomponents connected to those couplers, and so on. Note: range 0 may differ from self.locus_components : it can\nhave additional components that have occupied channels in self but are not defined as a part of the \u2018locus\u2019 of\nthis TimeBox for any reason. Build a composite timebox from a sequence of timeboxes. boxes ( Iterable [ TimeBox | Iterable [ TimeBox ] ] ) \u2013 contents of the new timebox. Any iterables of timeboxes will be flattened (recursively) and extended\nto the contents in the same order. label ( str ) \u2013 label of the new timebox scheduling ( SchedulingStrategy ) \u2013 scheduling strategy to use when resolving the new timebox scheduling_algorithm ( SchedulingAlgorithm ) \u2013 scheduling algorithm to use when resolving the new timebox composite timebox containing boxes as its children TimeBox Build an atomic timebox from a schedule. schedule ( Schedule ) \u2013 contents of the new timebox locus_components ( Iterable [ str ] ) \u2013 names QPU components schedule operates on label ( str ) \u2013 label of the new timebox atomic timebox containing schedule TimeBox Validate the contents of the TimeBox. path ( tuple [ str , ... ] ) \u2013 Labels of ancestor boxes, to generate a better error message. None Set the scheduling strategy to As soon as possible (ASAP). TimeBox Set the scheduling strategy to As late as possible (ALAP). TimeBox Print a simple representation of the contents of this box. _idxs ( tuple [ int , ... ] ) \u2013 None previous SchedulingStrategy next utils \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_DRAGCosineRiseFallSX",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_DRAGCosineRiseFallSX.html",
    "description": "Bases: PRX_CustomWaveformsSX PRX gate, DRAG / CosineRiseFall IQ pulse with VZ implementation. See PRX_CustomWaveformsVZ . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q cha...",
    "content": "Bases: PRX_CustomWaveformsSX PRX gate, DRAG / CosineRiseFall IQ pulse with VZ implementation. See PRX_CustomWaveformsVZ . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). excluded_parameters Parameters names to be excluded from self.parameters . parameters Required calibration data, may be nested Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Parameters names to be excluded from self.parameters . Inheriting classes may override this if certain\nparameters are not wanted in that class (also parameters defined by the waveforms can be excluded). Builds a single sqrt(X) pulse from the calibration data. IQPulse If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . Required calibration data, may be nested alias of CosineRiseFall alias of CosineRiseFallDerivative previous PRX_DRAGCosineRiseFall next PRX_DRAGGaussian \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "ComplexIntegration",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.ComplexIntegration.html",
    "description": "Bases: AcquisitionMethod Perform a weighted integration of the IQ raw signal, resulting in a complex number. Module: iqm.pulse.playlist.instructions Attributes weights Integration weights. label Ident...",
    "content": "Bases: AcquisitionMethod Perform a weighted integration of the IQ raw signal, resulting in a complex number. Module: iqm.pulse.playlist.instructions Attributes weights Integration weights. label Identifier for the returned data, like QB1__readout.time_trace . delay_samples Delay from beginning of probe pulse to beginning of acquisition window, in samples. Methods label ( str ) \u2013 delay_samples ( int ) \u2013 weights ( IQPulse ) \u2013 Integration weights. previous Block next ConditionalInstruction \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.scheduler.extend_hard_boundary",
    "url": "/iqm-pulse/api/iqm.pulse.scheduler.extend_hard_boundary.html",
    "description": "Merge two Schedules together such that the timebox boundary is respected. This scheduling algorithm treats the Schedules as hard, rectangular boxes where any ragged edges\nwill be padded with Waits, an...",
    "content": "Merge two Schedules together such that the timebox boundary is respected. This scheduling algorithm treats the Schedules as hard, rectangular boxes where any ragged edges\nwill be padded with Waits, and the boxes are not allowed to overlap. The algorithm is as follows: 1. When adding child_schedule to schedule , the longest channel in schedule that overlaps with the\nchannels present in child determines the earliest possible starting time for the child_schedule , and all other\nchannels in schedule are padded with Wait to the aforementioned max length. 2. An occupied channel in schedule will always occupy all channels of the corresponding component (qubit,\ncoupler, \u2026). This is handled by keeping track of occupied durations for each component (no unnecessary padding\nis added to channels which do not have an actual physical pulse). 3. After the schedules are combined, all the common channels of schedule and child_schedule are blocked\nup to their common maximum length. This algorithm should not be used with variable sampling rates in the schedule channels. In that case, use extend_hard_boundary_in_seconds() instead. schedule ( Schedule ) \u2013 Schedule that should be extended with child_schedule . Modified in place. child_schedule ( Schedule ) \u2013 Child schedule to be added. child_components ( set [ str ] ) \u2013 Components (qubits, couplers, computational_resonators) that have at least\none channel in child_schedule . neighborhood_components ( set [ str ] ) \u2013 QPU components neighboring the child_components that should\nadditionally be blocked in the scheduling. component_durations ( dict [ str , int ] ) \u2013 Blocked durations for each component used by schedule .\nThese act as the earliest starting points for a new segment added to any of the channels\nof the component, but will also block the component even if it has no occupied channels\nin the schedule yet or ever (e.g. a computational resonator).\nModified in place. is_alap ( bool ) \u2013 Whether the scheduling strategy is ALAP (As Late As Possible). None previous iqm.pulse.scheduler.BLOCKING next iqm.pulse.scheduler.extend_hard_boundary_in_seconds \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Cosine",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.waveforms.Cosine.html",
    "description": "Bases: Waveform Periodic sinusoidal waveform which defaults to cosine. The use case for this waveform is to do manual modulation of other waveforms. where \\(f\\) is the frequency, and \\(\\phi\\) the phas...",
    "content": "Bases: Waveform Periodic sinusoidal waveform which defaults to cosine. The use case for this waveform is to do manual modulation of other waveforms. where \\(f\\) is the frequency, and \\(\\phi\\) the phase of the wave. frequency ( float ) \u2013 frequency of the wave, in units of inverse sampling window duration phase ( float ) \u2013 phase of the wave, in radians n_samples ( int ) \u2013 Module: iqm.pulse.playlist.waveforms Attributes phase  frequency  n_samples Requested number of samples for the waveform. Methods non_timelike_attributes Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Actually samples the waveform. sample_coords ( ndarray ) \u2013 coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) ndarray Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Used to construct the parameters for the calibration data required by the waveform.\nBy default all the waveform attributes are \u201ctimelike\u201d (the unit for their calibration data is s).\nHowever, some waveform attributes can be dimensionless, e.g. the relative amplitudes in a sum of\nconsisting of multiple terms, or frequency-like (calibration data has the unit \u2018Hz\u2019).\nIf a Waveform subclass has non-timelike attributes, it needs to redefine this method. When the Waveform is constructed, all timelike calibration data is converted to units of the\nsampling window duration, and all frequency-like calibration data into units of inverse sampling\nwindow duration. dict [ str , str ] previous ChirpImag next CosineFall \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "fast_drag",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.fast_drag.html",
    "description": "Waveform definitions for Fourier Ansatz Spectrum Tuning (FAST) DRAG pulse based on [ 1 ] . Full path: iqm.pulse.playlist.fast_drag Functions compute_matrix_of_summed_fourier_transform_inner_products (...",
    "content": "Waveform definitions for Fourier Ansatz Spectrum Tuning (FAST) DRAG pulse based on [ 1 ] . Full path: iqm.pulse.playlist.fast_drag Functions compute_matrix_of_summed_fourier_transform_inner_products (...) Evaluate matrix \\(A\\) defined in Eq. evaluate_fast_drag_i_envelope (t_arr,\u00a0...) Evaluate I-envelope of a FAST DRAG pulse for given coefficients. evaluate_fast_drag_q_envelope (t_arr,\u00a0...) Evaluate Q-envelope of FAST DRAG for given coefficients. fourier_transform_of_cos_basis_functions_as_tensor (...) Evaluate Fourier transforms of cosine basis functions for given basis function indices and frequencies. solve_fast_coefficients_for_given_weights_and_ranges (...) Solve for optimal coefficients of the basis functions in a FAST DRAG pulse. Classes FastDrag Base class for IQ components of the Fourier Ansatz Spectrum Tuning (FAST) DRAG pulse. FastDragI I-component of the Fourier Ansatz Spectrum Tuning (FAST) drag pulse. FastDragQ Q-component of the Fourier Ansatz Spectrum Tuning (FAST) drag pulse. SuppressedPulse Base class for a control pulse using a series expansion to suppress certain frequencies in its envelope spectrum Inheritance previous RealChannelConfig next iqm.pulse.playlist.fast_drag.compute_matrix_of_summed_fourier_transform_inner_products \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "MOVE_TGSS_CRF",
    "url": "/iqm-pulse/api/iqm.pulse.gates.move.MOVE_TGSS_CRF.html",
    "description": "Bases: MOVE_CustomWaveforms Qubit-resonator MOVE gate using the TGSS waveform for the coupler flux pulse and the\nCRF waveform for the qubit flux pulse. Module: iqm.pulse.gates.move Attributes paramete...",
    "content": "Bases: MOVE_CustomWaveforms Qubit-resonator MOVE gate using the TGSS waveform for the coupler flux pulse and the\nCRF waveform for the qubit flux pulse. Module: iqm.pulse.gates.move Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of TruncatedGaussianSmoothedSquare Required calibration data, may be nested alias of CosineRiseFall True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous MOVE_CustomWaveforms next MoveMarker \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.validation.InvalidInstructionError",
    "url": "/iqm-pulse/api/iqm.pulse.validation.InvalidInstructionError.html",
    "description": "Error raised when encountering an invalid instruction. previous iqm.pulse.validation.AWGScheduleValidationError next iqm.pulse.validation.PlaylistValidationError \u00a9 Copyright 2019-2025, IQM Finland Oy,...",
    "content": "Error raised when encountering an invalid instruction. previous iqm.pulse.validation.AWGScheduleValidationError next iqm.pulse.validation.PlaylistValidationError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Slepian",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.waveforms.Slepian.html",
    "description": "Bases: Waveform Slepian waveform, which minimizes non-adiabatic errors during a gate. It is assumed that the user has done the minimization in a prior step, such that the optimal \\(\\lambda_n\\) for\na s...",
    "content": "Bases: Waveform Slepian waveform, which minimizes non-adiabatic errors during a gate. It is assumed that the user has done the minimization in a prior step, such that the optimal \\(\\lambda_n\\) for\na specific length \\(\\tau_\\text{pulse}\\) (in the accelerated frame) is known. This class then reconstructs the\nwaveform with the following steps: Calculate \\(\\theta(\\tau)\\) (Slepian in the accelerated frame and in \\(\\theta\\) space) Calculate \\(t(\\tau)\\) (mapping time in the accelerated frame to time in the lab frame) Interpolate \\(\\theta(t)\\) (Slepian in the lab frame and in \\(\\theta\\) space) Calculate \\(f(t)\\) (Slepian in the lab frame and in frequency space) Calculate \\(V(t)\\) (Slepian in the lab frame and in voltage space) Since the waveform is normalized, any voltage pre-factor should go into the pulse amplitude. The user is advised to look up [ 2 ] for further details, since the derivation is mathematically\nheavy. full_width ( float ) \u2013 Duration of the support of the waveform. lambda_1 ( float ) \u2013 First coefficient of Slepian waveform. lambda_2 ( float ) \u2013 Second coefficient of Slepian waveform. frequency_initial_normalized ( float ) \u2013 Initial frequency of the pulsed component (usually coupler),\nnormalized by the maximum frequency of the pulsed component. frequency_to_minimize_normalized ( float ) \u2013 Frequency of the static component (usually qubit) which to\nminimize the leakage from/to, normalized by the maximum frequency of the pulsed component. coupling_strength_normalized ( float ) \u2013 Coupling strength between pulsed component and static component,\nnormalized by the maximum frequency of the pulsed component. center_offset ( float ) \u2013 The waveform is centered at this offset from the midpoint of the sampling window. squid_asymmetry ( float ) \u2013 Squid asymmetry. n_samples ( int ) \u2013 Module: iqm.pulse.playlist.waveforms Attributes center_offset  squid_asymmetry  full_width  lambda_1  lambda_2  frequency_initial_normalized  frequency_to_minimize_normalized  coupling_strength_normalized  n_samples Requested number of samples for the waveform. Methods non_timelike_attributes Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Used to construct the parameters for the calibration data required by the waveform.\nBy default all the waveform attributes are \u201ctimelike\u201d (the unit for their calibration data is s).\nHowever, some waveform attributes can be dimensionless, e.g. the relative amplitudes in a sum of\nconsisting of multiple terms, or frequency-like (calibration data has the unit \u2018Hz\u2019).\nIf a Waveform subclass has non-timelike attributes, it needs to redefine this method. When the Waveform is constructed, all timelike calibration data is converted to units of the\nsampling window duration, and all frequency-like calibration data into units of inverse sampling\nwindow duration. dict [ str , str ] Actually samples the waveform. sample_coords ( ndarray ) \u2013 coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) ndarray Calculate the samples of the actual Slepian waveform. coords ( ndarray ) \u2013 normalized sample coordinates, in \\([0, 1]\\) samples of the Slepian waveform ndarray Convert time in the accelerated frame to the lab frame (real time). Since the conversion is defined via an integral, finding an analytical solution was not possible. Therefore, we\nintegrate the expression numerically with scipy.integrate.romb() . tau ( float | ndarray ) \u2013 Time in the accelerated frame. num_samples ( int ) \u2013 Number of samples for the numerical integration. Must be of the form 2 ** k + 1. tau converted to the lab frame ndarray Parametrization of the Slepian waveform in the accelerated frame. The Slepian waveform is parametrized using Fourier base functions, where we only take the cosine terms into\naccount ( [ 2 ] has shown that this is a reasonable assumption).\nHere, \\(\\lambda_n\\) is the amplitude of the \\(n\\) -th term of the Fourier base function.\nIt is usually sufficient to take only up to second order terms into account, i.e. only \\(\\lambda_1\\) and \\(\\lambda_2\\) are non-zero. tau ( ndarray ) \u2013 Time in the accelerated frame, normalized to [0, 1] with tau_pulse. Slepian waveform in the theta space and accelerated frame. ndarray previous ModulatedCosineRiseFall next quantum_ops \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "CZ_CRF",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.CZ_CRF.html",
    "description": "Bases: FluxPulseGate CZ gate using a CosineRiseFall flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flux pulse Waveform ...",
    "content": "Bases: FluxPulseGate CZ gate using a CosineRiseFall flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flux pulse Waveform to be played in the qubit flux AWG. symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of CosineRiseFall Required calibration data, may be nested Flux pulse Waveform to be played in the qubit flux AWG. True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous cz next CZ_CRF_ACStarkCRF \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "scheduler",
    "url": "/iqm-pulse/api/iqm.pulse.scheduler.html",
    "description": "Tools for composing instruction schedules in time. Under the idealized, noiseless, crosstalk-less computational model, the scheduling algorithms\nshould preserve the effect of the schedules on the comp...",
    "content": "Tools for composing instruction schedules in time. Under the idealized, noiseless, crosstalk-less computational model, the scheduling algorithms\nshould preserve the effect of the schedules on the computational subspace, i.e.\nexecuting Schedule A immediately followed by B should be equivalent to\nexecuting the composed schedule A+B . The composing is always done so that in A+B all the channels of B start\ntheir execution simultaneously, and remain in sync. Nothing instructions can be added\nas spacers between the channels of A and B as necessary to make this happen. Typically the scheduling algorithms also try to minimize the total duration of the composed schedule. Full path: iqm.pulse.scheduler Module Attributes NONSOLID Instructions that can be converted to Wait after scheduling. BLOCKING Nonsolid Instructions that nevertheless block. Functions extend_hard_boundary (schedule,\u00a0...) Merge two Schedules together such that the timebox boundary is respected. extend_hard_boundary_in_seconds (schedule,\u00a0...) The same as extend_hard_boundary , but the scheduling is done in seconds. extend_schedule (A,\u00a0B,\u00a0channels,\u00a0*[,\u00a0TOL]) Extend a Schedule with another Schedule. extend_schedule_new (A,\u00a0B,\u00a0channels,\u00a0*[,\u00a0TOL]) Extend a Schedule with another Schedule. Classes SegmentPointer Tool for working with Segments. Inheritance previous QuantumOp next iqm.pulse.scheduler.NONSOLID \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_DRAGGaussian",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_DRAGGaussian.html",
    "description": "Bases: PRX_CustomWaveforms PRX gate, DRAG / TruncatedGaussian IQ pulse implementation. See PRX_CustomWaveforms . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel wave...",
    "content": "Bases: PRX_CustomWaveforms PRX gate, DRAG / TruncatedGaussian IQ pulse implementation. See PRX_CustomWaveforms . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). parameters Required calibration data, may be nested Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . Required calibration data, may be nested alias of TruncatedGaussian alias of TruncatedGaussianDerivative previous PRX_DRAGCosineRiseFallSX next PRX_DRAGGaussianSX \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.playlist.hd_drag.evaluate_hd_drag_i_envelope",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.hd_drag.evaluate_hd_drag_i_envelope.html",
    "description": "Evaluate I-envelope of HD DRAG given the coefficients of the derivative terms and the cosine terms. The I-envelope is defined as \\(I(t) = \\sum_{n=0}^{K} \\beta_{2n} g^{(2n)}(t)\\) , where \\(K\\) is the n...",
    "content": "Evaluate I-envelope of HD DRAG given the coefficients of the derivative terms and the cosine terms. The I-envelope is defined as \\(I(t) = \\sum_{n=0}^{K} \\beta_{2n} g^{(2n)}(t)\\) , where \\(K\\) is the number\nof suppressed frequency ranges, \\(\\{beta_{2n}\\}\\) are the coefficients of the derivative terms, and \\(g(t)\\) is the basis envelope. The pulse is assumed to start at time -pulse_duration/2 ,\nand end at time pulse_duration/2 . t_arr ( ndarray ) \u2013 Array of time points, at which the function is to be evaluated pulse_duration ( float ) \u2013 Pulse duration in the same units as t_arr derivative_coefs_arr ( ndarray ) \u2013 Coefficients of the even derivatives cosine_coefs_arr ( ndarray ) \u2013 Coefficients of the cosine terms in the basis envelope I-envelope of a HD DRAG pulse evaluated at t_arr ndarray previous iqm.pulse.playlist.hd_drag.COSINE_COEFFICIENTS_DICT next iqm.pulse.playlist.hd_drag.evaluate_hd_drag_q_envelope \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "ChirpImag",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.waveforms.ChirpImag.html",
    "description": "Bases: Chirp Imaginary part of the linear chirp, which sets the phase to $-pi/2$. n_samples ( int ) \u2013 freq_start ( float ) \u2013 freq_stop ( float ) \u2013 alpha ( float ) \u2013 phase ( float ) \u2013 Phase of the puls...",
    "content": "Bases: Chirp Imaginary part of the linear chirp, which sets the phase to $-pi/2$. n_samples ( int ) \u2013 freq_start ( float ) \u2013 freq_stop ( float ) \u2013 alpha ( float ) \u2013 phase ( float ) \u2013 Phase of the pulse. Defaults to $pi/2$ float Module: iqm.pulse.playlist.waveforms Attributes phase  freq_start  freq_stop  n_samples Requested number of samples for the waveform. Methods previous Chirp next Cosine \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_HdDragSX",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_HdDragSX.html",
    "description": "Bases: PRX_CustomWaveformsSX PRX gate, HD DRAG IQ pulse with VZ-based SX-implementation. See PRX_CustomWaveformsSX . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel ...",
    "content": "Bases: PRX_CustomWaveformsSX PRX gate, HD DRAG IQ pulse with VZ-based SX-implementation. See PRX_CustomWaveformsSX . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). parameters Required calibration data, may be nested Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . Required calibration data, may be nested alias of HdDragI alias of HdDragQ previous PRX_HdDrag next PRX_ModulatedCustomWaveForms \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "prx",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.html",
    "description": "Single-qubit PRX gate. The phased x rotation (PRX) gate is defined as where the rotation angle \\(\\theta\\) and the phase angle \\(\\phi\\) are in radians. It rotates the qubit state around an axis that li...",
    "content": "Single-qubit PRX gate. The phased x rotation (PRX) gate is defined as where the rotation angle \\(\\theta\\) and the phase angle \\(\\phi\\) are in radians. It rotates the qubit state around an axis that lies in the XY plane of the Bloch sphere. Full path: iqm.pulse.gates.prx Functions get_unitary_prx (angle,\u00a0phase) Unitary for a PRX gate. Classes ABC_Constant_smooth ABC class for creating gates with an arbitrarily long Constant pulses with smooth rise and fall. Constant_PRX_with_smooth_rise_fall Constant PRX pulse with cosine rise and fall padding. PRX_CustomWaveforms ABC for PRX gates implemented using a single IQ pulse and hot-swappable waveforms. PRX_CustomWaveformsSX ABC for PRX gates implemented using SX gate, hot-swappable waveforms and phase manipulation. PRX_DRAGCosineRiseFall PRX gate, DRAG / CosineRiseFall IQ pulse implementation. PRX_DRAGCosineRiseFallSX PRX gate, DRAG / CosineRiseFall IQ pulse with VZ implementation. PRX_DRAGGaussian PRX gate, DRAG / TruncatedGaussian IQ pulse implementation. PRX_DRAGGaussianSX PRX gate, DRAG / Gaussian IQ pulse with VZ implementation. PRX_FastDrag PRX gate, FAST DRAG IQ pulse based on amplitude scaling. PRX_FastDragSX PRX gate, FAST DRAG IQ pulse with VZ-based SX-implementation. PRX_GateImplementation ABC for different implementations of the PRX gate. PRX_HdDrag PRX gate, HD DRAG IQ pulse based on amplitude scaling PRX_HdDragSX PRX gate, HD DRAG IQ pulse with VZ-based SX-implementation. PRX_ModulatedCustomWaveForms ABC for PRX gates with modulated frequency, hot-swappable waveforms. PRX_ModulatedDRAGCosineRiseFall Modulated PRX pulse with cosine rise fall waveform PRX_SinglePulse_GateImplementation ABC for PRX gates implemented using a single IQ pulse. Inheritance previous MoveMarker next iqm.pulse.gates.prx.get_unitary_prx \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "CosineRiseFallDerivative",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.waveforms.CosineRiseFallDerivative.html",
    "description": "Bases: Waveform Derivative of a waveform that has a sinusoidal rise and fall, and a constant part in between. where \\(c\\) is center_offset , \\(r\\) is rise_time , and \\(p\\) is the plateau width,\ncalcul...",
    "content": "Bases: Waveform Derivative of a waveform that has a sinusoidal rise and fall, and a constant part in between. where \\(c\\) is center_offset , \\(r\\) is rise_time , and \\(p\\) is the plateau width,\ncalculated via \\(p :=\\) full_width - 2 * rise_time . Its values are in \\([-1, 1]\\) . full_width ( float ) \u2013 Duration of the support of the pulse, >= 2 * rise_time . rise_time ( float ) \u2013 Duration of the sinusoidal rise (and fall) part of the waveform, >= 0. center_offset ( float ) \u2013 The waveform is centered at this offset from the midpoint of the sampling window. n_samples ( int ) \u2013 Module: iqm.pulse.playlist.waveforms Attributes center_offset  full_width  rise_time  n_samples Requested number of samples for the waveform. Methods Actually samples the waveform. sample_coords ( ndarray ) \u2013 coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) ndarray previous CosineRise next ModulatedCosineRiseFall \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "MOVE_CRF_CRF",
    "url": "/iqm-pulse/api/iqm.pulse.gates.move.MOVE_CRF_CRF.html",
    "description": "Bases: MOVE_CustomWaveforms Qubit-resonator MOVE gate using the CRF waveform for the coupler and the qubit flux pulse. Module: iqm.pulse.gates.move Attributes parameters Required calibration data, may...",
    "content": "Bases: MOVE_CustomWaveforms Qubit-resonator MOVE gate using the CRF waveform for the coupler and the qubit flux pulse. Module: iqm.pulse.gates.move Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of CosineRiseFall Required calibration data, may be nested alias of CosineRiseFall True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous iqm.pulse.gates.move.validate_move_instructions next MOVE_CustomWaveforms \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "measure",
    "url": "/iqm-pulse/api/iqm.pulse.gates.measure.html",
    "description": "Projective measurement in the Z basis. Full path: iqm.pulse.gates.measure Classes Measure_Constant Implementation of a single-qubit projective, dispersive measurement in the Z basis. Measure_Constant_...",
    "content": "Projective measurement in the Z basis. Full path: iqm.pulse.gates.measure Classes Measure_Constant Implementation of a single-qubit projective, dispersive measurement in the Z basis. Measure_Constant_Qnd Implementation of a single-qubit projective, non quantum demolition, dispersive measurements in the Z basis. Measure_CustomWaveforms Base class for implementing dispersive measurement operations with custom probe pulse waveforms. ProbePulse_CustomWaveforms Base class for implementing a probe line measurement pulse with custom waveforms in the I and Q channels. ProbePulse_CustomWaveforms_noIntegration Base class for implementing a probe line probe pulse with custom waveforms in the I and Q channels without any integration. Probe_Constant Implementation of a single-qubit projective, dispersive measurement in the Z basis. Inheritance previous FluxMultiplexer_SampleLinear next Measure_Constant \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "sx",
    "url": "/iqm-pulse/api/iqm.pulse.gates.sx.html",
    "description": "Single-qubit sqrt(X) gate. The gate is doing pi/2 X gate, with additional Z rotation to correct phase. It rotates the qubit state in XZ plane (or around Y axis) for 90 degree. Full path: iqm.pulse.gat...",
    "content": "Single-qubit sqrt(X) gate. The gate is doing pi/2 X gate, with additional Z rotation to correct phase. It rotates the qubit state in XZ plane (or around Y axis) for 90 degree. Full path: iqm.pulse.gates.sx Classes SXGate SX gate implementation based on PRX gate, by limiting the angle to pi / 2. Inheritance previous RZ_Virtual next SXGate \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "ProbePulse_CustomWaveforms_noIntegration",
    "url": "/iqm-pulse/api/iqm.pulse.gates.measure.ProbePulse_CustomWaveforms_noIntegration.html",
    "description": "Bases: CustomIQWaveforms Base class for implementing a probe line probe pulse with custom waveforms in the I and Q channels without\nany integration. Similar to the ProbePulse_CustomWaveforms except th...",
    "content": "Bases: CustomIQWaveforms Base class for implementing a probe line probe pulse with custom waveforms in the I and Q channels without\nany integration. Similar to the ProbePulse_CustomWaveforms except that signal integration is removed. Module: iqm.pulse.gates.measure Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). root_parameters Parameters independent of the of Waveforms. wave_i Waveform for the I channel. wave_q Waveform for the Q channel. Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. probe_timebox Returns a \"naked\" probe timebox that supports convenient multiplexing through MultiplexedProbeTimeBox.__add__ . parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Parameters independent of the of Waveforms. Inheriting classes may override this to include parameters common\nto all such implementations. Cache for probe_timebox() . Builds a probe pulse and an acquisition method using the calibration data. Subclasses may override this method if needed. waveform_params ( dict [ str , Any ] ) \u2013 root_params ( dict [ str , Any ] ) \u2013 if_freq ( float ) \u2013 IQPulse If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . Returns a \u201cnaked\u201d probe timebox that supports convenient multiplexing through MultiplexedProbeTimeBox.__add__ . This method can be used if the user wants to control the multiplexing explicitly. With two MultiplexedProbeTimeBox``es ``A and B the result A + B has all the ReadoutTrigger instructions\non each probe channel of A and B multiplexed together and played simultaneously. key ( str ) \u2013 The readout results generated on this trigger will be assigned to f\"{qubit}__{key}\" , where qubit goes over the component names in self.locus . If empty,\nthe key \u201creadout.result\u201d will be used to maintain backwards compatibility. feedback_key ( str ) \u2013 The signals generated by this measure operation are routed using this key for\nfast feedback purposes. See __call__() . do_acquisition ( bool ) \u2013 if False, no acquisitions are added. MultiplexedProbeTimeBox containing the ReadoutTrigger instruction. MultiplexedProbeTimeBox Returns a TimeBox containing the multiplexed simultaneous measurement. If len(self.locus) == 1 , the TimeBox contains the measurement for just that component, otherwise\nthe measurements of components that belong to the same probeline are multiplexed together. The returned TimeBox instances behave like any other TimeBox in scheduling and circuit\ngeneration. With measurement TimeBoxes A and B the result A + B first plays the ReadoutTrigger instructions of A and only then those of B in each probe channel. If the multiplexing features of MultiplexedProbeTimeBox are needed, the method probe_timebox() can be used. In scheduling, the returned TimeBox blocks the locus components and the probe\nlines they are associated with. key ( str ) \u2013 Readout results generated on this trigger will be assigned to the acquisition labels f\"{qubit}__{key}\" , where qubit goes over the component names in self.locus .\nIf empty, the key \"readout.result\" will be used to maintain backwards compatibility. feedback_key ( str ) \u2013 If the readout mode is \u201cthreshold\u201d, the results generated by this measure operation\nare routed using the label f\"{qubit}__{feedback_key}\" for fast feedback purposes.\nThe signals are picked up by ConditionalInstruction`s that have the same label. The default value ` \u201d\u201d`` means the signal is not routed anywhere. TODO: currently the HW does not\nsupport multiple feedback keys per drive channel, so the actual key used will be FEEDBACK_KEY whenever any non-empty key is inputted. When the HW is improved, the actual key the user inputs\nshould be passed. TimeBox containing the ReadoutTrigger instruction. TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\nSubclasses can reimplement this method in case it makes sense in their context. float Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \"<operation_name>.<implementation_name>\" . Inheriting classes may\noverride this for different behaviour. operation_name ( str ) \u2013 name of the quantum operation. implementation_name ( str ) \u2013 name of the implementation name of the locus mapping str previous ProbePulse_CustomWaveforms next Probe_Constant \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "CompositeCache",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.CompositeCache.html",
    "description": "Bases: object Cache for CompositeGate TimeBoxes. Result from CompositeGate.__call__`() (or other methods returning a TimeBox) cannot be stored in the normal\ncache GateImplementation._timebox_cache as ...",
    "content": "Bases: object Cache for CompositeGate TimeBoxes. Result from CompositeGate.__call__`() (or other methods returning a TimeBox) cannot be stored in the normal\ncache GateImplementation._timebox_cache as composites can include any gates in their calls, and we cannot trust\nthat the cache is flushed correctly just based on if the composite itself has its own calibration data changed\n(we would have to flush also when any of the composite\u2019s members get new calibration, and this cannot consistently\nbe deduced). For this reason, CompositeCache will be flushed whenever ANY gate implementation gets new calibration\ndata. Module: iqm.pulse.gate_implementation Methods flush Flush the CompositeCache. get Get a TimeBox from the cache. set Set a TimeBox into the cache. Set a TimeBox into the cache. gate_implementation ( GateImplementation ) \u2013 gate implementation that created the TimeBox. cache_key ( tuple [ Any , ... ] ) \u2013 hashable key identifying the TimeBox (usually the CompositeGate.__call__() arguments cast\ninto a tuple). timebox ( TimeBox ) \u2013 TimeBox that will be added to the cache. extra_id ( str ) \u2013 extra string id for further identifying the result if needed (for example if the TimeBox did not\ncome from the call method, but some other method, this could be the method\u2019s name). None Get a TimeBox from the cache. gate_implementation ( GateImplementation ) \u2013 gate implementation that created the TimeBox. cache_key ( tuple [ Any , ... ] ) \u2013 hashable key identifying the TimeBox (usually the CompositeGate.__call__() arguments cast\ninto a tuple). extra_id ( str ) \u2013 extra string id for further identifying the result (for example if the TimeBox did not come\nfrom the call method, but some other method, this could be the method\u2019s name). The cached TimeBox or None if not fund for this gate_implementation , cache_key , and extra_id . TimeBox | None Flush the CompositeCache. None previous iqm.pulse.gate_implementation.get_waveform_parameters next CompositeGate \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Instruction",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.Instruction.html",
    "description": "Bases: object Command that can be executed by the quantum computer on a control channel. Has a well-specified time duration. Module: iqm.pulse.playlist.instructions Attributes duration Time duration o...",
    "content": "Bases: object Command that can be executed by the quantum computer on a control channel. Has a well-specified time duration. Module: iqm.pulse.playlist.instructions Attributes duration Time duration of the instruction. Methods copy Make a copy of the Instruction with the given changes applied to its contents. get_child_instructions Returns all the child Instructions the Instruction contains. get_waveforms Returns all the waveforms the Instruction contains. validate Validate the instruction attributes. duration ( int ) \u2013 Time duration of the instruction. In samples at the channel sample rate. Validate the instruction attributes. ValueError \u2013 something about the instruction is not ok None Make a copy of the Instruction with the given changes applied to its contents. Instruction Returns all the child Instructions the Instruction contains. tuple [ Instruction , \u2026] Returns all the waveforms the Instruction contains. tuple [ Waveform , \u2026] previous IQPulse next MultiplexedIQPulse \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.OCalibrationData",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.OCalibrationData.html",
    "description": "For a particular quantum operation, maps implementation names to their calibration data. alias of dict [ str , dict [ tuple [ str , \u2026] | None , dict [ str , Any ]]] previous iqm.pulse.gate_implementat...",
    "content": "For a particular quantum operation, maps implementation names to their calibration data. alias of dict [ str , dict [ tuple [ str , \u2026] | None , dict [ str , Any ]]] previous iqm.pulse.gate_implementation.OICalibrationData next iqm.pulse.gate_implementation.OpCalibrationDataTree \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_DRAGGaussianSX",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_DRAGGaussianSX.html",
    "description": "Bases: PRX_CustomWaveformsSX PRX gate, DRAG / Gaussian IQ pulse with VZ implementation. See PRX_CustomWaveformsVZ . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel w...",
    "content": "Bases: PRX_CustomWaveformsSX PRX gate, DRAG / Gaussian IQ pulse with VZ implementation. See PRX_CustomWaveformsVZ . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). parameters Required calibration data, may be nested Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . Required calibration data, may be nested alias of TruncatedGaussian alias of TruncatedGaussianDerivative previous PRX_DRAGGaussian next PRX_FastDrag \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Segment",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.schedule.Segment.html",
    "description": "Bases: object Sequence of instructions, for a single channel. Basically a list[Instruction] that keeps track of the time duration of its contents. instructions ( Iterable [ Instruction ] ) \u2013 contents ...",
    "content": "Bases: object Sequence of instructions, for a single channel. Basically a list[Instruction] that keeps track of the time duration of its contents. instructions ( Iterable [ Instruction ] ) \u2013 contents of the segment duration ( int | None ) \u2013 If None, compute the sum of the durations of instructions .\nOtherwise, the time duration (in samples) of the segment, which must match\nthe aforementioned sum if the Segment is still to be modified. Module: iqm.pulse.playlist.schedule Attributes duration Sum of the durations of the instructions in the segment, in samples. Methods append Append an instruction to the end of the segment. copy Make an independent copy of the segment. extend Append all instructions from an iterable to the end of the segment. pop Remove and return the instruction at the given index of the segment. prepend Prepend an instruction to the beginning of the segment. contents total duration of the segment, in samples Make an independent copy of the segment. Mutating the original must not affect the copy, or vice versa.\nInstructions are immutable, so they need not be copied. copy of the segment Segment Append an instruction to the end of the segment. instruction ( Instruction ) \u2013 None Prepend an instruction to the beginning of the segment. instruction ( Instruction ) \u2013 None Append all instructions from an iterable to the end of the segment. instructions ( Iterable [ Instruction ] ) \u2013 None Remove and return the instruction at the given index of the segment. idx ( int ) \u2013 Instruction Sum of the durations of the instructions in the segment, in samples. previous Schedule next visualisation \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.builder.load_config",
    "url": "/iqm-pulse/api/iqm.pulse.builder.load_config.html",
    "description": "Load quantum operation definitions and calibration data from a YAML config file. path ( str ) \u2013 path to a YAML config file quantum operation definitions, calibration data tree tuple [ dict [ str , Qua...",
    "content": "Load quantum operation definitions and calibration data from a YAML config file. path ( str ) \u2013 path to a YAML config file quantum operation definitions, calibration data tree tuple [ dict [ str , QuantumOp ], dict [ str , dict [ str , dict [ tuple [ str , \u2026] | None , dict [ str , Any ]]]]] previous iqm.pulse.builder.build_quantum_ops next iqm.pulse.builder.validate_quantum_circuit \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.validation.validate_awg_and_schedule_compatibility",
    "url": "/iqm-pulse/api/iqm.pulse.validation.validate_awg_and_schedule_compatibility.html",
    "description": "Validates that the given playlist is compatible with the provided AWG data.\nThe following requirements are validated as they are the same for all controllers. Playlist sampling rate vs. Actual control...",
    "content": "Validates that the given playlist is compatible with the provided AWG data.\nThe following requirements are validated as they are the same for all controllers. Playlist sampling rate vs. Actual controller sampling rate Instruction granularity with respect to the controllers granularity requirements Checks that no other than supported instructions are used. Checks that instruction length matches waveform length in IQ and RealPulse Checks that all instructions are at least the length of minimum number of samples Checks that Conditional instruction has the same duration in every child instruction channel_description ( ChannelDescription ) \u2013 Contains instructions used as well as the channel specific configuration from playlist device_constraints ( AWGScheduleValidationData ) \u2013 Contains the actual hardware limitations previous validation next iqm.pulse.validation.validate_channel \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "rz",
    "url": "/iqm-pulse/api/iqm.pulse.gates.rz.html",
    "description": "Single-qubit RZ gate. The z rotation gate is defined as where the rotation angle \\(\\phi\\) is in radians. Full path: iqm.pulse.gates.rz Functions get_unitary_rz (angle) Unitary for an RZ gate. Classes ...",
    "content": "Single-qubit RZ gate. The z rotation gate is defined as where the rotation angle \\(\\phi\\) is in radians. Full path: iqm.pulse.gates.rz Functions get_unitary_rz (angle) Unitary for an RZ gate. Classes RZ_ACStarkShift Implementation of the RZ gate using an AC Stark pulse. RZ_ACStarkShift_CosineRiseFall AC stark pulse implemented as a modulated cosine rise fall pulse. RZ_ACStarkShift_smoothConstant Constant AC stark pulse with cosine rise and fall padding. RZ_PRX_Composite RZ gate implemented as a sequence of PRX gates. RZ_Virtual Implementation of the RZ gate using the virtual z rotation technique. Inheritance previous Reset_Wait next iqm.pulse.gates.rz.get_unitary_rz \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "HdDrag",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.hd_drag.HdDrag.html",
    "description": "Bases: SuppressedPulse Base class for higher-derivative DRAG based on Eqs. (B1) and (B2) of [ 1 ] . Base class for IQ components of the higher derivative (HD) drag pulse. Depending on the value of com...",
    "content": "Bases: SuppressedPulse Base class for higher-derivative DRAG based on Eqs. (B1) and (B2) of [ 1 ] . Base class for IQ components of the higher derivative (HD) drag pulse. Depending on the value of compute_coefs_from_frequencies , we compute the coefficients from the suppressed frequencies during the\npost-initialization or use pre-computed coefficients of the derivative terms (neglecting the suppressed\nfrequencies). See SuppressedPulse . Module: iqm.pulse.playlist.hd_drag Attributes center_offset  full_width  coefficients  suppressed_frequencies  compute_coefs_from_frequencies  n_samples Requested number of samples for the waveform. Methods non_timelike_attributes Mapping from waveform attributes to the units of their calibration data, unless that unit is second. n_samples ( int ) \u2013 full_width ( float ) \u2013 coefficients ( ndarray ) \u2013 suppressed_frequencies ( ndarray ) \u2013 compute_coefs_from_frequencies ( bool ) \u2013 center_offset ( float ) \u2013 Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Used to construct the parameters for the calibration data required by the waveform.\nBy default all the waveform attributes are \u201ctimelike\u201d (the unit for their calibration data is s).\nHowever, some waveform attributes can be dimensionless, e.g. the relative amplitudes in a sum of\nconsisting of multiple terms, or frequency-like (calibration data has the unit \u2018Hz\u2019).\nIf a Waveform subclass has non-timelike attributes, it needs to redefine this method. When the Waveform is constructed, all timelike calibration data is converted to units of the\nsampling window duration, and all frequency-like calibration data into units of inverse sampling\nwindow duration. dict [ str , str ] previous iqm.pulse.playlist.hd_drag.solve_hd_drag_coefficients_from_suppressed_frequencies next HdDragI \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.circuit_operations.reorder",
    "url": "/iqm-pulse/api/iqm.pulse.circuit_operations.reorder.html",
    "description": "Permutes the order of the qubits in an n-qubit operator matrix. A ( ndarray ) \u2013 Matrix of an operator acting on the state space of n qubits, to be reordered. perm ( list [ int ] ) \u2013 Permutation vector...",
    "content": "Permutes the order of the qubits in an n-qubit operator matrix. A ( ndarray ) \u2013 Matrix of an operator acting on the state space of n qubits, to be reordered. perm ( list [ int ] ) \u2013 Permutation vector for the n qubits. perm[k] is the new index for the k:th qubit in the old ordering.\nFor example, reorder(kron(A, B, C)), [2, 0, 1]) == kron(B, C, A) . Reordered A . ndarray previous iqm.pulse.circuit_operations.get_unitary_from_op next iqm.pulse.circuit_operations.reshape_unitary \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_GateImplementation",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_GateImplementation.html",
    "description": "Bases: GateImplementation ABC for different implementations of the PRX gate. Module: iqm.pulse.gates.prx Attributes Methods clifford One-qubit XY Clifford gates. get_locus_mapping_name Get the name of...",
    "content": "Bases: GateImplementation ABC for different implementations of the PRX gate. Module: iqm.pulse.gates.prx Attributes Methods clifford One-qubit XY Clifford gates. get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. rx X rotation gate. ry Y rotation gate. parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Phased x rotation gate. angle ( float ) \u2013 rotation angle (in radians) phase ( float ) \u2013 phase angle (in radians) boxed instruction schedule implementing the phased x rotation gate TimeBox X rotation gate. angle ( float ) \u2013 rotation angle (in radians) boxed instruction schedule implementing the x rotation gate TimeBox Y rotation gate. angle ( float ) \u2013 rotation angle (in radians) boxed instruction schedule implementing the y rotation gate TimeBox One-qubit XY Clifford gates. xy_gate ( XYGate ) \u2013 Clifford gate boxed instruction schedule implementing the requested Clifford gate TimeBox Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \"<operation_name>.<implementation_name>\" . Inheriting classes may\noverride this for different behaviour. operation_name ( str ) \u2013 name of the quantum operation. implementation_name ( str ) \u2013 name of the implementation name of the locus mapping str previous PRX_FastDragSX next PRX_HdDrag \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "RealChannelConfig",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.channel.RealChannelConfig.html",
    "description": "Bases: ChannelConfiguration Requested configuration of a real channel. Module: iqm.pulse.playlist.channel Attributes sample_rate sample rate of the instrument responsible for the channel (in Hz) Metho...",
    "content": "Bases: ChannelConfiguration Requested configuration of a real channel. Module: iqm.pulse.playlist.channel Attributes sample_rate sample rate of the instrument responsible for the channel (in Hz) Methods sample_rate ( float ) \u2013 sample rate of the instrument responsible for the channel (in Hz) previous ProbeChannelProperties next fast_drag \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "reset",
    "url": "/iqm-pulse/api/iqm.pulse.gates.reset.html",
    "description": "Resetting qubits to the zero state. The reset operation is a non-unitary quantum channel that sets the state of a qubit to \\(|0\\rangle\\) . Full path: iqm.pulse.gates.reset Module Attributes RESET_MEAS...",
    "content": "Resetting qubits to the zero state. The reset operation is a non-unitary quantum channel that sets the state of a qubit to \\(|0\\rangle\\) . Full path: iqm.pulse.gates.reset Module Attributes RESET_MEASUREMENT_KEY Constant measurement key for the measure operation required in the fast-feedback reset gate (the double underscore emphasizes the fact that this label should not be manually used in fast feedback). RESET_FEEDBACK_KEY The feedback key used in fast-feedback reset gate (the double underscore emphasizes the fact that this label should not be manually used in fast feedback). Classes Reset_Conditional Conditional reset operation. Reset_Wait Reset operation by relaxation (idling for a time comparable to the relaxation time of the component). Inheritance previous PRX_SinglePulse_GateImplementation next iqm.pulse.gates.reset.RESET_MEASUREMENT_KEY \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "CircuitOperationList",
    "url": "/iqm-pulse/api/iqm.pulse.circuit_operations.CircuitOperationList.html",
    "description": "Bases: list List of CircuitOperation objects representing a quantum circuit. The class is used to work with CircuitOperations directly. It is mostly meant as\nconvenience to enable easy creation of cir...",
    "content": "Bases: list List of CircuitOperation objects representing a quantum circuit. The class is used to work with CircuitOperations directly. It is mostly meant as\nconvenience to enable easy creation of circuits, calculations of their properties, and mapping them onto physical\nqubits. In addition to the circuit contents, this class has two important attributes: qubits and table . qubits defines the list of qubits which are allowed to be in the loci of all the\nCircuitOperations present in the list. Think about it as Qiskit\u2019s QuantumRegister. table is a QuantumOpTable , which contains all the QuantumOp s which are allowed in the circuit. In most cases, the table is\nsimply taken to contain all the default operations defined in iqm.pulse .\nWhen you use this class with a ScheduleBuilder , it is good practice to set table = builder.op_table . The QuantumOpTable is mutable, so any additional registered\ngates can automatically be usable in any CircuitOperationList associated with that\nScheduleBuilder instance. The fundamental use of the class would be to first define a new instance: The num_qubits parameter populates the qubits attribute with qubits QB1-QBn,\nin this case ['QB1', 'QB2'] . Alternatively, you can provide qubits directly: To add your own QuantumOpTable, initialize like this: Remembering that the table is mutable. If you already have a list of CircuitOperations, you can initialize with it: Calling the find_qubits() method populates the qubits attribute with the qubits found in loci of\nthe operations in the original circuit. If the list is empty, it will set qubits to an empty list,\nwhich most of the time is not what you want to do. The class has the __add__ , __mul__ and __getitem__ methods redefined, which means circuit * 3 , circuit1 + circuit2 and circuit[0:4] will produce a CircuitOperationList\nwith the same qubits and table attributes as the original. To add a prx operation to the list, call: The class also has shortcut methods defined, so the above can be shortened to which is exactly the same syntax as in Qiskit, with the addition of the implementation name\nwhich usually does not need to be used. The names of the shortcut methods are taken from the\nattached table at init. All the operations with non-zero arity\nwill be added as shortcuts. If all the operations in the circuit are unitary, you can calculate the unitary propagator of\nthe entire circuit by calling: The dimension of the unitary will always be defined by the qubits attribute. In particular, if your circuit\ncontains 3 qubits, 'QB1', 'QB2', 'QB3' , but you only add gates to the first two, the resulting unitary will\nstill be an 8x8 matrix, corresponding to the three qubits 'QB1', 'QB2', 'QB3' , in the big endian convention.\nWith no operations affecting 'QB3' , the action of the unitary on this qubit is identity. To map the circuit onto physical qubits, all you need to do is call: This will create a copy of the circuit, with all the placeholder qubits replaced by the physical qubits, with the\norder defined by the qubits attribute. For example, if qubits = ['QB1', 'Alice', 'ZZZ'] , and physical_qubits = ['QB2', 'QB5', 'QB10'] , all occurrences of 'QB1' will be mapped to 'QB2' , 'Alice' to 'QB5' and 'ZZZ' to 'QB10' . The original circuit is not modified, so you can create many copies with\ndifferent physical qubits, which is helpful when running parallel experiments on a large chip. contents ( Iterable [ CircuitOperation ] ) \u2013 Circuit operations to initialize the circuit with. Can be left out. qubits ( list [ str ] ) \u2013 Qubits allowed to be used in operation loci in the circuit. num_qubits ( int ) \u2013 Number of qubits in the circuit, will initialize qubits with ['QB1', 'QB2', ...] .\nIgnored if qubits is given. table ( QuantumOpTable | None ) \u2013 Allowed quantum operations. Module: iqm.pulse.circuit_operations Attributes qubits  Methods add_op Adds a new CircuitOperation to the circuit. add_qubits Adds generic placeholder qubits from 1 to n. barrier Add barrier to the circuit compose A safer way to add circuits together, but will probably take time. count_ops Count each type of operation in the circuit. find_qubits Set attribute qubits to qubits in the loci of operations in the list. get_unitary Calculate the overall unitary implemented by a sequence of CircuitOperations. map_loci Creates a new list of CircuitOperation s with locus mapped onto physical qubits. Set attribute qubits to qubits in the loci of operations in the list. None Adds generic placeholder qubits from 1 to n. n ( int ) \u2013 None Calculate the overall unitary implemented by a sequence of CircuitOperations. self \u2013 list of CircuitOperations in order qubit_names ( list [ str ] | None ) \u2013 Optionally, the ordering of the qubits. Array describing the action of the circuit in big endian convention. ndarray Adds a new CircuitOperation to the circuit. Appends a new CircuitOperation at the end of the list. The CircuitOperation is created using a QuantumOp name from the\nQuantumOpTable attached to the CircuitOperationList. The locus of that CircuitOperation is built from the qubits stored in qubits , by selecting\nthe qubits at indices given by locus_indices . For example, if qubits is ['QB1', 'QB2', 'QB4'] , and the locus_indices is [2, 1] , the locus of the new CircuitOperation will be ('QB4', 'QB2') . All arguments for the values of the\nparams of the requested QuantumOp need to be provided. name ( str ) \u2013 Name of the QuantumOp which will generate a new CircuitOperation . locus_indices ( Sequence [ int ] ) \u2013 Indices of the qubits in the attribute .qubits which will become the locus of the operation. args \u2013 Any arguments the CircuitOperation needs, must correspond to the params of the QuantumOp . impl_name ( str | None ) \u2013 Name of the implementation to use when converting the CircuitOperation into\na Timebox later. None Add barrier to the circuit None A safer way to add circuits together, but will probably take time. All the CircuitOperation s from the 'other' list are appended to the end of\nthis list. The wire k of the second circuit is connected to wire locus_indices[k] of the first. This\nis achieved by mapping the locus of each operation in the second circuit onto the qubits of the first. For example, if the qubits of the first list are ['QB1', 'QB2'] , the second list has ['QB3', 'QB4'] , and the locus_indices argument is [1,0] , all the operations in the second list will have\ntheir 'QB3' mapped to 'QB2' and 'QB4' mapped to 'QB1' . other \u2013 Second CircuitOperationList. Must have less or equal qubits than this one. locus_indices ( list [ int ] | None ) \u2013 Indices of the qubits in this CircuitOperationList onto which the qubits in the second\ncircuit ar mapped. Self, with new operations added. Self Count each type of operation in the circuit. Counter mapping operation names to numbers of times they occur in the circuit. Counter Creates a new list of CircuitOperation s with locus mapped onto physical qubits. Creates a fresh list of fresh CircuitOperation s with fresh arguments. If locus is provided, it needs to have the same length as the total number of qubits across the circuit,\nand the qubits will then be mapped onto the new locus. If it is not provided, this is identical to a deepcopy\nof the original list. locus ( list [ str ] | None ) \u2013 List of new qubits to replace the qubits in the loci of the operations in the circuit. make_circuit ( bool ) \u2013 If True, creates a CircuitOperationList . If False, it is just a list. New CircuitOperationList with loci mapped onto new locus. CircuitOperationList | list [ CircuitOperation ] Add the convenience methods for adding new operations, based on the default QuantumOpTable . name ( str ) \u2013 None previous iqm.pulse.circuit_operations.reshape_unitary next gate_implementation \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.flux_multiplexer.TOLERANCE",
    "url": "/iqm-pulse/api/iqm.pulse.gates.flux_multiplexer.TOLERANCE.html",
    "description": "Tolerance for the maximum absolute value in a waveform for considering it to be uniformly zero. previous flux_multiplexer next FluxMultiplexer_SampleLinear \u00a9 Copyright 2019-2025, IQM Finland Oy, Relea...",
    "content": "Tolerance for the maximum absolute value in a waveform for considering it to be uniformly zero. previous flux_multiplexer next FluxMultiplexer_SampleLinear \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Block",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.Block.html",
    "description": "Bases: Instruction Behave strictly as if outputting zero-valued samples for the duration of the instruction. Used to block a control channel during compilation.\nA more strict version of Wait , cannot ...",
    "content": "Bases: Instruction Behave strictly as if outputting zero-valued samples for the duration of the instruction. Used to block a control channel during compilation.\nA more strict version of Wait , cannot be replaced with DD sequences during compilation.\nConverted to a Wait instruction at the end of compilation process. In \u201cTetris\u201d scheduling, several Block instructions can overlap in time, whereas Waits cannot. Module: iqm.pulse.playlist.instructions Attributes duration Time duration of the instruction. Methods duration ( int ) \u2013 previous AcquisitionMethod next ComplexIntegration \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_FastDragSX",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_FastDragSX.html",
    "description": "Bases: PRX_CustomWaveformsSX PRX gate, FAST DRAG IQ pulse with VZ-based SX-implementation. See PRX_CustomWaveformsSX . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channe...",
    "content": "Bases: PRX_CustomWaveformsSX PRX gate, FAST DRAG IQ pulse with VZ-based SX-implementation. See PRX_CustomWaveformsSX . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). parameters Required calibration data, may be nested Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . Required calibration data, may be nested alias of FastDragI alias of FastDragQ previous PRX_FastDrag next PRX_GateImplementation \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "MultiplexedProbeTimeBox",
    "url": "/iqm-pulse/api/iqm.pulse.timebox.MultiplexedProbeTimeBox.html",
    "description": "Bases: TimeBox A TimeBox that contains any number of multiplexed readout pulses for probe channels. A MultiplexedProbeTimeBox \u2019s atom contains exactly one ReadoutTrigger for each probe channel. Module...",
    "content": "Bases: TimeBox A TimeBox that contains any number of multiplexed readout pulses for probe channels. A MultiplexedProbeTimeBox \u2019s atom contains exactly one ReadoutTrigger for each probe channel. Module: iqm.pulse.timebox Attributes label Description the contents of the box for users' convenience. locus_components Names of the QPU components on which this timebox operates. atom Resolved contents of the TimeBox, or None if not resolved. children Further Timeboxes inside this TimeBox. neighborhood_components Dict of neighborhood range integers mapped to sets of components neighboring the locus of this TimeBox . Methods from_readout_trigger Build an atomic MultiplexedProbeTimeBox` from a single ``ReadoutTrigger instruction. label ( str ) \u2013 locus_components ( set [ str ] ) \u2013 atom ( Schedule | None ) \u2013 children ( tuple [ TimeBox , ... ] ) \u2013 scheduling ( SchedulingStrategy ) \u2013 scheduling_algorithm ( SchedulingAlgorithm ) \u2013 neighborhood_components ( dict [ int , set [ str ] ] ) \u2013 Build an atomic MultiplexedProbeTimeBox` from a single ``ReadoutTrigger instruction. readout_trigger ( ReadoutTrigger ) \u2013 Readout trigger instruction. probe_channel ( str ) \u2013 Name of the probe channel to play readout_trigger in. locus_components ( Iterable [ str ] ) \u2013 Locus components. label ( str ) \u2013 Label of the new timebox. block_channels ( Iterable [ str ] ) \u2013 Names of channels to block. block_duration ( int ) \u2013 Duration of the required blocking (in samples). atomic timebox containing readout_trigger in the channel probe_channel . MultiplexedProbeTimeBox previous timebox next SchedulingAlgorithm \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.utils.phase_transformation",
    "url": "/iqm-pulse/api/iqm.pulse.utils.phase_transformation.html",
    "description": "Implement an arbitrary (RZ, PRX, RZ) gate sequence by modifying the parameters of the\nIQ pulse implementing the PRX. By commutation rules we have Hence an arbitrary (RZ, PRX, RZ) gate sequence is equi...",
    "content": "Implement an arbitrary (RZ, PRX, RZ) gate sequence by modifying the parameters of the\nIQ pulse implementing the PRX. By commutation rules we have Hence an arbitrary (RZ, PRX, RZ) gate sequence is equivalent to (RZ, PRX) with adjusted angles. Use case: with resonant driving, the PRX gate can be implemented using an IQPulse instance,\nand the preceding RZ can be handled by decrementing the local oscillator phase beforehand (something\nthe IQPulse instruction can also do), which is equivalent to rotating the local computational frame\naround the z axis in the opposite direction of the required quantum state rotation. psi_1 ( float ) \u2013 RZ angle before the PRX (in rad) psi_2 ( float ) \u2013 RZ angle after the PRX (in rad) change to the PRX phase angle (in rad),\nphase increment for the IQ pulse that implements the remaining RZ (in rad) tuple [ float , float ] previous iqm.pulse.utils.normalize_angle next validation \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "SchedulingAlgorithm",
    "url": "/iqm-pulse/api/iqm.pulse.timebox.SchedulingAlgorithm.html",
    "description": "Bases: Enum Algorithms for resolving composite TimeBoxes into atomic ones. Module: iqm.pulse.timebox Attributes HARD_BOUNDARY Respects the TimeBox boundary such that the longest channel with a box def...",
    "content": "Bases: Enum Algorithms for resolving composite TimeBoxes into atomic ones. Module: iqm.pulse.timebox Attributes HARD_BOUNDARY Respects the TimeBox boundary such that the longest channel with a box defines its boundary and all other channels are padded to this length (using the specified SchedulingStrategy ). TETRIS Will pack the schedule as tightly as possible while respecting the defined scheduling neighborhood. Methods Respects the TimeBox boundary such that the longest channel with a box defines\nits boundary and all other channels are padded to this length (using the specified SchedulingStrategy ). Will pack the schedule as tightly as possible while respecting the defined scheduling neighborhood. previous MultiplexedProbeTimeBox next SchedulingStrategy \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "quantum_ops",
    "url": "/iqm-pulse/api/iqm.pulse.quantum_ops.html",
    "description": "Quantum operations. Full path: iqm.pulse.quantum_ops Module Attributes QuantumOpTable Type for representing tables of known quantum operations, maps names of the ops to their definitions. Functions va...",
    "content": "Quantum operations. Full path: iqm.pulse.quantum_ops Module Attributes QuantumOpTable Type for representing tables of known quantum operations, maps names of the ops to their definitions. Functions validate_locus_calibration (cal_data,\u00a0impl,\u00a0...) Validates calibration for a particular gate implementation at particular locus. validate_op_calibration (calibration,\u00a0ops) Validates quantum operation calibration data against the known quantum operations. Classes QuantumOp Describes a native quantum operation type. Inheritance previous Slepian next iqm.pulse.quantum_ops.QuantumOpTable \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "CZ_GaussianSmoothedSquare",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.CZ_GaussianSmoothedSquare.html",
    "description": "Bases: FluxPulseGate CZ gate using a GaussianSmoothedSquare flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flux pulse W...",
    "content": "Bases: FluxPulseGate CZ gate using a GaussianSmoothedSquare flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flux pulse Waveform to be played in the qubit flux AWG. symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of GaussianSmoothedSquare Required calibration data, may be nested Flux pulse Waveform to be played in the qubit flux AWG. True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous CZ_CRF_ACStarkCRF next CZ_Slepian \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "RZ_PRX_Composite",
    "url": "/iqm-pulse/api/iqm.pulse.gates.rz.RZ_PRX_Composite.html",
    "description": "Bases: CompositeGate RZ gate implemented as a sequence of PRX gates. Module: iqm.pulse.gates.rz Attributes registered_gates Gates that can be calibrated separately from their common calibration existi...",
    "content": "Bases: CompositeGate RZ gate implemented as a sequence of PRX gates. Module: iqm.pulse.gates.rz Attributes registered_gates Gates that can be calibrated separately from their common calibration existing in self.builder . Methods Gates that can be calibrated separately from their common calibration existing in self.builder . The gate\nnames should correspond to the keys in self.builder.op_table . Other gates besides the ones given here can\nalso be constructed via self.builder , but these will always use the common calibration. previous RZ_ACStarkShift_smoothConstant next RZ_Virtual \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Measure_Constant",
    "url": "/iqm-pulse/api/iqm.pulse.gates.measure.Measure_Constant.html",
    "description": "Bases: Measure_CustomWaveforms Implementation of a single-qubit projective, dispersive measurement in the Z basis. Uses a constant probe pulse. Module: iqm.pulse.gates.measure Attributes dependent_wav...",
    "content": "Bases: Measure_CustomWaveforms Implementation of a single-qubit projective, dispersive measurement in the Z basis. Uses a constant probe pulse. Module: iqm.pulse.gates.measure Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). parameters Required calibration data, may be nested Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . Required calibration data, may be nested alias of Constant alias of Constant previous measure next Measure_Constant_Qnd \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.OICalibrationData",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.OICalibrationData.html",
    "description": "For a particular implementation of a particular quantum operation, maps operation loci to their calibration data. alias of dict [ tuple [ str , \u2026] | None , dict [ str , Any ]] previous iqm.pulse.gate_...",
    "content": "For a particular implementation of a particular quantum operation, maps operation loci to their calibration data. alias of dict [ tuple [ str , \u2026] | None , dict [ str , Any ]] previous iqm.pulse.gate_implementation.OILCalibrationData next iqm.pulse.gate_implementation.OCalibrationData \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "CZ_CRF_ACStarkCRF",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.CZ_CRF_ACStarkCRF.html",
    "description": "Bases: CouplerFluxPulseQubitACStarkPulseGate Controlled-Z two-qubit gate. CZ gate implemented using a cosine rise fall flux pulse for the coupler and a modulated\ncosine rise fall (CRF) AC Stark pulse ...",
    "content": "Bases: CouplerFluxPulseQubitACStarkPulseGate Controlled-Z two-qubit gate. CZ gate implemented using a cosine rise fall flux pulse for the coupler and a modulated\ncosine rise fall (CRF) AC Stark pulse on one qubit. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of CosineRiseFall Required calibration data, may be nested alias of ModulatedCosineRiseFall True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous CZ_CRF next CZ_GaussianSmoothedSquare \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Constant_PRX_with_smooth_rise_fall",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.Constant_PRX_with_smooth_rise_fall.html",
    "description": "Bases: ABC_Constant_smooth Constant PRX pulse with cosine rise and fall padding.\nImplemented as a 3-instruction Schedule. Constructs an instance of the AC Stark pulse for the given locus. Module: iqm....",
    "content": "Bases: ABC_Constant_smooth Constant PRX pulse with cosine rise and fall padding.\nImplemented as a 3-instruction Schedule. Constructs an instance of the AC Stark pulse for the given locus. Module: iqm.pulse.gates.prx Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of CosineFall alias of Constant Required calibration data, may be nested alias of CosineRise True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous ABC_Constant_smooth next PRX_CustomWaveforms \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.utils.map_waveform_param_types",
    "url": "/iqm-pulse/api/iqm.pulse.utils.map_waveform_param_types.html",
    "description": "Map a python typehint into EXA Parameter\u2019s (DataType, CollectionType) tuple. type \u2013 python typehint. type_hint ( type ) \u2013 A (DataType, CollectionType) tuple ValueError \u2013 for a non-supported type. tupl...",
    "content": "Map a python typehint into EXA Parameter\u2019s (DataType, CollectionType) tuple. type \u2013 python typehint. type_hint ( type ) \u2013 A (DataType, CollectionType) tuple ValueError \u2013 for a non-supported type. tuple [ DataType , CollectionType ] previous utils next iqm.pulse.utils.normalize_angle \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "base",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.visualisation.base.html",
    "description": "Function for visualising playlists. Full path: iqm.pulse.playlist.visualisation.base Functions inspect_playlist (playlist[,\u00a0segments]) Creates an HTML string from the given playlist and segments. prev...",
    "content": "Function for visualising playlists. Full path: iqm.pulse.playlist.visualisation.base Functions inspect_playlist (playlist[,\u00a0segments]) Creates an HTML string from the given playlist and segments. previous visualisation next iqm.pulse.playlist.visualisation.base.inspect_playlist \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "ChannelConfiguration",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.channel.ChannelConfiguration.html",
    "description": "Bases: object Base class for configuring channels. Module: iqm.pulse.playlist.channel Methods previous iqm.pulse.playlist.channel.round_duration_to_granularity_samples next ChannelDescription \u00a9 Copyri...",
    "content": "Bases: object Base class for configuring channels. Module: iqm.pulse.playlist.channel Methods previous iqm.pulse.playlist.channel.round_duration_to_granularity_samples next ChannelDescription \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "FluxMultiplexer_SampleLinear",
    "url": "/iqm-pulse/api/iqm.pulse.gates.flux_multiplexer.FluxMultiplexer_SampleLinear.html",
    "description": "Bases: GateImplementation Linear flux pulse multiplexed (user for correcting flux crosstalk). The required calibration data is the flux cross-talk correction matrix, where the element \\(C_ij\\) represe...",
    "content": "Bases: GateImplementation Linear flux pulse multiplexed (user for correcting flux crosstalk). The required calibration data is the flux cross-talk correction matrix, where the element \\(C_ij\\) represents\nthe correction needed for flux component i arising from the crosstalk caused by flux component j , so that\nafter the corrections, the flux pulse played at i is \\(f(t) = A_i w_i(t) + \\sum_j C_ij A_j w_j(t)\\) ,\nwhere \\(A_j`\\) is the flux pulse amplitude for j and \\(w_j(t)\\) the (normalized) waveform. The flux crosstalk correction matrix is given in a sparse form via two calibration parameters (we do not support\ndict- or xarray-valued Parameters yet\u2026). Parameter matrix_index lists the relevant (non-zero) elements of the\nmatrix as a flat np.array of strings of the form <flux component i>__<flux component j> . Parameter matrix_elements lists the corresponding matrix values \\(C_ij\\) (the lengths of these arrays must match). TODO: this is for now an experimental R&D implementation, and everything here is subject to change still Module: iqm.pulse.gates.flux_multiplexer Attributes parameters Required calibration data, may be nested Methods get_custom_locus_mapping Locus is \"global\" (the whole QPU) represented by an empty tuple for now. parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Required calibration data, may be nested Locus is \u201cglobal\u201d (the whole QPU) represented by an empty tuple for now. chip_topology ( ChipTopology ) \u2013 component_to_channels ( dict [ str , Iterable [ str ] ] ) \u2013 dict [ tuple [ str , \u2026] | frozenset [ str ], tuple [ str , \u2026]] | None previous iqm.pulse.gates.flux_multiplexer.TOLERANCE next measure \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.scheduler.BLOCKING",
    "url": "/iqm-pulse/api/iqm.pulse.scheduler.BLOCKING.html",
    "description": "Nonsolid Instructions that nevertheless block. previous iqm.pulse.scheduler.NONSOLID next iqm.pulse.scheduler.extend_hard_boundary \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated o...",
    "content": "Nonsolid Instructions that nevertheless block. previous iqm.pulse.scheduler.NONSOLID next iqm.pulse.scheduler.extend_hard_boundary \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.builder.build_quantum_ops",
    "url": "/iqm-pulse/api/iqm.pulse.builder.build_quantum_ops.html",
    "description": "Builds the table of known quantum operations. Hardcoded default native ops table is extended by the ones in ops .\nIn case of name collisions, the content of ops takes priority over the defaults. ops (...",
    "content": "Builds the table of known quantum operations. Hardcoded default native ops table is extended by the ones in ops .\nIn case of name collisions, the content of ops takes priority over the defaults. ops ( dict [ str , Any ] ) \u2013 Contents of the gate_definitions section defining file. ( the quantum operations in the configuration YAML ) \u2013 function. ( Modified by the ) \u2013 Mapping from quantum operation name to its definition dict [ str , QuantumOp ] previous builder next iqm.pulse.builder.load_config \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "playlist",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.html",
    "description": "Control pulses and instruction schedules for quantum computers. Full path: iqm.pulse.playlist Subpackages and modules channel Control channel properties. fast_drag Waveform definitions for Fourier Ans...",
    "content": "Control pulses and instruction schedules for quantum computers. Full path: iqm.pulse.playlist Subpackages and modules channel Control channel properties. fast_drag Waveform definitions for Fourier Ansatz Spectrum Tuning (FAST) DRAG pulse based on [ 1 ] . hd_drag Waveform definitions for a higher-derivative (HD) DRAG pulse based on Appendix B of [ 1 ] . instructions Instructions for control instruments. playlist Sequences of instruction schedules to execute. schedule Instruction schedules for controlling the instruments. visualisation  waveforms Waveform definitions. previous UGate next channel \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "IQChannelConfig",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.channel.IQChannelConfig.html",
    "description": "Bases: RealChannelConfig Requested configuration of an IQ channel. Module: iqm.pulse.playlist.channel Attributes frequency upconversion frequency for the IQ pulses (in Hz) sample_rate sample rate of t...",
    "content": "Bases: RealChannelConfig Requested configuration of an IQ channel. Module: iqm.pulse.playlist.channel Attributes frequency upconversion frequency for the IQ pulses (in Hz) sample_rate sample rate of the instrument responsible for the channel (in Hz) Methods sample_rate ( float ) \u2013 frequency ( float ) \u2013 upconversion frequency for the IQ pulses (in Hz) previous ChannelProperties next ProbeChannelProperties \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Chirp",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.waveforms.Chirp.html",
    "description": "Bases: Waveform Linear chirp, defined as where \\(\\omega[\\alpha, N]\\) is a cosine-tapered window. For \\(\\alpha = 1\\) it becomes rectangular,\nand for \\(\\alpha = 0\\) it becomes a Hann (or raised cosine) ...",
    "content": "Bases: Waveform Linear chirp, defined as where \\(\\omega[\\alpha, N]\\) is a cosine-tapered window. For \\(\\alpha = 1\\) it becomes rectangular,\nand for \\(\\alpha = 0\\) it becomes a Hann (or raised cosine) window. The chirp pulse is valued inside the Nyquist zone, such that \\(f_{0}\\) and \\(f_{1}\\) are constrained\nin the range \\([-0.5, 0.5]\\) . freq_start ( float ) \u2013 Initial frequency of the chirp waveform in the Nyquist zone. freq_stop ( float ) \u2013 Final frequency of the chirp waveform in the Nyquist zone. alpha ( float ) \u2013 Alpha parameter of the cosine-tapered window. Defaults to 0.05. phase ( float ) \u2013 Phase of the waveform. Defaults to 0 n_samples ( int ) \u2013 Module: iqm.pulse.playlist.waveforms Attributes alpha  phase  freq_start  freq_stop  n_samples Requested number of samples for the waveform. Methods non_timelike_attributes Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Actually samples the waveform. sample_coords \u2013 coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Used to construct the parameters for the calibration data required by the waveform.\nBy default all the waveform attributes are \u201ctimelike\u201d (the unit for their calibration data is s).\nHowever, some waveform attributes can be dimensionless, e.g. the relative amplitudes in a sum of\nconsisting of multiple terms, or frequency-like (calibration data has the unit \u2018Hz\u2019).\nIf a Waveform subclass has non-timelike attributes, it needs to redefine this method. When the Waveform is constructed, all timelike calibration data is converted to units of the\nsampling window duration, and all frequency-like calibration data into units of inverse sampling\nwindow duration. dict [ str , str ] previous waveforms next ChirpImag \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "AWGScheduleValidationData",
    "url": "/iqm-pulse/api/iqm.pulse.validation.AWGScheduleValidationData.html",
    "description": "Bases: object Controller specific validation data Module: iqm.pulse.validation Attributes sampling_rate  granularity  min_number_of_samples  compatible_instructions  Methods sampling_rate ( float ) \u2013 ...",
    "content": "Bases: object Controller specific validation data Module: iqm.pulse.validation Attributes sampling_rate  granularity  min_number_of_samples  compatible_instructions  Methods sampling_rate ( float ) \u2013 granularity ( int ) \u2013 min_number_of_samples ( int ) \u2013 compatible_instructions ( tuple [ type [ Operation ] , ... ] ) \u2013 previous iqm.pulse.validation.validate_playlist_compatibility next iqm.pulse.validation.AWGScheduleValidationError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "visualisation",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.visualisation.html",
    "description": "Full path: iqm.pulse.playlist.visualisation Subpackages and modules base Function for visualising playlists. previous Segment next base \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last upda...",
    "content": "Full path: iqm.pulse.playlist.visualisation Subpackages and modules base Function for visualising playlists. previous Segment next base \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "FluxPulse",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.FluxPulse.html",
    "description": "Bases: RealPulse RealPulse representing a flux pulse. Can store RZ angles for correcting local phase shifts from the computational frame due to flux crosstalk. Module: iqm.pulse.playlist.instructions ...",
    "content": "Bases: RealPulse RealPulse representing a flux pulse. Can store RZ angles for correcting local phase shifts from the computational frame due to flux crosstalk. Module: iqm.pulse.playlist.instructions Attributes rzs Collection of (drive) channel names and RZ angles. wave Shape of the pulse. scale Scaling factor for the waveform. duration Time duration of the instruction. Methods duration ( int ) \u2013 wave ( Waveform ) \u2013 scale ( float ) \u2013 rzs ( tuple [ tuple [ str , float ] , ... ] ) \u2013 Collection of (drive) channel names and RZ angles. previous ConditionalInstruction next IQPulse \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.expose_implementation",
    "url": "/iqm-pulse/api/iqm.pulse.gates.expose_implementation.html",
    "description": "Add the given gate implementation to the list of known implementations. implementation ( type [ GateImplementation ] ) \u2013 GateImplementation to add so that it can be found with get_implementation_class...",
    "content": "Add the given gate implementation to the list of known implementations. implementation ( type [ GateImplementation ] ) \u2013 GateImplementation to add so that it can be found with get_implementation_class() . overwrite ( bool ) \u2013 If True, does not raise an error if implementation already exists. None previous gates next iqm.pulse.gates.get_implementation_class \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "MultiplexedIQPulse",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.MultiplexedIQPulse.html",
    "description": "Bases: Instruction Instruction to simultaneously play multiple IQ pulses. Each component pulse can have an arbitrary delay from the beginning of this instruction.\nOutside the interval of the Multiplex...",
    "content": "Bases: Instruction Instruction to simultaneously play multiple IQ pulses. Each component pulse can have an arbitrary delay from the beginning of this instruction.\nOutside the interval of the MultiplexedIQPulse, the component pulses are truncated.\nWhere overlapping, samples of component pulse entries are summed.\nWhere the interval of a MultiplexedIQPulse does not overlap with any of its component pulses,\nits samples are zeroes. Module: iqm.pulse.playlist.instructions Attributes entries ( pulse , offset ) pairs. duration Time duration of the instruction. Methods duration ( int ) \u2013 entries ( tuple [ tuple [ IQPulse , int ] , ... ] ) \u2013 ( pulse , offset ) pairs. offset is the number of samples pulse is delayed from the beginning of the instruction.\nIt has no granularity constraints. Negative values are allowed, but beginning will be truncated. previous Instruction next ReadoutTrigger \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_FastDrag",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_FastDrag.html",
    "description": "Bases: PRX_CustomWaveforms PRX gate, FAST DRAG IQ pulse based on amplitude scaling. See PRX_CustomWaveforms . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel wavefor...",
    "content": "Bases: PRX_CustomWaveforms PRX gate, FAST DRAG IQ pulse based on amplitude scaling. See PRX_CustomWaveforms . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). parameters Required calibration data, may be nested Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . Required calibration data, may be nested alias of FastDragI alias of FastDragQ previous PRX_DRAGGaussianSX next PRX_FastDragSX \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "ChannelDescription",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.channel.ChannelDescription.html",
    "description": "Bases: object Channel specific data, including tables for the instructions and waveforms used. name ( str ) \u2013 name of the controller handling the channel, also the name of the channel config ( RealCha...",
    "content": "Bases: object Channel specific data, including tables for the instructions and waveforms used. name ( str ) \u2013 name of the controller handling the channel, also the name of the channel config ( RealChannelConfig ) \u2013 properties of the channel instruction_table \u2013 mapping of the instructions to be executed on this channel. Each\ninstruction should be unique. waveform_table \u2013 Contains mapping of the waveforms to be executed on this channel. Each\nwaveform should be unique. Module: iqm.pulse.playlist.channel Attributes name  config  instruction_table  waveform_table  Methods add_instruction Add an instruction to the channel. Add an instruction to the channel. Each unique instruction in a channel gets assigned an integer index that can be used to refer to it.\nIf the instruction has associated Waveform s, they are indexed in a similar manner. instruction ( Instruction ) \u2013 instruction to be added index of the instruction int previous ChannelConfiguration next ChannelProperties \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "QuantumOp",
    "url": "/iqm-pulse/api/iqm.pulse.quantum_ops.QuantumOp.html",
    "description": "Bases: object Describes a native quantum operation type. Quantum operations (or \u201cops\u201d in short), are simple, abstract, self-contained actions one can\nexecute on a station as parts of a quantum circuit...",
    "content": "Bases: object Describes a native quantum operation type. Quantum operations (or \u201cops\u201d in short), are simple, abstract, self-contained actions one can\nexecute on a station as parts of a quantum circuit. They include quantum gates, measurements,\nand resets. They must have an unambiguous definition in terms of their intended effect on the\ncomputational subspace of the quantum subsystems (qubits, qudits, qumodes\u2026) they act on.\nThey are implemented on the hardware using instruction schedules . A QuantumOp can also be a metaoperation , which (in an idealized picture) has no effect on the\nquantum state, but affects the scheduling of the other ops. Execution barriers are an example of a metaoperation. The ops can have any number of named parameters. For example, PRX is a two-parameter\nquantum gate family, whereas CZ is a single gate with no parameters. A locus (plural: loci) is a tuple[str, ...] (an ordered sequence) of CHAD component names\nan instance of a quantum operation acts on. The locus consists of those QPU components that store the\nquantum information the operation acts on. For example, a CZ gate implemented using a flux\npulse on the coupler connecting the qubits does not include the coupler in its locus, since the\ncoupler is simply an implementation detail. In a quantum circuit each operation type normally has several different loci. For example, you\ncould have a PRX gate being used on qubits {('QB1',), ('QB2',), ('QB5',)} , or a CZ gate used on qubit pairs {('QB1', 'QB3'), ('QB3', 'QB5',), ('QB1', 'QB5',)} . Each quantum operation can have any number of named implementations , each represented by a GateImplementation subclass. For example, we may have two implementations of the CZ gate,\none with just a single flux pulse applied to the coupler, and another one with additional flux\npulses applied to the qubits as well. operation defines the abstract intention (what) implementation defines the concrete method (how) locus defines the target of the operation (where) The quantum operations are typically calibrated using specific calibration experiments that\noutput the required calibration data. Each implementation of each operation can require\nits own, independent set of calibration data for each locus. Module: iqm.pulse.quantum_ops Attributes default_implementation Name of the default implementation (the global default). factorizable True iff the operation is always factorizable to independent single-subsystem operations, which is also how it is implemented, for example parallel single-qubit measurements. params Names of required operation parameters, if any. symmetric True iff the effect of operation is symmetric in the quantum subsystems it acts on. unitary Unitary matrix that represents the effect of this quantum operation in the computational basis, or None if the quantum operation is not unitary or the exact unitary is not known. name Unique name of the operation. arity Number of locus components the operation acts on. implementations Maps implementation names to GateImplementation classes that provide them. defaults_for_locus Optionally define the implementation default individually per each locus. Methods copy Make a copy of self with the given changes applied to the contents. get_default_implementation_for_locus Get the default (highest priority) implementation for the given locus. set_default_implementation Sets the given implementation as the default. set_default_implementation_for_locus Set the locus-specific default implementation. name ( str ) \u2013 arity ( int ) \u2013 params ( tuple [ str , ... ] ) \u2013 implementations ( dict [ str , type [ GateImplementation ] ] ) \u2013 symmetric ( bool ) \u2013 factorizable ( bool ) \u2013 defaults_for_locus ( dict [ tuple [ str , ... ] , str ] ) \u2013 unitary ( Callable [ ... , np.ndarray ] | None ) \u2013 Unique name of the operation. Number of locus components the operation acts on.\nEach locus component corresponds to a quantum subsystem in the definition of the operation.\nThe computational subspace always consists of the lowest two levels of the subsystem.\nZero means the operation can be applied on any number of locus components. Names of required operation parameters, if any. Maps implementation names to GateImplementation classes that provide them.\nEach such class should describe the implementation in detail in its docstring.\nThe implementations are in the dict in priority order, highest-priority (default) first. This global priority\norder can be overridden per locus by the attribute defaults_for_locus . True iff the effect of operation is symmetric in the quantum subsystems it acts on.\nOnly meaningful if self.arity != 1 . True iff the operation is always factorizable to independent single-subsystem operations, which\nis also how it is implemented, for example parallel single-qubit measurements.\nIn this case the operation calibration data is for individual subsystems as well. Optionally define the implementation default individually per each locus. Maps the locus to the default\ngate implementation name. If a locus is not found in this dict (by default, the dict is empty), falls back to the\nglobal order defined in implementations . The implementations must be first registered in implementations . Unitary matrix that represents the effect of this quantum operation in the computational basis, or None if the quantum operation is not unitary or the exact unitary is not known.\nThe Callable needs to take exactly the arguments given in params , for example if params=('angle','phase') , the function must have signature f(angle:float, phase: float) -> np.ndarray .\nFor operations acting on more than 1 qubit, unitary should be given in the big-endian order, i.e. in the basis np.kron(first_qubit_basis_ket, second_qubit_basis_ket) . Make a copy of self with the given changes applied to the contents. QuantumOp Name of the default implementation (the global default). Sets the given implementation as the default. default ( str ) \u2013 name of the new default implementation ValueError \u2013 default is unknown or is a special implementation. None Get the default (highest priority) implementation for the given locus. If no locus-specific priority is defined, returns the global default. locus ( Iterable [ str ] ) \u2013 tuple of component names defining the locus. The default implementation name. str Set the locus-specific default implementation. default ( str ) \u2013 name of the new default implementation for locus . locus ( Iterable [ str ] ) \u2013 tuple of component names defining the locus. ValueError \u2013 if there is no implementation defined with the name default or default is a special\n    implementation. None previous iqm.pulse.quantum_ops.validate_op_calibration next scheduler \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "RZ_ACStarkShift",
    "url": "/iqm-pulse/api/iqm.pulse.gates.rz.RZ_ACStarkShift.html",
    "description": "Bases: GateImplementation Implementation of the RZ gate using an AC Stark pulse. An AC Stark pulse is a strong off-resonant drive on a qubit. This pulse leads to a frequency shift of the qubit due\nto ...",
    "content": "Bases: GateImplementation Implementation of the RZ gate using an AC Stark pulse. An AC Stark pulse is a strong off-resonant drive on a qubit. This pulse leads to a frequency shift of the qubit due\nto the AC Stark effect. The qubit frequency shift depends on the AC Stark pulse amplitude and frequency. ac_stark_pulse \u2013 AC Stark pulse. channel \u2013 Name of the drive channel on which the AC Stark pulse is played. parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Constructs an instance of the AC Stark pulse for the given locus. Module: iqm.pulse.gates.rz Attributes ac_stark_waveform  Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\nSubclasses can reimplement this method in case it makes sense in their context. float Returns an AC Stark pulse which consists of a modulated I and modulated Q waveform, where the Q quadrature\nhas an additional phase of -pi/2. n_samples ( int ) \u2013 amplitude ( float ) \u2013 phase_increment ( float ) \u2013 phase ( float ) \u2013 IQPulse previous iqm.pulse.gates.rz.get_unitary_rz next RZ_ACStarkShift_CosineRiseFall \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.Locus",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.Locus.html",
    "description": "Sequence of QPU component physical names a quantum operation is acting on. The order may matter. alias of tuple [ str , \u2026] previous gate_implementation next iqm.pulse.gate_implementation.OILCalibratio...",
    "content": "Sequence of QPU component physical names a quantum operation is acting on. The order may matter. alias of tuple [ str , \u2026] previous gate_implementation next iqm.pulse.gate_implementation.OILCalibrationData \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_CustomWaveforms",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_CustomWaveforms.html",
    "description": "Bases: PRX_SinglePulse_GateImplementation , CustomIQWaveforms ABC for PRX gates implemented using a single IQ pulse and hot-swappable waveforms. Module: iqm.pulse.gates.prx Attributes dependent_waves ...",
    "content": "Bases: PRX_SinglePulse_GateImplementation , CustomIQWaveforms ABC for PRX gates implemented using a single IQ pulse and hot-swappable waveforms. Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). root_parameters Parameters independent of the of Waveforms. wave_i Waveform for the I channel. wave_q Waveform for the Q channel. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Parameters independent of the of Waveforms. Inheriting classes may override this to include parameters common\nto all such implementations. Builds an x_pi pulse out of the calibration data. amplitude_i ( float ) \u2013 amplitude_q ( float ) \u2013 n_samples ( int ) \u2013 IQPulse If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . previous Constant_PRX_with_smooth_rise_fall next PRX_CustomWaveformsSX \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "utils",
    "url": "/iqm-pulse/api/iqm.pulse.utils.html",
    "description": "Utility functions. Full path: iqm.pulse.utils Functions map_waveform_param_types (type_hint) Map a python typehint into EXA Parameter's (DataType, CollectionType) tuple. normalize_angle (angle) Normal...",
    "content": "Utility functions. Full path: iqm.pulse.utils Functions map_waveform_param_types (type_hint) Map a python typehint into EXA Parameter's (DataType, CollectionType) tuple. normalize_angle (angle) Normalize the given angle to (-pi, pi]. phase_transformation ([psi_1,\u00a0psi_2]) Implement an arbitrary (RZ, PRX, RZ) gate sequence by modifying the parameters of the IQ pulse implementing the PRX. previous TimeBox next iqm.pulse.utils.map_waveform_param_types \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.validation.AWGScheduleValidationError",
    "url": "/iqm-pulse/api/iqm.pulse.validation.AWGScheduleValidationError.html",
    "description": "Error raised when schedule validation for an AWG fails. previous AWGScheduleValidationData next iqm.pulse.validation.InvalidInstructionError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last...",
    "content": "Error raised when schedule validation for an AWG fails. previous AWGScheduleValidationData next iqm.pulse.validation.InvalidInstructionError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_SinglePulse_GateImplementation",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_SinglePulse_GateImplementation.html",
    "description": "Bases: SinglePulseGate , PRX_GateImplementation ABC for PRX gates implemented using a single IQ pulse. This class implements phased x rotation gates on a specific qubit using an IQPulse instance, deri...",
    "content": "Bases: SinglePulseGate , PRX_GateImplementation ABC for PRX gates implemented using a single IQ pulse. This class implements phased x rotation gates on a specific qubit using an IQPulse instance, derived from the pulse calibration data provided at construction by\nthe static method _single_iq_pulse() .\nThe pulse is used to resonantly drive the qubit to effect the required rotation. The pulse calibration data consists of the parameters of an \\(x_\\pi\\) IQPulse only.\nIt is assumed that the transfer function from the AWG to the qubit is linear, i.e.,\nother rotation angles can be obtained by linearly scaling the pulse amplitude, and other phase angles can be obtained by adjusting the IQ modulation phase. The generated pulses all have the same time duration, also for identity rotations. In the special case of the\nduration being zero, the gate implementation will apply a Block(0) instruction to the qubit\u2019s drive channel. Module: iqm.pulse.gates.prx Attributes iq_pulse Alias for self.pulse for backward compatibility Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Phased x rotation gate. angle ( float ) \u2013 rotation angle (in radians) phase ( float ) \u2013 phase angle (in radians) boxed instruction schedule implementing the phased x rotation gate TimeBox Alias for self.pulse for backward compatibility previous PRX_ModulatedDRAGCosineRiseFall next reset \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "SXGate",
    "url": "/iqm-pulse/api/iqm.pulse.gates.sx.SXGate.html",
    "description": "Bases: CompositeGate SX gate implementation based on PRX gate, by limiting the angle to pi / 2. Module: iqm.pulse.gates.sx Attributes registered_gates Gates that can be calibrated separately from thei...",
    "content": "Bases: CompositeGate SX gate implementation based on PRX gate, by limiting the angle to pi / 2. Module: iqm.pulse.gates.sx Attributes registered_gates Gates that can be calibrated separately from their common calibration existing in self.builder . Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Gates that can be calibrated separately from their common calibration existing in self.builder . The gate\nnames should correspond to the keys in self.builder.op_table . Other gates besides the ones given here can\nalso be constructed via self.builder , but these will always use the common calibration. Call PRX gate with angle equals to pi / 2. TimeBox previous sx next u \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.playlist.visualisation.base.inspect_playlist",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.visualisation.base.inspect_playlist.html",
    "description": "Creates an HTML string from the given playlist and segments. The output can be viewed in a browser or in a Jupyter notebook using IPython.core.display.HTML . playlist ( Playlist ) \u2013 The Playlist to be...",
    "content": "Creates an HTML string from the given playlist and segments. The output can be viewed in a browser or in a Jupyter notebook using IPython.core.display.HTML . playlist ( Playlist ) \u2013 The Playlist to be visualised segments ( Sequence [ int ] ) \u2013 Indices of the Playlist segments to inspect. The generated raw HTML string. str previous base next waveforms \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "ProbePulse_CustomWaveforms",
    "url": "/iqm-pulse/api/iqm.pulse.gates.measure.ProbePulse_CustomWaveforms.html",
    "description": "Bases: CustomIQWaveforms Base class for implementing a probe line measurement pulse with custom waveforms in the I and Q channels. With given Waveform waveform definitions Something and SomethingElse ...",
    "content": "Bases: CustomIQWaveforms Base class for implementing a probe line measurement pulse with custom waveforms in the I and Q channels. With given Waveform waveform definitions Something and SomethingElse ,\nyou may define a measurement implementation that uses them as follows: class MyGate(ProbePulse_CustomWaveforms, i_wave=Something, q_wave=SomethingElse) . Contrary to the Measure_CustomWaveforms class, this implementation acts on proble lines directly (i.e. its locus is a single probe line). The measurement IQPulse instruction will not be automatically modulated\nby any frequency, so any modulations should be included in the I and Q waveforms themselves. Module: iqm.pulse.gates.measure Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). root_parameters Parameters independent of the of Waveforms. wave_i Waveform for the I channel. wave_q Waveform for the Q channel. Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Parameters independent of the of Waveforms. Inheriting classes may override this to include parameters common\nto all such implementations. Builds a probe pulse and acquisition methods using the calibration data. Subclasses may override this method if needed. waveform_params ( dict [ str , Any ] ) \u2013 root_params ( dict [ str , Any ] ) \u2013 tuple [ IQPulse , tuple [ AcquisitionMethod , AcquisitionMethod ]] Returns a TimeBox containing the probe pulse measurement. In scheduling, the returned TimeBox blocks only the probe line ( self.locus[0] ). key ( str ) \u2013 The time trace results generated on this trigger will be used to assigned to f\"{probe_line}__{key}\" , where probe_line is the one that handles self.locus[0] . If empty,\nthe key \u201creadout.time_trace\u201d is used. TimeBox containing the ReadoutTrigger instruction. TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\nSubclasses can reimplement this method in case it makes sense in their context. float Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \"<operation_name>.<implementation_name>\" . Inheriting classes may\noverride this for different behaviour. operation_name ( str ) \u2013 name of the quantum operation. implementation_name ( str ) \u2013 name of the implementation name of the locus mapping str If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . previous Measure_CustomWaveforms next ProbePulse_CustomWaveforms_noIntegration \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Reset_Wait",
    "url": "/iqm-pulse/api/iqm.pulse.gates.reset.Reset_Wait.html",
    "description": "Bases: GateImplementation Reset operation by relaxation (idling for a time comparable to the relaxation time of the component). Adds a Wait pulse for all the (non-virtual) channels of the locus compon...",
    "content": "Bases: GateImplementation Reset operation by relaxation (idling for a time comparable to the relaxation time of the component). Adds a Wait pulse for all the (non-virtual) channels of the locus components. In addition, blocks all the probes\nassociated with the locus and in case the locus is connected via couplers, blocks them as well. The operation\nis factorizable, so that the calibration data it uses (i.e. the wait duration in seconds) is defined for each\ncomponent, and when acting on multiple components, the maximum of the associated wait durations will be applied. Reset by relaxation is intended to be used in the circuit initialisation between shots / segments.\nIt also can be called on specific qubits inside a segment, but as it works by\nwaiting longer than the qubit relaxation time, the states of all the other qubits\nwill likely have been destroyed as well by the time the reset has finished. Module: iqm.pulse.gates.reset Attributes parameters Required calibration data, may be nested Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_custom_locus_mapping Supported loci: all components that have channels. wait_box TimeBox that contains Wait instructions for all non-virtual channels associated with self.locus . parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Required calibration data, may be nested TimeBox that contains Wait instructions for all non-virtual channels associated with self.locus . Does not block any additional components beside the locus itself. TimeBox The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\nSubclasses can reimplement this method in case it makes sense in their context. float Supported loci: all components that have channels. chip_topology ( ChipTopology ) \u2013 component_to_channels ( dict [ str , Iterable [ str ] ] ) \u2013 dict [ tuple [ str , \u2026] | frozenset [ str ], tuple [ str , \u2026]] | None previous Reset_Conditional next rz \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "FluxPulseGate_CRF_CRF",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.FluxPulseGate_CRF_CRF.html",
    "description": "Bases: FluxPulseGate CZ gate using a CosineRiseFall flux pulse on the coupler and on the qubit. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested symmetric True...",
    "content": "Bases: FluxPulseGate CZ gate using a CosineRiseFall flux pulse on the coupler and on the qubit. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of CosineRiseFall Required calibration data, may be nested alias of CosineRiseFall True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous FluxPulseGate next FluxPulseGate_TGSS_CRF \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.playlist.fast_drag.fourier_transform_of_cos_basis_functions_as_tensor",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.fast_drag.fourier_transform_of_cos_basis_functions_as_tensor.html",
    "description": "Evaluate Fourier transforms of cosine basis functions for given basis function indices and frequencies. The nth cosine basis function is given by \\(g_n(t) = 1 -  \\cos(2 \\pi n t/t_p)\\) defined on the i...",
    "content": "Evaluate Fourier transforms of cosine basis functions for given basis function indices and frequencies. The nth cosine basis function is given by \\(g_n(t) = 1 -  \\cos(2 \\pi n t/t_p)\\) defined on the interval \\([0, t_p]\\) , where \\(t_p\\) is the pulse duration. The Fourier transform can be analytically evaluated, see\nEq. (A7) of [ 1 ] . We evaluate the Fourier transform for the basis function indices given by n_arr and for the frequencies given by frequency_arr . We store the Fourier transforms as a tensor of dimension 1+dim(frequency_arr) , such that the first dimension corresponds to the basis function indices, and the following\ndimensions to those of frequency_arr . Thus, the Fourier transform is evaluated essentially for the cartesian\nproduct of n_arr and frequency_arr . n_arr ( ndarray ) \u2013 1d array of basis function indices, running typically from 1 to N, where N is the\nnumber of considered basis functions frequencies ( ndarray ) \u2013 N-dimensional array of frequencies (in Hz), at which the Fourier transform is evaluated.\nFor the computation of FAST DRAG coefficients, N=2 . pulse_duration ( float ) \u2013 Pulse duration (in s), without zero padding. Array containing the Fourier transform as a tensor with a shape (len(n_arr), *frequency_arr.shape) ndarray previous iqm.pulse.playlist.fast_drag.evaluate_fast_drag_q_envelope next iqm.pulse.playlist.fast_drag.solve_fast_coefficients_for_given_weights_and_ranges \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.delay.DELAY_MAX_DURATION_SECONDS",
    "url": "/iqm-pulse/api/iqm.pulse.gates.delay.DELAY_MAX_DURATION_SECONDS.html",
    "description": "Maximum duration for individual Delay operations, in seconds. previous delay next Delay \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27....",
    "content": "Maximum duration for individual Delay operations, in seconds. previous delay next Delay \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.prx.get_unitary_prx",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.get_unitary_prx.html",
    "description": "Unitary for a PRX gate. angle ( float ) \u2013 rotation angle (in rad) phase ( float ) \u2013 phase angle (in rad) 2x2 unitary representing prx(angle, phase) . ndarray previous prx next ABC_Constant_smooth \u00a9 Co...",
    "content": "Unitary for a PRX gate. angle ( float ) \u2013 rotation angle (in rad) phase ( float ) \u2013 phase angle (in rad) 2x2 unitary representing prx(angle, phase) . ndarray previous prx next ABC_Constant_smooth \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.move.apply_move_gate_phase_corrections",
    "url": "/iqm-pulse/api/iqm.pulse.gates.move.apply_move_gate_phase_corrections.html",
    "description": "Schedule-level pass applying resonator-related phase corrections in MOVE sandwiches to the moved qubit. Note Assumes the MOVE gate implementation is based on MOVE_CustomWaveforms . Processes all the M...",
    "content": "Schedule-level pass applying resonator-related phase corrections in MOVE sandwiches to the moved qubit. Note Assumes the MOVE gate implementation is based on MOVE_CustomWaveforms . Processes all the MOVE sandwiches in schedule , summing up the VirtualRZ instructions\non the resonator virtual drive channels, adding the phase difference resulting from\nqubit-resonator detuning to the total, and applying it on the qubit at the end of each sandwich. schedule ( Schedule ) \u2013 instruction schedule to process builder ( ScheduleBuilder ) \u2013 schedule builder that was used to build schedule apply_detuning_corrections ( bool ) \u2013 if True, also apply detuning phase corrections copy of schedule with the phase corrections applied Schedule previous move next iqm.pulse.gates.move.validate_move_instructions \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "CZ_Slepian_CRF",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.CZ_Slepian_CRF.html",
    "description": "Bases: FluxPulseGate CZ gate using a Slepian flux pulse on the coupler and a CosineRiseFall flux pulse on the qubit. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be ...",
    "content": "Bases: FluxPulseGate CZ gate using a Slepian flux pulse on the coupler and a CosineRiseFall flux pulse on the qubit. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of Slepian Required calibration data, may be nested alias of CosineRiseFall True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous CZ_Slepian_ACStarkCRF next CZ_TruncatedGaussianSmoothedSquare \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.OILCalibrationData",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.OILCalibrationData.html",
    "description": "Calibration data for a particular implementation of a particular quantum operation at a particular locus. alias of dict [ str , Any ] previous iqm.pulse.gate_implementation.Locus next iqm.pulse.gate_i...",
    "content": "Calibration data for a particular implementation of a particular quantum operation at a particular locus. alias of dict [ str , Any ] previous iqm.pulse.gate_implementation.Locus next iqm.pulse.gate_implementation.OICalibrationData \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "CircuitOperation",
    "url": "/iqm-pulse/api/iqm.pulse.builder.CircuitOperation.html",
    "description": "Bases: object Specific quantum operation applied on a specific part of the QPU, e.g. in a quantum circuit. Module: iqm.pulse.builder Attributes implementation name of the implementation name name of t...",
    "content": "Bases: object Specific quantum operation applied on a specific part of the QPU, e.g. in a quantum circuit. Module: iqm.pulse.builder Attributes implementation name of the implementation name name of the quantum operation locus names of the information-bearing QPU components (qubits, computational resonators...) the operation acts on args arguments for the operation Methods validate Validate the operation against a table of operation definitions. name ( str ) \u2013 locus ( tuple [ str , ... ] ) \u2013 args ( dict [ str , Any ] ) \u2013 implementation ( str | None ) \u2013 name of the quantum operation names of the information-bearing QPU components (qubits, computational resonators\u2026) the operation acts on arguments for the operation name of the implementation Validate the operation against a table of operation definitions. op_table ( dict [ str , QuantumOp ] ) \u2013 table containing allowed quantum operations ValueError \u2013 operation is not valid None previous iqm.pulse.builder.validate_quantum_circuit next ScheduleBuilder \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "channel",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.channel.html",
    "description": "Control channel properties. Full path: iqm.pulse.playlist.channel Functions get_channel_properties (chip_topology,\u00a0...) Internal function to get channel properties. get_channel_properties_from_station...",
    "content": "Control channel properties. Full path: iqm.pulse.playlist.channel Functions get_channel_properties (chip_topology,\u00a0...) Internal function to get channel properties. get_channel_properties_from_station_settings (...) Get channel properties from Station Control controller settings following the standard convention. round_duration_to_granularity_samples (...[,\u00a0...]) Round a time duration to the least common multiple of the granularities of the given channels. Classes ChannelConfiguration Base class for configuring channels. ChannelDescription Channel specific data, including tables for the instructions and waveforms used. ChannelProperties Defines the properties of a control or measurement channel. IQChannelConfig Requested configuration of an IQ channel. ProbeChannelProperties ChannelProperties for probe line channels. RealChannelConfig Requested configuration of a real channel. Inheritance previous playlist next iqm.pulse.playlist.channel.get_channel_properties \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "move",
    "url": "/iqm-pulse/api/iqm.pulse.gates.move.html",
    "description": "Two-qubit MOVE gate. The MOVE gate is a population exchange operation between a qubit and a resonator,\nmediated by a coupler, that has the following properties: MOVE is unitary. The effect of MOVE is ...",
    "content": "Two-qubit MOVE gate. The MOVE gate is a population exchange operation between a qubit and a resonator,\nmediated by a coupler, that has the following properties: MOVE is unitary. The effect of MOVE is only defined in the invariant\nsubspace \\(S = \\text{span}\\{|00\\rangle, |01\\rangle, |10\\rangle\\}\\) , where it swaps the populations of the states \\(|01\\rangle\\) and \\(|10\\rangle\\) . Anything may happen in the orthogonal subspace as long as it is unitary and\ninvariant. In the subspace where it is defined, MOVE is an involution: \\(\\text{MOVE}_S^2 = I_S\\) . Thus MOVE has the following presentation in the subspace \\(S\\) : where \\(a\\) is an undefined complex phase. This degree of freedom (in addition to the undefined effect of the gate\nin the orthogonal subspace) means there is a continuum of different MOVE gates, all equally valid.\nThe phase \\(a\\) is canceled when the MOVE gate is applied a second time due to the involution property. Full path: iqm.pulse.gates.move Functions apply_move_gate_phase_corrections (schedule,\u00a0...) Schedule-level pass applying resonator-related phase corrections in MOVE sandwiches to the moved qubit. validate_move_instructions (instructions,\u00a0builder) Circuit-level pass to prepare a circuit containing MOVE gates for compilation. Classes MOVE_CRF_CRF Qubit-resonator MOVE gate using the CRF waveform for the coupler and the qubit flux pulse. MOVE_CustomWaveforms Qubit-resonator MOVE gate using flux pulses on both components. MOVE_TGSS_CRF Qubit-resonator MOVE gate using the TGSS waveform for the coupler flux pulse and the CRF waveform for the qubit flux pulse. MoveMarker Special annotation instruction to indicate the beginning and ending of MOVE gates. Inheritance previous Probe_Constant next iqm.pulse.gates.move.apply_move_gate_phase_corrections \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "SchedulingStrategy",
    "url": "/iqm-pulse/api/iqm.pulse.timebox.SchedulingStrategy.html",
    "description": "Bases: Enum Different scheduling strategies for the contents of composite TimeBoxes. Module: iqm.pulse.timebox Attributes ASAP TimeBox contents are scheduled as soon as possible within the box. ALAP T...",
    "content": "Bases: Enum Different scheduling strategies for the contents of composite TimeBoxes. Module: iqm.pulse.timebox Attributes ASAP TimeBox contents are scheduled as soon as possible within the box. ALAP TimeBox contents are scheduled as late as possible within the box. Methods TimeBox contents are scheduled as soon as possible within the box. TimeBox contents are scheduled as late as possible within the box. previous SchedulingAlgorithm next TimeBox \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "gates",
    "url": "/iqm-pulse/api/iqm.pulse.gates.html",
    "description": "Implementations of quantum gates. The GateImplementation subclasses in this subpackage construct TimeBox instances to\nimplement specific native gates, using the calibration data that the class has bee...",
    "content": "Implementations of quantum gates. The GateImplementation subclasses in this subpackage construct TimeBox instances to\nimplement specific native gates, using the calibration data that the class has been initialized with.\nEach GateImplementation instance encapsulates the calibration data for a specific implementation of a specific\nnative gate acting on a specific locus. Several different implementations and calibration schemes can be supported for a given gate,\neach represented by its own GateImplementation subclass.\nLikewise, a single GateImplementation subclass can be sometimes used to implement several different gates\nthrough different calibration data. Full path: iqm.pulse.gates Functions expose_implementation (implementation[,\u00a0...]) Add the given gate implementation to the list of known implementations. get_implementation_class (class_name) Get gate implementation class by class name. register_implementation (operations,\u00a0...[,\u00a0...]) Register a new gate implementation, and a new gate (operation) if needed. Subpackages and modules barrier Barrier metaoperation. conditional Classically controlled gates. cz Two-qubit controlled-Z (CZ) gate. default_gates This file defines the default quantum gates and operations for IQM's pulse control system delay Force a delay between instructions on the control channels of specific locus components. enums Enumerations for representing a set of important one- and two-qubit gates. flux_multiplexer GateImplementation for correcting flux crosstalk for a given set of flux-pulse TimeBoxes measure Projective measurement in the Z basis. move Two-qubit MOVE gate. prx Single-qubit PRX gate. reset Resetting qubits to the zero state. rz Single-qubit RZ gate. sx Single-qubit sqrt(X) gate. u Single-qubit SU(2) gate. previous SinglePulseGate next iqm.pulse.gates.expose_implementation \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "CosineRise",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.waveforms.CosineRise.html",
    "description": "Bases: Waveform Cosine Rise waveform. This waveform assumes that during its duration, the only thing happening is signal occurring to the required\namplitude.\nThe waveform is made for pairing with \u2018Con...",
    "content": "Bases: Waveform Cosine Rise waveform. This waveform assumes that during its duration, the only thing happening is signal occurring to the required\namplitude.\nThe waveform is made for pairing with \u2018Constant\u2019 waveform to enable arbitrarily long pulses with smooth rise part.\nThe rise time is equal to pulse duration. rise_time \u2013 Dummy parameter, used only as due to a bug. FIXME it is not used, placed for resolving exa bug n_samples ( int ) \u2013 Module: iqm.pulse.playlist.waveforms Attributes n_samples Requested number of samples for the waveform. Methods Actually samples the waveform. sample_coords ( ndarray ) \u2013 coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) ndarray previous CosineFall next CosineRiseFallDerivative \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "FastDragI",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.fast_drag.FastDragI.html",
    "description": "Bases: FastDrag I-component of the Fourier Ansatz Spectrum Tuning (FAST) drag pulse. The I-envelope is defined as where \\(N\\) is the number of cosine terms in the series, \\(\\{c_n\\}\\) are the coefficie...",
    "content": "Bases: FastDrag I-component of the Fourier Ansatz Spectrum Tuning (FAST) drag pulse. The I-envelope is defined as where \\(N\\) is the number of cosine terms in the series, \\(\\{c_n\\}\\) are the coefficients, and\nthe pulse is defined on the interval \\(t \\in [-t_p/2, t_p/2]\\) . Module: iqm.pulse.playlist.fast_drag Attributes number_of_cos_terms  suppressed_interval_widths  weights  full_width  coefficients  suppressed_frequencies  compute_coefs_from_frequencies  n_samples Requested number of samples for the waveform. Methods n_samples ( int ) \u2013 full_width ( float ) \u2013 coefficients ( ndarray ) \u2013 suppressed_frequencies ( ndarray ) \u2013 compute_coefs_from_frequencies ( bool ) \u2013 number_of_cos_terms ( int ) \u2013 suppressed_interval_widths ( ndarray ) \u2013 weights ( ndarray ) \u2013 center_offset ( float ) \u2013 Actually samples the waveform. sample_coords ( ndarray ) \u2013 coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) ndarray previous FastDrag next FastDragQ \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "SegmentPointer",
    "url": "/iqm-pulse/api/iqm.pulse.scheduler.SegmentPointer.html",
    "description": "Bases: object Tool for working with Segments. Serves as a time pointer inside the Segment. Module: iqm.pulse.scheduler Attributes frac time, in seconds, after the start of the current instruction rema...",
    "content": "Bases: object Tool for working with Segments. Serves as a time pointer inside the Segment. Module: iqm.pulse.scheduler Attributes frac time, in seconds, after the start of the current instruction remainder Remaining duration of the current instruction (in seconds). source contents of the Segment idx index of the current instruction TOL time durations equal or smaller than this tolerance are considered zero (in seconds) Methods cut_tail Cut the source of the pointer at the current index. fastforward Move the pointer forward by duration seconds. get Current instruction. next Move to the beginning of the next instruction. rewind Move the pointer back by duration seconds. tail Instructions from the current index onwards. source ( list [ Instruction ] ) \u2013 idx ( int ) \u2013 TOL ( float ) \u2013 frac ( float ) \u2013 contents of the Segment index of the current instruction time durations equal or smaller than this tolerance are considered zero (in seconds) time, in seconds, after the start of the current instruction Current instruction. Instruction Remaining duration of the current instruction (in seconds). Move to the beginning of the next instruction. bool Cut the source of the pointer at the current index. Truncate source at idx , make self point to\nthe cut tail part only. frac is not changed. Note: modifies source . None Instructions from the current index onwards. Sequence [ Instruction ] Move the pointer back by duration seconds. duration ( float ) \u2013 None Move the pointer forward by duration seconds. duration ( float ) \u2013 bool previous iqm.pulse.scheduler.extend_schedule_new next timebox \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "CCPRX_Composite",
    "url": "/iqm-pulse/api/iqm.pulse.gates.conditional.CCPRX_Composite.html",
    "description": "Bases: CompositeGate Classically controlled PRX gate. Applies a PRX gate conditioned on a discriminated readout result obtained in the same segment (active feedback).\nApplies a PRX gate if the result ...",
    "content": "Bases: CompositeGate Classically controlled PRX gate. Applies a PRX gate conditioned on a discriminated readout result obtained in the same segment (active feedback).\nApplies a PRX gate if the result is 1, and a Wait of equal duration if the result is 0.\nUses the default implementation of PRX underneath, so no extra calibration is needed. Module: iqm.pulse.gates.conditional Attributes parameters control_delays contains the times it takes for the classical control signal from each probe line (readout instrument) to become usable for the drive AWG implementing the PRX gate. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 control_delays contains the times it takes for the classical control signal from each\nprobe line (readout instrument) to become usable for the drive AWG implementing the PRX gate.\nThe delays must be in the same order as the probe lines are listed in\nthe {drive_controller}.awg.feedback_sources station setting. Two TimeBoxes that together implement the classically controlled PRX gate. The first Timebox is for the control signal delay, and the second has a ConditionalInstruction.\nThe delay TimeBox operates only on a virtual channel and is used to block the pulse TimeBox\nuntil there has been enough time for the control signal to arrive.\nThe delay is specified by the control_delays gate parameter. In normal operation, the boxes can be placed sequentially without causing unnecessary delays.\nTo care of the timing yourself, simply ignore the first TimeBox. angle ( float ) \u2013 The PRX rotation angle (rad). phase ( float ) \u2013 The PRX rotation phase (rad). feedback_qubit ( str ) \u2013 The qubit that was measured to create the feedback bit. feedback_key ( str ) \u2013 Identifies the feedback signal if feedback_qubit was measured multiple times.\nThe feedback label is then f\"{feedback_qubit}__{feedback_key}\" .\nTODO: currently the HW does not support multiple feedback keys per drive channel, so this argument has\nno effect. The conditional prx will always listen feedback from the label f\"{feedback_qubit}__{FEEDBACK_KEY}\" . When the HW is improved, the actual key the user inputs\nshould be used. A TimeBox for the signal delay, and a TimeBox with a ConditionalInstruction inside. list [ TimeBox ] previous conditional next CCPRX_Composite_DRAGCosineRiseFall \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.PROBE_LINES_LOCUS_MAPPING",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.PROBE_LINES_LOCUS_MAPPING.html",
    "description": "Locus mapping name for mapping all probe lines. previous iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_FLUX_AWG_LOCUS_MAPPING next iqm.pulse.gate_implementation.get_waveform_parameters \u00a9 Copyri...",
    "content": "Locus mapping name for mapping all probe lines. previous iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_FLUX_AWG_LOCUS_MAPPING next iqm.pulse.gate_implementation.get_waveform_parameters \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "MoveMarker",
    "url": "/iqm-pulse/api/iqm.pulse.gates.move.MoveMarker.html",
    "description": "Bases: Wait Special annotation instruction to indicate the beginning and ending of MOVE gates. The same instance of this instruction will be inserted into the qubit drive channel and the\nresonator vir...",
    "content": "Bases: Wait Special annotation instruction to indicate the beginning and ending of MOVE gates. The same instance of this instruction will be inserted into the qubit drive channel and the\nresonator virtual drive channel, right before the beginning MOVE VirtualRZ instructions,\nto link the channels together (otherwise, there would be nothing explicit in the Schedule\nindicating that there is a MOVE gate happening between the qubit and the resonator). Another shared instance will be inserted to the aforementioned channels right before the ending\nMOVE VirtualRZ instruction. The VirtualRZ instructions between the markers on the resonator\nchannel will be applied to the qubit instead in a post-compilation pass. Module: iqm.pulse.gates.move Attributes duration Time duration of the instruction. qubit  resonator  detuning  Methods duration ( int ) \u2013 qubit ( str ) \u2013 resonator ( str ) \u2013 detuning ( float ) \u2013 Time duration of the instruction. In samples at the channel sample rate. previous MOVE_TGSS_CRF next prx \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.playlist.hd_drag.solve_hd_drag_coefficients_from_suppressed_frequencies",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.hd_drag.solve_hd_drag_coefficients_from_suppressed_frequencies.html",
    "description": "Solve coefficients of the derivative terms in a HD DRAG pulse given pulse duration and frequencies to suppress. The coefficients \\(\\{\\beta_{2n}}_{n=0}^{K}\\) of the derivative terms are solved using Eq...",
    "content": "Solve coefficients of the derivative terms in a HD DRAG pulse given pulse duration and frequencies to suppress. The coefficients \\(\\{\\beta_{2n}}_{n=0}^{K}\\) of the derivative terms are solved using Eq. (B5) of [ 1 ] assuming that \\(\\beta_0 = 1\\) . Here, \\(K\\) is the number of suppressed frequencies. Note that the duration and frequencies must have matching units, e.g., s and Hz, or ns and GHz. pulse_duration ( float ) \u2013 Pulse duration (in s). suppressed_freq_arr ( tuple [ float , ... ] ) \u2013 Frequencies to be suppressed relative to the center drive frequency (in Hz). Coefficient array of length len(suppressed_freq_arr) + 1 ndarray previous iqm.pulse.playlist.hd_drag.solve_cosine_coefs_for_hd_drag next HdDrag \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "HdDragI",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.hd_drag.HdDragI.html",
    "description": "Bases: HdDrag I-component of the higher derivative (HD) drag pulse. The I-component is defined according to Eq. (B1) of [ 1 ] , where \\(\\{\\beta_{2n}\\}_{n=0}^K\\) are the coefficients of the derivative ...",
    "content": "Bases: HdDrag I-component of the higher derivative (HD) drag pulse. The I-component is defined according to Eq. (B1) of [ 1 ] , where \\(\\{\\beta_{2n}\\}_{n=0}^K\\) are the coefficients of the derivative terms, \\(K\\) is the number of\nsuppressed frequencies, and \\(g(t)\\) is the basis envelope given by where \\(d_k\\) are pre-computed to ensure continuous derivatives up to order \\(2K + 1\\) , \\(t_p\\) denotes the pulse duration, and the pulse is defined across \\(t \\in (-t_p/2, t_p/2)\\) . The sampled pulse is always normalized to have a maximum value slightly below 1.0. Module: iqm.pulse.playlist.hd_drag Attributes full_width  coefficients  suppressed_frequencies  compute_coefs_from_frequencies  n_samples Requested number of samples for the waveform. Methods n_samples ( int ) \u2013 full_width ( float ) \u2013 coefficients ( ndarray ) \u2013 suppressed_frequencies ( ndarray ) \u2013 compute_coefs_from_frequencies ( bool ) \u2013 center_offset ( float ) \u2013 Actually samples the waveform. sample_coords ( ndarray ) \u2013 coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) ndarray previous HdDrag next HdDragQ \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Reset_Conditional",
    "url": "/iqm-pulse/api/iqm.pulse.gates.reset.Reset_Conditional.html",
    "description": "Bases: CompositeGate Conditional reset operation. Uses a measurement followed by a conditional PRX gate with angle \\(\\pi\\) .\nIt is assumed the measurement projects the state into the computational bas...",
    "content": "Bases: CompositeGate Conditional reset operation. Uses a measurement followed by a conditional PRX gate with angle \\(\\pi\\) .\nIt is assumed the measurement projects the state into the computational basis. The conditional PRX implementation handles any necessary waits to accommodate for the feedback result propagation\ndelay. This reset implementation is factorizable. It can act upon any set of locus components, and the measurement\nused in the conditional reset will be multiplexed to those components. However, only locus components that have\nreadout and drive can be reset via conditional reset. Otherwise, locus components will just have their channels\nblocked. Module: iqm.pulse.gates.reset Attributes registered_gates Gates that can be calibrated separately from their common calibration existing in self.builder . Methods get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Gates that can be calibrated separately from their common calibration existing in self.builder . The gate\nnames should correspond to the keys in self.builder.op_table . Other gates besides the ones given here can\nalso be constructed via self.builder , but these will always use the common calibration. The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \"<operation_name>.<implementation_name>\" . Inheriting classes may\noverride this for different behaviour. operation_name ( str ) \u2013 name of the quantum operation. implementation_name ( str ) \u2013 name of the implementation name of the locus mapping str previous iqm.pulse.gates.reset.RESET_FEEDBACK_KEY next Reset_Wait \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "SuppressedPulse",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.fast_drag.SuppressedPulse.html",
    "description": "Bases: Waveform Base class for a control pulse using a series expansion to suppress certain frequencies in its envelope spectrum The base class describes control pulses, in which the coefficients of t...",
    "content": "Bases: Waveform Base class for a control pulse using a series expansion to suppress certain frequencies in its envelope spectrum The base class describes control pulses, in which the coefficients of the basis functions\nare chosen to suppress specific frequencies or frequency ranges in the frequency spectrum of the pulse envelope.\nExamples include FAST DRAG and HD DRAG. The pulse argument compute_coefs_from_frequencies allows the user to choose whether the basis function\ncoefficients are computed from suppressed_frequencies during the post-initialization of the pulse\n(thus, overriding any pre-computed values in coefficients ), or if the (pre-computed) values in coefficients are directly used and suppressed_frequencies are neglected. The classes deriving from this base class should\nimplement the post-initialization logic specific to the given pulse. full_width ( float ) \u2013 Full width of the pulse corresponding to the pulse duration with non-zero amplitude (in s). coefficients ( ndarray ) \u2013 Pre-computed coefficients of the series expansion. suppressed_frequencies ( ndarray ) \u2013 Frequencies to be suppressed or center frequencies of intervals to be suppressed\n(in Hz). compute_coefs_from_frequencies ( bool ) \u2013 Boolean value indicating whether we compute the coefficients from the\nsuppressed frequencies or whether we use the pre-computed coefficients. If True, suppressed_frequencies are used to compute and override coefficients in the post-initialization. If False, pre-computed coefficients are used, and suppressed_frequencies are ignored. n_samples ( int ) \u2013 Module: iqm.pulse.playlist.fast_drag Attributes full_width  coefficients  suppressed_frequencies  compute_coefs_from_frequencies  n_samples Requested number of samples for the waveform. Methods Scale the pulse samples to the interval (-1, 1) to avoid clipping at the instruments. samples ( ndarray ) \u2013 Array of pulse samples re-scaled Array of pulse samples ndarray previous FastDragQ next hd_drag \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.enums.TWO_QUBIT_UNITARIES",
    "url": "/iqm-pulse/api/iqm.pulse.gates.enums.TWO_QUBIT_UNITARIES.html",
    "description": "Mapping of TwoQubitGates to the corresponding U(4) matrices previous iqm.pulse.gates.enums.XYGATE_UNITARIES next TwoQubitGate \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 202...",
    "content": "Mapping of TwoQubitGates to the corresponding U(4) matrices previous iqm.pulse.gates.enums.XYGATE_UNITARIES next TwoQubitGate \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.get_implementation_class",
    "url": "/iqm-pulse/api/iqm.pulse.gates.get_implementation_class.html",
    "description": "Get gate implementation class by class name. class_name ( str ) \u2013 type [ GateImplementation ] | None previous iqm.pulse.gates.expose_implementation next iqm.pulse.gates.register_implementation \u00a9 Copyr...",
    "content": "Get gate implementation class by class name. class_name ( str ) \u2013 type [ GateImplementation ] | None previous iqm.pulse.gates.expose_implementation next iqm.pulse.gates.register_implementation \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "CCPRX_Composite_DRAGCosineRiseFall",
    "url": "/iqm-pulse/api/iqm.pulse.gates.conditional.CCPRX_Composite_DRAGCosineRiseFall.html",
    "description": "Bases: CCPRX_Composite Conditional drag_crf pulse. Module: iqm.pulse.gates.conditional Attributes default_implementations Mapping from operation names to the designated default implementation of that ...",
    "content": "Bases: CCPRX_Composite Conditional drag_crf pulse. Module: iqm.pulse.gates.conditional Attributes default_implementations Mapping from operation names to the designated default implementation of that operation. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Mapping from operation names to the designated default implementation of that operation. Filling this attribute\nallows one to define a different default implementation from the common default in self.builder.op_table to\nbe used in he context of this composite gate. If an operation is not found in this dict as a key, this\nCompositeGate will use the common default as the default implementation for it. previous CCPRX_Composite next CCPRX_Composite_DRAGGaussian \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "IQPulse",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.IQPulse.html",
    "description": "Bases: Instruction Play an upconverted pulse that contains real in-phase and quadrature waveforms. Module: iqm.pulse.playlist.instructions Attributes modulation_frequency Modulation frequency of the w...",
    "content": "Bases: Instruction Play an upconverted pulse that contains real in-phase and quadrature waveforms. Module: iqm.pulse.playlist.instructions Attributes modulation_frequency Modulation frequency of the waveforms, in units of the sampling rate. phase Phase of the pulse relative to the channel frequency, in radians. phase_increment Relative phase increment to the phase in the carrier frequency of this pulse and all pulses that are played after it. scale_i Scaling factor for the I quadrature. scale_q Scaling factor for the Q quadrature. wave_i I quadrature envelope. wave_q Q quadrature envelope. duration Time duration of the instruction. Methods get_waveforms Returns all the waveforms the Instruction contains. validate Validate the instruction attributes. duration ( int ) \u2013 wave_i ( Waveform ) \u2013 wave_q ( Waveform ) \u2013 scale_i ( float ) \u2013 scale_q ( float ) \u2013 phase ( float ) \u2013 modulation_frequency ( float ) \u2013 phase_increment ( float ) \u2013 I quadrature envelope. Q quadrature envelope. Scaling factor for the I quadrature. Scaling factor for the Q quadrature. Phase of the pulse relative to the channel frequency, in radians. Modulation frequency of the waveforms, in units of the sampling rate.\nThis modulation is additional to the channel frequency.\nThe default value of 0.0 does not modulate.\nNote that the phase of this modulation resets for every instruction, that is, successive instances of the same\nmodulated pulse are not phase coherent. Relative phase increment to the phase in the carrier frequency of this pulse and all pulses that\nare played after it. Unit: rad. Validate the instruction attributes. ValueError \u2013 something about the instruction is not ok Returns all the waveforms the Instruction contains. tuple [ Waveform , \u2026] previous FluxPulse next Instruction \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.playlist.hd_drag.COSINE_COEFFICIENTS_DICT",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.hd_drag.COSINE_COEFFICIENTS_DICT.html",
    "description": "Pre-computed coefficients of the cosine terms in the basis envelope (0th derivative). This dictionary contains a\nmapping from the number of suppressed frequencies to the coefficients of the cosine ter...",
    "content": "Pre-computed coefficients of the cosine terms in the basis envelope (0th derivative). This dictionary contains a\nmapping from the number of suppressed frequencies to the coefficients of the cosine terms computed using the\nfunction solve_cosine_coefs_for_hd_drag . previous hd_drag next iqm.pulse.playlist.hd_drag.evaluate_hd_drag_i_envelope \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "RZ_Virtual",
    "url": "/iqm-pulse/api/iqm.pulse.gates.rz.RZ_Virtual.html",
    "description": "Bases: GateImplementation Implementation of the RZ gate using the virtual z rotation technique. Implements the RZ gate on a specific qubit using a VirtualRZ instruction, which\nsimply changes the phase...",
    "content": "Bases: GateImplementation Implementation of the RZ gate using the virtual z rotation technique. Implements the RZ gate on a specific qubit using a VirtualRZ instruction, which\nsimply changes the phase of the local oscillator driving that qubit.\nThis requires no calibration data as of now.\nThe generated VirtualRZ instruction has the shortest possible duration allowed by the instruments. The virtual z rotation method is based on algebraically commuting the RZ gates towards the end\nof the circuit, until they hit a measurement operation, at which point they are eliminated. It assumes that all the multi-qubit gates in the circuit commute with arbitrary RZ gates (this holds e.g. for CZ\nsince it is diagonal), measurements are projective and happen in the z basis, so that RZ gates that immediately\nprecede them do not affect the measurement result or the state after the measurement, and thus\ncan be removed, and conjugating the single-qubit gates in the circuit with RZ is equivalent to incrementing the phase of the drive\n(holds for PRX ), which can be accomplished either by incrementing the phase of\nthe local oscillator of the drive channel, or incrementing the phases of all the IQPulse s\nfollowing it on the drive channel. If all these assumptions hold we may implement an RZ gate using a VirtualRZ instruction,\nwith phase_increment equal to the negated rotation angle. channel \u2013 name of the drive channel on which the VirtualRZ acts duration \u2013 time duration of the VirtualRZ instruction, in seconds parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Module: iqm.pulse.gates.rz Attributes parameters Required calibration data, may be nested Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. Z rotation gate. angle ( float ) \u2013 rotation angle (in radians) pulse schedule implementing the z rotation gate TimeBox Required calibration data, may be nested Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\nSubclasses can reimplement this method in case it makes sense in their context. float Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \"<operation_name>.<implementation_name>\" . Inheriting classes may\noverride this for different behaviour. operation_name ( str ) \u2013 name of the quantum operation. implementation_name ( str ) \u2013 name of the implementation name of the locus mapping str previous RZ_PRX_Composite next sx \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "gate_implementation",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.html",
    "description": "Implementing abstract quantum operations as instruction schedules. Note Note the conceptual difference between quantum operations (ops) and instruction schedules . Ops represent abstract, ideal comput...",
    "content": "Implementing abstract quantum operations as instruction schedules. Note Note the conceptual difference between quantum operations (ops) and instruction schedules . Ops represent abstract, ideal computational\noperations, whereas instruction schedules represent concrete control signal sequences for the\nquantum computer. One can (approximately) implement an op using a number of different\ninstruction schedules. Full path: iqm.pulse.gate_implementation Module Attributes Locus Sequence of QPU component physical names a quantum operation is acting on. OILCalibrationData Calibration data for a particular implementation of a particular quantum operation at a particular locus. OICalibrationData For a particular implementation of a particular quantum operation, maps operation loci to their calibration data. OCalibrationData For a particular quantum operation, maps implementation names to their calibration data. OpCalibrationDataTree Maps quantum operation names to their calibration data. NestedParams Nested dict defining the parameters required by GateImplementation classes. SINGLE_COMPONENTS_WITH_DRIVE_LOCUS_MAPPING Locus mapping name for mapping all components that have the drive operation defined. SINGLE_COMPONENTS_WITH_READOUT_LOCUS_MAPPING Locus mapping name for mapping all components that have the readout operation defined. SINGLE_COMPONENTS_WITH_FLUX_AWG_LOCUS_MAPPING Locus mapping name for mapping all components that have the flux operation defined and the flux controller has an AWG. PROBE_LINES_LOCUS_MAPPING Locus mapping name for mapping all probe lines. Functions get_waveform_parameters (wave[,\u00a0label_prefix]) Parameters that are required to initialize the given Waveform class. Classes CompositeCache Cache for CompositeGate TimeBoxes. CompositeGate Utility base class for creating gate implementations that are defined in terms of other gate implementations. CustomIQWaveforms Base class for GateImplementations using custom waveform definition with IQPulses. GateImplementation ABC for implementing quantum gates and other quantum operations using instruction schedules. SinglePulseGate Base class for GateImplementations that play a single pulse on a single channel. Inheritance previous CircuitOperationList next iqm.pulse.gate_implementation.Locus \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.playlist.hd_drag.evaluate_hd_drag_q_envelope",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.hd_drag.evaluate_hd_drag_q_envelope.html",
    "description": "Evaluate Q-envelope of HD DRAG given the coefficients of the derivative terms and the cosine terms. The Q-envelope is defined as \\(Q(t) = \\sum_{n=0}^{K} \\beta_{2n} g^{(2n+1)}(t)\\) , where \\(K\\) is the...",
    "content": "Evaluate Q-envelope of HD DRAG given the coefficients of the derivative terms and the cosine terms. The Q-envelope is defined as \\(Q(t) = \\sum_{n=0}^{K} \\beta_{2n} g^{(2n+1)}(t)\\) , where \\(K\\) is the number\nof suppressed frequency ranges, \\(\\{beta_{2n}\\}\\) are the coefficients of the derivative terms, and \\(g(t)\\) is the basis envelope. The pulse is assumed to start at time -pulse_duration/2 ,\nand end at time pulse_duration/2 . t_arr ( ndarray ) \u2013 Array of time points, at which the function is to be evaluated pulse_duration ( float ) \u2013 Pulse duration in the same units as t_arr derivative_coefs_arr ( ndarray ) \u2013 Coefficients of the derivatives cosine_coefs_arr ( ndarray ) \u2013 Coefficients of the cosine terms in the basis envelope Q-envelope of a HD DRAG pulse evaluated at t_arr ndarray previous iqm.pulse.playlist.hd_drag.evaluate_hd_drag_i_envelope next iqm.pulse.playlist.hd_drag.evaluate_nth_derivative_of_basis_envelope \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "ChannelProperties",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.channel.ChannelProperties.html",
    "description": "Bases: object Defines the properties of a control or measurement channel. All ZI instruments (HDAWG, UHFQA, SHFSG, SHFQA) can handle control pulses and waits where the\nnumber of samples is 32 + n * 16...",
    "content": "Bases: object Defines the properties of a control or measurement channel. All ZI instruments (HDAWG, UHFQA, SHFSG, SHFQA) can handle control pulses and waits where the\nnumber of samples is 32 + n * 16 , where n in {0, 1, 2, ...} . Module: iqm.pulse.playlist.channel Attributes blocks_component Whether content in this channel should block the entire component that it is associated with in the scheduling. is_iq HACK, True iff this is an IQ channel. is_virtual Virtual channels are only used on the frontend side during compilation and scheduling. sample_rate sample rate of the instrument responsible for the channel (in Hz) instruction_duration_granularity all instruction durations on this channel must be multiples of this granularity (in samples) instruction_duration_min all instruction durations on this channel must at least this long (in samples) compatible_instructions instruction types that are allowed on this channel Methods duration_to_int_samples Convert a time duration to an integer number of samples at the channel sample rate. duration_to_samples Convert a time duration to number of samples at the channel sample rate. duration_to_seconds Convert a time duration in samples at the channel sample rate to seconds. round_duration_to_granularity Round a time duration to the channel granularity. sample_rate ( float ) \u2013 instruction_duration_granularity ( int ) \u2013 instruction_duration_min ( int ) \u2013 compatible_instructions ( tuple [ type [ Instruction ] , ... ] ) \u2013 is_iq ( bool ) \u2013 is_virtual ( bool ) \u2013 blocks_component ( bool ) \u2013 sample rate of the instrument responsible for the channel (in Hz) all instruction durations on this channel must be multiples of this granularity (in samples) all instruction durations on this channel must at least this long (in samples) instruction types that are allowed on this channel HACK, True iff this is an IQ channel. TODO do better Virtual channels are only used on the frontend side during compilation and scheduling.\nThey are removed from the Schedule before it is sent to Station\nControl. For example, virtual drive channels of computational resonators. Whether content in this channel should block the entire component that it is associated with in the scheduling.\nTypically all physical channels should block their components, but certain virtual channels might not\nrequire this. Convert a time duration to number of samples at the channel sample rate. duration ( float ) \u2013 time duration in s duration in samples float Convert a time duration in samples at the channel sample rate to seconds. duration ( float ) \u2013 time duration in samples duration in seconds float Convert a time duration to an integer number of samples at the channel sample rate. duration must be sufficiently close to an integer number of samples, and\nthat number must be something the channel can handle. duration ( float ) \u2013 time duration in s message ( str ) \u2013 message identifying the duration we are testing check_min_samples ( bool ) \u2013 If True, check that the output is at least instruction_duration_min . duration as an integer number of samples ValueError \u2013 duration is not close to an integer number of samples, or is\n    otherwise unacceptable to the channel int Round a time duration to the channel granularity. duration ( float ) \u2013 time duration in s round_up ( bool ) \u2013 whether to round the durations up, or to the closest granularity force_min_duration ( bool ) \u2013 whether to force the duration to be at least instruction_duration_min duration rounded to channel granularity, in s float previous ChannelDescription next IQChannelConfig \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "instructions",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.html",
    "description": "Instructions for control instruments. Full path: iqm.pulse.playlist.instructions Classes AcquisitionMethod Describes a way to acquire readout data. Block Behave strictly as if outputting zero-valued s...",
    "content": "Instructions for control instruments. Full path: iqm.pulse.playlist.instructions Classes AcquisitionMethod Describes a way to acquire readout data. Block Behave strictly as if outputting zero-valued samples for the duration of the instruction. ComplexIntegration Perform a weighted integration of the IQ raw signal, resulting in a complex number. ConditionalInstruction Choice between multiple Instructions, depending on a condition. FluxPulse RealPulse representing a flux pulse. IQPulse Play an upconverted pulse that contains real in-phase and quadrature waveforms. Instruction Command that can be executed by the quantum computer on a control channel. MultiplexedIQPulse Instruction to simultaneously play multiple IQ pulses. ReadoutTrigger Instruction for playing a probe pulse and acquiring the associated readout results. RealPulse Play a real-valued pulse. ThresholdStateDiscrimination Perform a weighted integration of the IQ raw signal and compare the real part of the result against a threshold value, resulting in a boolean. TimeTrace Capture the raw IQ signal without integration. VirtualRZ Change the upconversion phase reference. Wait Behave as if outputting zero-valued samples for the duration of the instruction. Inheritance previous HdDragQ next AcquisitionMethod \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_CustomWaveformsSX",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_CustomWaveformsSX.html",
    "description": "Bases: PRX_SinglePulse_GateImplementation , CustomIQWaveforms ABC for PRX gates implemented using SX gate, hot-swappable waveforms and phase manipulation. If the rotation angle \\(\\theta = \\pi/2\\) , th...",
    "content": "Bases: PRX_SinglePulse_GateImplementation , CustomIQWaveforms ABC for PRX gates implemented using SX gate, hot-swappable waveforms and phase manipulation. If the rotation angle \\(\\theta = \\pi/2\\) , the timebox will consist of just the SX IQ pulse, with phase. If the rotation angle \\(\\theta = 0.0\\) , the timebox will consist of a single zero-amplitude pulse. If not, the timebox will consist of two IQ pulses, with phase. The formula for the PRX gate implemented using SX gates and z rotations is The fusing of z rotations to IQPulses is done inside the _call() method. All parameters in the pulse here is referring to the state of the qubits. Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). root_parameters Parameters independent of the of Waveforms. wave_i Waveform for the I channel. wave_q Waveform for the Q channel. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Parameters independent of the of Waveforms. Inheriting classes may override this to include parameters common\nto all such implementations. Convert pulses into timebox, via extra Z rotations. There are exceptions while using 0, pi/2 and pi rotation in angle, for calibration reason. The duration of the\ntimebox can be different. angle ( float ) \u2013 phase ( float ) \u2013 TimeBox Builds a single sqrt(X) pulse from the calibration data. amplitude_i ( float ) \u2013 amplitude_q ( float ) \u2013 n_samples ( int ) \u2013 IQPulse If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . previous PRX_CustomWaveforms next PRX_DRAGCosineRiseFall \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "default_gates",
    "url": "/iqm-pulse/api/iqm.pulse.gates.default_gates.html",
    "description": "This file defines the default quantum gates and operations for IQM\u2019s pulse control system Full path: iqm.pulse.gates.default_gates previous FluxPulseGate_TGSS_CRF next delay \u00a9 Copyright 2019-2025, IQM...",
    "content": "This file defines the default quantum gates and operations for IQM\u2019s pulse control system Full path: iqm.pulse.gates.default_gates previous FluxPulseGate_TGSS_CRF next delay \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_READOUT_LOCUS_MAPPING",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_READOUT_LOCUS_MAPPING.html",
    "description": "Locus mapping name for mapping all components that have the readout operation defined. previous iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_DRIVE_LOCUS_MAPPING next iqm.pulse.gate_implementat...",
    "content": "Locus mapping name for mapping all components that have the readout operation defined. previous iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_DRIVE_LOCUS_MAPPING next iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_FLUX_AWG_LOCUS_MAPPING \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.enums.XYGATE_UNITARIES",
    "url": "/iqm-pulse/api/iqm.pulse.gates.enums.XYGATE_UNITARIES.html",
    "description": "Mapping of XYGates to the corresponding SU(2) matrices previous enums next iqm.pulse.gates.enums.TWO_QUBIT_UNITARIES \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27....",
    "content": "Mapping of XYGates to the corresponding SU(2) matrices previous enums next iqm.pulse.gates.enums.TWO_QUBIT_UNITARIES \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "RZ_ACStarkShift_smoothConstant",
    "url": "/iqm-pulse/api/iqm.pulse.gates.rz.RZ_ACStarkShift_smoothConstant.html",
    "description": "Bases: Constant_PRX_with_smooth_rise_fall Constant AC stark pulse with cosine rise and fall padding.\nImplemented as a 3-instruction Schedule. Constructs an instance of the AC Stark pulse for the given...",
    "content": "Bases: Constant_PRX_with_smooth_rise_fall Constant AC stark pulse with cosine rise and fall padding.\nImplemented as a 3-instruction Schedule. Constructs an instance of the AC Stark pulse for the given locus. Module: iqm.pulse.gates.rz Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of CosineFall alias of Constant Required calibration data, may be nested alias of CosineRise True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous RZ_ACStarkShift_CosineRiseFall next RZ_PRX_Composite \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "VirtualRZ",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.VirtualRZ.html",
    "description": "Bases: Instruction Change the upconversion phase reference. The phase change can be done either by updating the phase of the local oscillator directly using\na hardware instruction, or algebraically by...",
    "content": "Bases: Instruction Change the upconversion phase reference. The phase change can be done either by updating the phase of the local oscillator directly using\na hardware instruction, or algebraically by incrementing IQPulse.phase of all the IQPulses\nfollowing the VirtualRZ instruction in the Segment . Module: iqm.pulse.playlist.instructions Attributes phase_increment Phase increment for the local oscillator of a drive channel, in radians. duration Time duration of the instruction. Methods duration ( int ) \u2013 phase_increment ( float ) \u2013 Phase increment for the local oscillator of a drive channel, in radians. previous TimeTrace next Wait \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.OpCalibrationDataTree",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.OpCalibrationDataTree.html",
    "description": "Maps quantum operation names to their calibration data. alias of dict [ str , dict [ str , dict [ tuple [ str , \u2026] | None , dict [ str , Any ]]]] previous iqm.pulse.gate_implementation.OCalibrationDat...",
    "content": "Maps quantum operation names to their calibration data. alias of dict [ str , dict [ str , dict [ tuple [ str , \u2026] | None , dict [ str , Any ]]]] previous iqm.pulse.gate_implementation.OCalibrationData next iqm.pulse.gate_implementation.NestedParams \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.playlist.channel.round_duration_to_granularity_samples",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.channel.round_duration_to_granularity_samples.html",
    "description": "Round a time duration to the least common multiple of the granularities of the given channels. Note Assumes that all the given control channels have the same sample rate. channels ( Iterable [ Channel...",
    "content": "Round a time duration to the least common multiple of the granularities of the given channels. Note Assumes that all the given control channels have the same sample rate. channels ( Iterable [ ChannelProperties ] ) \u2013 all these channels must be able to handle the rounded duration duration ( float ) \u2013 time duration in s round_up ( bool ) \u2013 whether to round the duration up, or to the closest granularity force_min_duration ( bool ) \u2013 whether to force the duration to be at least the largest instruction_duration_min of channels duration rounded to common channel granularity, in samples int previous iqm.pulse.playlist.channel.get_channel_properties_from_station_settings next ChannelConfiguration \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "hd_drag",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.hd_drag.html",
    "description": "Waveform definitions for a higher-derivative (HD) DRAG pulse based on Appendix B of [ 1 ] . Full path: iqm.pulse.playlist.hd_drag Module Attributes COSINE_COEFFICIENTS_DICT Pre-computed coefficients o...",
    "content": "Waveform definitions for a higher-derivative (HD) DRAG pulse based on Appendix B of [ 1 ] . Full path: iqm.pulse.playlist.hd_drag Module Attributes COSINE_COEFFICIENTS_DICT Pre-computed coefficients of the cosine terms in the basis envelope (0th derivative). Functions evaluate_hd_drag_i_envelope (t_arr,\u00a0...) Evaluate I-envelope of HD DRAG given the coefficients of the derivative terms and the cosine terms. evaluate_hd_drag_q_envelope (t_arr,\u00a0...) Evaluate Q-envelope of HD DRAG given the coefficients of the derivative terms and the cosine terms. evaluate_nth_derivative_of_basis_envelope (...) Evaluate nth derivative of the basis envelope for HD DRAG based on a cosine series. solve_cosine_coefs_for_hd_drag (...) Solve cosine coefficients of the basis envelope given the number of suppressed frequencies. solve_hd_drag_coefficients_from_suppressed_frequencies (...) Solve coefficients of the derivative terms in a HD DRAG pulse given pulse duration and frequencies to suppress. Classes HdDrag Base class for higher-derivative DRAG based on Eqs. HdDragI I-component of the higher derivative (HD) drag pulse. HdDragQ Q-component of the higher derivative (HD) drag pulse. Inheritance previous SuppressedPulse next iqm.pulse.playlist.hd_drag.COSINE_COEFFICIENTS_DICT \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "circuit_operations",
    "url": "/iqm-pulse/api/iqm.pulse.circuit_operations.html",
    "description": "Representing quantum circuits as lists of CircuitOperations. Full path: iqm.pulse.circuit_operations Functions get_unitary_from_circuit (circuit[,\u00a0table,\u00a0...]) Calculate the overall unitary implemente...",
    "content": "Representing quantum circuits as lists of CircuitOperations. Full path: iqm.pulse.circuit_operations Functions get_unitary_from_circuit (circuit[,\u00a0table,\u00a0...]) Calculate the overall unitary implemented by a sequence of CircuitOperations. get_unitary_from_op (op,\u00a0table,\u00a0qubits) Unitary matrix representing an operation within the context of the circuit. reorder (A,\u00a0perm) Permutes the order of the qubits in an n-qubit operator matrix. reshape_unitary (unitary,\u00a0indices,\u00a0n_qubits) Extend a unitary propagator to act on a larger system. Classes CircuitOperationList List of CircuitOperation objects representing a quantum circuit. Inheritance previous ScheduleBuilder next iqm.pulse.circuit_operations.get_unitary_from_circuit \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "HdDragQ",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.hd_drag.HdDragQ.html",
    "description": "Bases: HdDrag Q-component of the higher derivative (HD) drag pulse. The Q-component is defined according to Eq. (B1) of [ 1 ] , where \\(\\{\\beta_{2n}\\}\\) are the coefficients, and \\(g(t)\\) is the basis...",
    "content": "Bases: HdDrag Q-component of the higher derivative (HD) drag pulse. The Q-component is defined according to Eq. (B1) of [ 1 ] , where \\(\\{\\beta_{2n}\\}\\) are the coefficients, and \\(g(t)\\) is the basis envelope given by where \\(d_k\\) are pre-computed to ensure continuous derivatives up to order \\(2K + 1\\) , \\(t_p\\) denotes the pulse duration, and the pulse is defined across \\(t \\in (-t_p/2, t_p/2)\\) . The sampled pulse is always normalized to have a maximum value of slightly below 1.0. Module: iqm.pulse.playlist.hd_drag Attributes full_width  coefficients  suppressed_frequencies  compute_coefs_from_frequencies  n_samples Requested number of samples for the waveform. Methods n_samples ( int ) \u2013 full_width ( float ) \u2013 coefficients ( ndarray ) \u2013 suppressed_frequencies ( ndarray ) \u2013 compute_coefs_from_frequencies ( bool ) \u2013 center_offset ( float ) \u2013 Actually samples the waveform. sample_coords ( ndarray ) \u2013 coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) ndarray previous HdDragI next instructions \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.playlist.fast_drag.solve_fast_coefficients_for_given_weights_and_ranges",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.fast_drag.solve_fast_coefficients_for_given_weights_and_ranges.html",
    "description": "Solve for optimal coefficients of the basis functions in a FAST DRAG pulse. Computes the optimal coefficients \\(\\{c_n\\}_{n=1}^N\\) for a FAST DRAG pulse with \\(N\\) basis functions\nsuch that the pulse s...",
    "content": "Solve for optimal coefficients of the basis functions in a FAST DRAG pulse. Computes the optimal coefficients \\(\\{c_n\\}_{n=1}^N\\) for a FAST DRAG pulse with \\(N\\) basis functions\nsuch that the pulse spectrum is suppressed across the given frequency ranges according to the provided weights.\nThe computation is based on  Eqs. (A5), (A7), (A12) and (A13) of [ 1 ] . Note that this function essentially computes the mapping from frequency-domain parameters of a FAST DRAG pulse\nto time-domain parameters. The results must be cached to allow efficient generation of playlists containing a large number of pulses with\nsame parameters, as in RB. number_of_cosines ( int ) \u2013 Number of cosine basis functions used in the FAST DRAG pulse pulse_duration ( float ) \u2013 Pulse duration (in s) without zero padding. weights_tuple ( tuple [ float , ... ] ) \u2013 1d tuple of weights for each suppressed frequency interval used in the objective function suppressed_freq_ranges_2d_tuple ( tuple [ tuple [ float , ... ] , ... ] ) \u2013 2d tuple describing the frequency ranges (in Hz), over which we want to\nsuppress the Fourier transform. Each element of the outer tuple should be a tuple of two floats, the first\nsetting the starting frequency for the given range and the second setting the ending frequency for the\ngiven range. n_points_for_integration ( int ) \u2013 Number of points at which the integrand is evaluated for each interval. At least 50\npoints are recommended for the numerical approximation error to be low. Coefficients of the basis functions as a 1d array. ndarray previous iqm.pulse.playlist.fast_drag.fourier_transform_of_cos_basis_functions_as_tensor next FastDrag \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.NestedParams",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.NestedParams.html",
    "description": "Nested dict defining the parameters required by GateImplementation classes. alias of dict [ str , Parameter | Setting | dict ] previous iqm.pulse.gate_implementation.OpCalibrationDataTree next iqm.pul...",
    "content": "Nested dict defining the parameters required by GateImplementation classes. alias of dict [ str , Parameter | Setting | dict ] previous iqm.pulse.gate_implementation.OpCalibrationDataTree next iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_DRIVE_LOCUS_MAPPING \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.playlist.schedule.TOLERANCE",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.schedule.TOLERANCE.html",
    "description": "remove when COMP-1281 is done. TODO previous schedule next Nothing \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27....",
    "content": "remove when COMP-1281 is done. TODO previous schedule next Nothing \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.move.validate_move_instructions",
    "url": "/iqm-pulse/api/iqm.pulse.gates.move.validate_move_instructions.html",
    "description": "Circuit-level pass to prepare a circuit containing MOVE gates for compilation. Validates that circuit conforms to the MOVE gate constraints. instructions ( Iterable [ CircuitOperation ] ) \u2013 quantum ci...",
    "content": "Circuit-level pass to prepare a circuit containing MOVE gates for compilation. Validates that circuit conforms to the MOVE gate constraints. instructions ( Iterable [ CircuitOperation ] ) \u2013 quantum circuit to validate builder ( ScheduleBuilder ) \u2013 schedule builder, encapsulating information about the station validate_prx ( bool ) \u2013 whether to validate the circuit for PRX gates between MOVE sandwiches as well instructions , unmodified ValueError \u2013 Circuit does not conform to MOVE constraints. Iterable [ CircuitOperation ] previous iqm.pulse.gates.move.apply_move_gate_phase_corrections next MOVE_CRF_CRF \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "ThresholdStateDiscrimination",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.ThresholdStateDiscrimination.html",
    "description": "Bases: ComplexIntegration Perform a weighted integration of the IQ raw signal and compare the real part of the result\nagainst a threshold value, resulting in a boolean. Module: iqm.pulse.playlist.inst...",
    "content": "Bases: ComplexIntegration Perform a weighted integration of the IQ raw signal and compare the real part of the result\nagainst a threshold value, resulting in a boolean. Module: iqm.pulse.playlist.instructions Attributes feedback_signal_label In fast feedback routing, the transmitted signals are associated with this label. threshold The real part of the integration result is compared against this. weights Integration weights. label Identifier for the returned data, like QB1__readout.time_trace . delay_samples Delay from beginning of probe pulse to beginning of acquisition window, in samples. Methods label ( str ) \u2013 delay_samples ( int ) \u2013 weights ( IQPulse ) \u2013 threshold ( float ) \u2013 feedback_signal_label ( str ) \u2013 The real part of the integration result is compared against this. In fast feedback routing, the transmitted signals are associated with this label.\nConditionalInstructions whose \u201ccondition\u201d field has the string value of feedback_signal_label will receive the signal from this ThresholdStateDiscrimination.\nEmpty string (default) means the signal is not routed anywhere.\nThe same feedback_signal_label may not be used multiple times within the same ReadoutTrigger.\nThe same feedback_signal_label can be used in different ReadoutTriggers and different segments. previous RealPulse next TimeTrace \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.rz.get_unitary_rz",
    "url": "/iqm-pulse/api/iqm.pulse.gates.rz.get_unitary_rz.html",
    "description": "Unitary for an RZ gate. angle ( float ) \u2013 rotation angle (in rad) 2x2 unitary representing rz(angle) . ndarray previous rz next RZ_ACStarkShift \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. L...",
    "content": "Unitary for an RZ gate. angle ( float ) \u2013 rotation angle (in rad) 2x2 unitary representing rz(angle) . ndarray previous rz next RZ_ACStarkShift \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "flux_multiplexer",
    "url": "/iqm-pulse/api/iqm.pulse.gates.flux_multiplexer.html",
    "description": "GateImplementation for correcting flux crosstalk for a given set of flux-pulse TimeBoxes Full path: iqm.pulse.gates.flux_multiplexer Module Attributes TOLERANCE Tolerance for the maximum absolute valu...",
    "content": "GateImplementation for correcting flux crosstalk for a given set of flux-pulse TimeBoxes Full path: iqm.pulse.gates.flux_multiplexer Module Attributes TOLERANCE Tolerance for the maximum absolute value in a waveform for considering it to be uniformly zero. Classes FluxMultiplexer_SampleLinear Linear flux pulse multiplexed (user for correcting flux crosstalk). Inheritance previous XYGate next iqm.pulse.gates.flux_multiplexer.TOLERANCE \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "delay",
    "url": "/iqm-pulse/api/iqm.pulse.gates.delay.html",
    "description": "Force a delay between instructions on the control channels of specific locus components. Ideally the delay corresponds to an identity gate. In reality it of course allows decoherence\nto act on the qua...",
    "content": "Force a delay between instructions on the control channels of specific locus components. Ideally the delay corresponds to an identity gate. In reality it of course allows decoherence\nto act on the quantum state for some time. Full path: iqm.pulse.gates.delay Module Attributes DELAY_MAX_DURATION_SECONDS Maximum duration for individual Delay operations, in seconds. Classes Delay Applies a delay on the control channels of its locus components. Inheritance previous default_gates next iqm.pulse.gates.delay.DELAY_MAX_DURATION_SECONDS \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "ModulatedCosineRiseFall",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.waveforms.ModulatedCosineRiseFall.html",
    "description": "Bases: Waveform Modulated Cosine Rise Fall waveform. This waveform takes the waveform CosineRiseFall and modulates it with a cosine signal\nwhich then has parameters frequency and phase , additional to...",
    "content": "Bases: Waveform Modulated Cosine Rise Fall waveform. This waveform takes the waveform CosineRiseFall and modulates it with a cosine signal\nwhich then has parameters frequency and phase , additional to the parameters full_width , rise_time , and center_offset , see description of TruncatedGaussianSmoothedSquare for\nfurther details. full_width ( float ) \u2013 Full width of the pulse, >= 2 * rise_time . rise_time ( float ) \u2013 Duration of the sinusoidal rise (and fall) part of the waveform, >= 0. modulation_frequency ( float ) \u2013 Modulation frequency. phase ( float ) \u2013 Phase of the modulation. center_offset ( float ) \u2013 The waveform is centered around this sampling window coordinate.\nIf zero, the pulse is placed in the middle of the sampling window. n_samples ( int ) \u2013 Module: iqm.pulse.playlist.waveforms Attributes center_offset  modulation_frequency  phase  full_width  rise_time  n_samples Requested number of samples for the waveform. Methods non_timelike_attributes Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Actually samples the waveform. sample_coords ( ndarray ) \u2013 coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) ndarray Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Used to construct the parameters for the calibration data required by the waveform.\nBy default all the waveform attributes are \u201ctimelike\u201d (the unit for their calibration data is s).\nHowever, some waveform attributes can be dimensionless, e.g. the relative amplitudes in a sum of\nconsisting of multiple terms, or frequency-like (calibration data has the unit \u2018Hz\u2019).\nIf a Waveform subclass has non-timelike attributes, it needs to redefine this method. When the Waveform is constructed, all timelike calibration data is converted to units of the\nsampling window duration, and all frequency-like calibration data into units of inverse sampling\nwindow duration. dict [ str , str ] previous CosineRiseFallDerivative next Slepian \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_FLUX_AWG_LOCUS_MAPPING",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_FLUX_AWG_LOCUS_MAPPING.html",
    "description": "Locus mapping name for mapping all components that have the flux operation defined and the flux controller\nhas an AWG. previous iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_READOUT_LOCUS_MAPPI...",
    "content": "Locus mapping name for mapping all components that have the flux operation defined and the flux controller\nhas an AWG. previous iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_READOUT_LOCUS_MAPPING next iqm.pulse.gate_implementation.PROBE_LINES_LOCUS_MAPPING \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.playlist.channel.get_channel_properties",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.channel.get_channel_properties.html",
    "description": "Internal function to get channel properties. chip_topology ( ChipTopology ) \u2013 drive_controllers ( dict [ str , SettingNode ] ) \u2013 flux_controllers ( dict [ str , SettingNode ] ) \u2013 readout_controllers (...",
    "content": "Internal function to get channel properties. chip_topology ( ChipTopology ) \u2013 drive_controllers ( dict [ str , SettingNode ] ) \u2013 flux_controllers ( dict [ str , SettingNode ] ) \u2013 readout_controllers ( dict [ str , SettingNode ] ) \u2013 tuple [ dict [ str , ChannelProperties ], dict [ str , dict [ str , str ]]] previous channel next iqm.pulse.playlist.channel.get_channel_properties_from_station_settings \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Wait",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.Wait.html",
    "description": "Bases: Instruction Behave as if outputting zero-valued samples for the duration of the instruction. Used to idle QPU components. However, may be replaced with a dynamical decoupling sequence\nafter the...",
    "content": "Bases: Instruction Behave as if outputting zero-valued samples for the duration of the instruction. Used to idle QPU components. However, may be replaced with a dynamical decoupling sequence\nafter the scheduling step. If you want to make sure that this does not happen, use Block instead. Module: iqm.pulse.playlist.instructions Attributes duration Time duration of the instruction. Methods duration ( int ) \u2013 previous VirtualRZ next playlist \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "ScheduleBuilder",
    "url": "/iqm-pulse/api/iqm.pulse.builder.ScheduleBuilder.html",
    "description": "Bases: object Builds instruction schedules out of quantum circuits or individual quantum operations. Encapsulates known quantum ops, the calibration information for them, QPU components and their\ntopo...",
    "content": "Bases: object Builds instruction schedules out of quantum circuits or individual quantum operations. Encapsulates known quantum ops, the calibration information for them, QPU components and their\ntopology, and controller properties. op_table ( QuantumOpTable ) \u2013 definitions of known quantum ops calibration ( OpCalibrationDataTree ) \u2013 calibration data tree for the quantum ops chip_topology ( ChipTopology ) \u2013 Chip topology derived from the CHAD. channels ( dict [ str , ChannelProperties ] ) \u2013 mapping of controller names to the configurations of their channels component_channels ( dict [ str , dict [ str , str ] ] ) \u2013 Mapping from QPU component name to a mapping of ('drive', 'flux', 'readout') to the name of the control channel responsible for that function of the component. Module: iqm.pulse.builder Attributes composite_cache Cache for the CompositeGate TimeBoxes. Methods build_playlist Build a playlist from a number of instruction schedules. circuit_to_timebox Convert a quantum circuit to a TimeBox. get_calibration Calibration data for the given quantum operation, implementation and locus. get_control_channels Control channels that directly affect quantum operations at the given locus. get_drive_channel Drive channel for the given QPU component. get_flux_channel Flux channel for the given QPU component. get_implementation Provide an implementation for a quantum operation at a given locus. get_implementation_class Implementation class for the given operation. get_probe_channel Probe line channel for the probe line component belongs to. get_virtual_feedback_channel_for Get virtual feedback channel for feedback to a given AWG from a given probe line. get_virtual_feedback_channels All virtual feedback signal channels for the given QPU component. has_calibration Is there calibration data for the given quantum operation, implementation and locus? inject_calibration Inject new calibration data, changing self.calibration after the ScheduleBuilder initialisation. resolve_timebox Resolve a TimeBox. timebox_to_schedule Convert a TimeBox to a finished instruction schedule, ready for execution. timeboxes_to_front_padded_playlist Temporary helper function, for converting a sequence of TimeBoxes to a Playlist. timeboxes_to_playlist Convert a sequence of TimeBoxes to a Playlist. validate_calibration Check that the calibration data matches the known quantum operations. validate_quantum_circuit Validate a sequence of circuit operations constituting a quantum circuit. wait Utility method for applying Block instructions on every channel of the given locus. Cached GateImplementations. The tree has the same structure as OpCalibrationDataTree. Cache for the CompositeGate TimeBoxes. Flushed whenever ANY calibration data is injected into the builder. self.component_channels mapping inverted cached for scheduling algorithm performance. This mapping is\nused in the scheduling to determine the components to block based on their associated channels. Only\nblocking channels are included in this mapping, non-blocking channels (e.g. certain virtual channels) do not\nblock their components, just themselves. Cache the probe and non-probe channel names for the scheduling algorithm performance Whether to require scheduling of probe instructions in seconds instead of in samples. This can happen for two\nreasons: 1) the probe channel has a different sampling rate to the other channels (e.g. with UHFQA) or\n2) the probe channels have a different instruction granularity to some of the other channels (e.g. with\nmixed stations that have the RO device from a different vendor than some of the AWGs). Cache representative channel properties for a probe and a non-probe channel for the scheduling algorithm\nperformance. Inject new calibration data, changing self.calibration after the ScheduleBuilder initialisation. Invalidates the gate_implementation cache for the affected operations/implementations/loci. Also invalidates\nthe cache for any factorizable gate implementation, if any of its locus components was affected. partial_calibration ( dict [ str , dict [ str , dict [ tuple [ str , ... ] | None , dict [ str , Any ] ] ] ] ) \u2013 data to be injected. Must have the same structure as self.calibration but does not\nhave to contain all operations/implementations/loci/values. Only the parts of the data that are\nfound will be merged into self.calibration (including any None values). self._cache will\nbe invalidated for the found operations/implementations/loci and only if the new calibration data\nactually differs from the previous. None Check that the calibration data matches the known quantum operations. ValueError \u2013 there is something wrong with the calibration data None Drive channel for the given QPU component. component ( str ) \u2013 name of a QPU component Name of the drive channel for component , if it exists. KeyError \u2013 if component does not exist or does not have a drive channel str Flux channel for the given QPU component. See get_drive_channel() . component ( str ) \u2013 str Probe line channel for the probe line component belongs to. See get_drive_channel() . component ( str ) \u2013 str All virtual feedback signal channels for the given QPU component. A virtual feedback channel between a source and a destination exists if the station configuration allows it. component can be either the source or the destination of the signal. component ( str ) \u2013 name of a QPU component Names of the virtual channels. list [ str ] Get virtual feedback channel for feedback to a given AWG from a given probe line. awg_name ( str ) \u2013 name of the awg node that receives the feedback bit. feedback_qubit ( str ) \u2013 which qubit\u2019s measurement resulted in the feedback bit The virtual feedback channel name. ValueError \u2013 if the given AWG does not support fast feedback from the given probe line. str Control channel name for the given QPU component and operation. name of the channel KeyError \u2013 if component does not exist or does not have the operation component ( str ) \u2013 operation ( str ) \u2013 str Is there calibration data for the given quantum operation, implementation and locus? op_name ( str ) \u2013 name of the quantum operation impl_name ( str ) \u2013 name of the implementation locus ( tuple [ str , ... ] ) \u2013 locus of the operation True iff requested calibration data was found bool Calibration data for the given quantum operation, implementation and locus. op_name ( str ) \u2013 name of the quantum operation impl_name ( str ) \u2013 name of the implementation locus ( tuple [ str , ... ] ) \u2013 locus of the operation requested calibration data ValueError \u2013 requested calibration data was not found dict [ str , Any ] Control channels that directly affect quantum operations at the given locus. Includes the probe, drive and flux channels of the locus QPU components.\nDoes not include e.g. any neighboring coupler channels, these will have to be added\nseparately in the TimeBox resolution phase. Will only return channels that are known to exist, i.e. are found in ScheduleBuilder.channels . locus ( Iterable [ str ] ) \u2013 locus on which the operation acts names of the control channels that directly affect the operation tuple [ str , \u2026] Utility method for applying Block instructions on every channel of the given locus. The Block instructions guarantee the locus components to idle for the given duration,\nand cannot e.g. be replaced with e.g. dynamical decoupling sequences.\nThey are treated the same as any other TimeBox contents: Blocks on different channels remain aligned in time during scheduling. The actual waiting time on a particular channel may thus be >= duration ,\nif the other channels have less non-blocking space on either side. Note TODO For now, this method can round duration to the nearest value allowed by each\nchannel if requested. This is for the benefit of EXA sweeping over waiting durations.\nIn the future, EXA sweep generation should be responsible for doing the rounding. locus ( Iterable [ str ] ) \u2013 locus components that should experience the wait duration ( float ) \u2013 how long to wait (in seconds) rounding ( bool ) \u2013 Iff True, for each channel separately, duration will be rounded to the\nnearest value allowed by the granularity of that channel. The Waits will start\nsimultaneously. box containing Block instructions on every control channel of locus TimeBox Provide an implementation for a quantum operation at a given locus. op_name ( str ) \u2013 name of the quantum operation locus ( Iterable [ str ] ) \u2013 locus of the operation impl_name ( str | None ) \u2013 name of the implementation ( None means the implementation is chosen automatically\nusing the logic described below) strict_locus ( bool ) \u2013 iff False, for non-symmetric implementations of symmetric ops the locus order may\nbe changed if no calibration data is available for the requested locus order use_priority_order ( bool ) \u2013 Only has an effect if impl_name is None . Iff False , QuantumOp.get_default_implementation_for_locus() is used. Otherwise, the first implementation in\nthe priority order that has calibration data for locus is chosen. The priority order is as follows:\n1. The locus-specific priority defined in QuantumOp.defaults_for_locus[locus] if any.\n2. The global priority order defined in QuantumOp.implementations . priority_calibration ( dict [ str , Any ] | None ) \u2013 Calibration data from which to load the calibration instead of the common calibration\ndata in calibration . If no calibration is found for the given implementation or priority_calibration is None , the common calibration is used. Any non-empty\nvalues found in priority_calibration will be merged to the common calibration. Note:\nusing priority_calibration will prevent saving/loading via the cache. requested implementation ValueError \u2013 requested implementation could not be provided GateImplementation Find an implementation and locus for the given quantum operation instance compatible\nwith the calibration data. op ( QuantumOp ) \u2013 quantum operation impl_name ( str | None ) \u2013 Name of the implementation. None means use the highest-priority implementation for\nwhich we have calibration data. locus ( tuple [ str , ... ] ) \u2013 locus of the operation strict_locus ( bool ) \u2013 iff False, for non-symmetric implementations of symmetric ops the locus order may\nbe changed to an equivalent one if no calibration data is available for the requested locus order chosen implementation name, locus ValueError \u2013 requested implementation could not be found ValueError \u2013 requested implementation had no calibration data for this locus ValueError \u2013 no specific implementation was requested, but no known implementation had\n    calibration data for this locus tuple [ str , tuple [ str , \u2026]] Build a factory class for the given quantum operation, implementation and locus. The GateImplementations are built when they are first requested, and cached for later use. op ( QuantumOp ) \u2013 quantum operation impl_name ( str | None ) \u2013 Name of the implementation. None means use the highest-priority implementation for\nwhich we have calibration data. locus ( tuple [ str , ... ] ) \u2013 locus of the operation strict_locus ( bool ) \u2013 iff False, for non-symmetric implementations of symmetric ops the locus order may\nbe changed if no calibration data is available for the requested locus order priority_calibration ( dict [ str , Any ] | None ) \u2013 Calibration data from which to load the calibration instead of the common\ncalibration data. Priority calibration should be either a dict of the type OILCalibrationData ,\ni.e. containing the operation name, implementation name, and locus, or just a dict containing\nthe calibration data for the locus implied by the args op , impl_name and locus . requested implementation ValueError \u2013 requested implementation could not be provided or had no calibration data for this locus GateImplementation Implementation class for the given operation. op_name ( str ) \u2013 name of the quantum operation impl_name ( str | None ) \u2013 name of the implementation ( None means use the default implementation) requested implementation class type [ GateImplementation ] Validate a sequence of circuit operations constituting a quantum circuit. operations ( Iterable [ CircuitOperation ] ) \u2013 quantum circuit to be validated require_measurements ( bool ) \u2013 iff True the circuit must include at least one measurement operation ValueError \u2013 operations do not constitute a valid quantum circuit None Convert a quantum circuit to a TimeBox. circuit ( Iterable [ CircuitOperation ] ) \u2013 quantum circuit name ( str ) \u2013 name of the circuit scheduling_algorithm ( SchedulingAlgorithm ) \u2013 scheduling algorithm to be used in resolving the TimeBoxes. locus_mapping ( dict [ str , str ] | None ) \u2013 optional mapping of placeholder component names to the physical component names used\nwhile resolving the circuit into a TimeBox. unresolved TimeBox that implements circuit TimeBox Temporary helper function, for converting a sequence of TimeBoxes to a Playlist. Each individual TimeBox in boxes is resolved into a Schedule, and then\neach schedules is front-padded with Wait instructions on each channel\nsuch that the resulting Schedules have equal durations. This is required since\nfor now in Station Control the delay before the final measurement is the same for\nall the Schedules in a Playlist, and we do not wish to lose coherence waiting for\nthe measurement after each Schedule is done. TODO Once Station Control can handle measurements better, this method should be removed,\nand timeboxes_to_playlist() be used instead. boxes ( Iterable [ TimeBox ] ) \u2013 TimeBoxes to include in the playlist neighborhood ( int ) \u2013 During scheduling, block neighboring channels of the used components this far. By default,\nblocks only the defined locus components and any other components which have occupied channels. playlist that implements boxes Playlist Convert a sequence of TimeBoxes to a Playlist. Resolves the boxes, converts them to Schedules, removes unnecessary channels, and then packs\nthe Schedules into a Playlist. Assumes all the TimeBoxes refer to the same QPU and its control channels. boxes ( Iterable [ TimeBox ] ) \u2013 TimeBoxes to include in the playlist neighborhood ( int ) \u2013 During scheduling, block neighboring channels of the used components this far.\nThe default value ensures that quantum operations work as intended, assuming the station\nis properly calibrated. Higher values may help defend against crosstalk, at the expense\nof a longer instruction schedule and thus more decoherence. playlist that implements boxes Playlist Convert a TimeBox to a finished instruction schedule, ready for execution. Resolves the box, then converts the durations of the instructions in the schedule to samples\nat the channel sample_rate. box ( TimeBox ) \u2013 TimeBox to resolve neighborhood ( int ) \u2013 During scheduling, block neighboring channels of the used components this far.\nThe default value ensures that quantum operations work as intended, assuming the station\nis properly calibrated. Higher values may help defend against crosstalk, at the expense\nof a longer instruction schedule and thus more decoherence. finished schedule that implements box Schedule Finishes the instruction schedule. filters out zero-duration Blocks and Waits converts all spacer instructions used during scheduling to Waits merges consequent Waits removes channels that only have Waits in them This should be the final step of the schedule building process, after this the\nresulting Schedule can no longer be consistently extended with another (since\nall the spacer instructions are gone). schedule ( Schedule ) \u2013 schedule to finish finished copy of schedule Schedule Fuse long-distance (i.e. out-of-gate-locus) VirtualRZ corrections with the next drive pulse\nhappening after the FluxPulse they are correcting. schedule ( Schedule ) \u2013 Schedule Resolve a TimeBox. Resolves recursively each of the children of the box, and then concatenates the resulting\nSchedules into a new one using a specific scheduling strategy and algorithm. The supported algorithms are HARD_BOUNDARY , which treats each composite TimeBox as a solid rectangle (the\nlongest channel within defines the duration) and TETRIS , which packs the schedule as tightly as possible\n(solid instructions still cannot overlap) regardless of the TimeBox boundaries. Modifies box so that it becomes atomic, if it isn\u2019t already. box ( TimeBox ) \u2013 TimeBox to resolve neighborhood ( int ) \u2013 During scheduling, block control channels of neighboring QPU components this far\nfrom the locus. Values higher than 0 may help defend against crosstalk, at the expense\nof a longer instruction schedule and thus more decoherence. compute_neighborhood_hard_boundary ( bool ) \u2013 Whether to precompute the neighborhood components while resolving\na composite TimeBox in the HARD_BOUNDARY algorithm. Typically one does not want to do this on\nthe top layer composite TimeBox , since it would be unused. The algorithm sets this True on\nlower layers, where it improves the performance as the neighborhood components are needed in scheduling. instruction schedule that implements box Schedule Resolves a TimeBox using the HARD_BOUNDARY algorithm, which treats each composite TimeBox as a solid\nrectangle (the longest channel within defines the duration). box ( TimeBox ) \u2013 neighborhood ( int ) \u2013 compute_neighborhood ( bool ) \u2013 Schedule Computes and caches the blocking neighborhoods for HARD_BOUNDARY algorithm. box ( TimeBox ) \u2013 Atomic TimeBox whose neighborhood to compute. neighborhood ( int ) \u2013 Return QPU components this far from the locus. QPU components (plus maybe channels?) belonging the the given neighborhood of box . set [ str ] Resolves a TimeBox using the TETRIS algorithm, which packs the schedule as tightly as possible\n(solid instructions still cannot overlap) regardless of the TimeBox boundaries. box ( TimeBox ) \u2013 neighborhood ( int ) \u2013 Schedule Add additional blocked channels to the schedule, preventing their use during the schedule. In the idealized computational model we assume that in a (correctly calibrated) quantum computer\nthere is no effective interaction between QPU components (in the computational frame and subspace) while\na Wait instruction is acting on the flux channel of the coupler connecting those components\n(i.e., the coupler is idling).\nHence a QPU component experiences no effective evolution if Wait instructions are\nacting on its drive, flux and probe channels, and the flux channels of all its couplers. Of course, in reality the QPU will experience at least some decoherence during a Wait, and\npossibly some crosstalk.\nIn some applications, e.g. decoherence experiments, it is essential to Wait for a specific time,\nsince it\u2019s precisely the decoherence that we are interested in. However, if we are only interested in applying well-defined local quantum operations on specific\nloci, it is essential to shut down all unwanted dynamics by adding Block instructions on\ncontrol channels of the unused and neighboring channels.\nThey act like Waits (and are converted into Waits at the end of the scheduling), but are allowed\nto overlap in time, since we are only interested in blocking those channels for the duration of the\nquantum operation. schedule ( Schedule ) \u2013 instruction schedule to modify locus ( set [ str ] ) \u2013 information-carrying QPU components schedule is meant to operate on (does not include couplers) neighborhood ( int ) \u2013 How far should we block neighboring QPU components?\nZero means just the locus qubits, one means neighboring couplers, two means their neighboring\nqubits etc. schedule , with added Block instructions on all the neighbor channels,\nfor the duration of the schedule None Build a playlist from a number of instruction schedules. This involves compressing the schedules so that no duplicate information\nneeds to be transferred to Station Control. All virtual channels are dropped at this point. schedules ( Iterable [ Schedule ] ) \u2013 finished instruction schedules to include in the playlist finish_schedules ( bool ) \u2013 whether to finalise the schedules before building the playlist. Should be set True unless some process has already finalised them before calling this function. playlist containing the schedules ValueError \u2013 if the schedules contain channels with non-uniform sampling rates Playlist Create shortcut for self.get_implementation(<op_name>, \u2026) as self.<op_name>(\u2026) . If there is a name collision with another attribute in self , the shortcut method won\u2019t be added and\na warning is raised. op_name ( str ) \u2013 None previous CircuitOperation next circuit_operations \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "pulse",
    "url": "/iqm-pulse/api/iqm.pulse.html",
    "description": "Control pulses, gates and instruction schedules for quantum computers. Full path: iqm.pulse Subpackages and modules base_utils Base utility functions with no dependencies on other iqm.pulse modules. b...",
    "content": "Control pulses, gates and instruction schedules for quantum computers. Full path: iqm.pulse Subpackages and modules base_utils Base utility functions with no dependencies on other iqm.pulse modules. builder Tools for building instruction schedules. circuit_operations Representing quantum circuits as lists of CircuitOperations. gate_implementation Implementing abstract quantum operations as instruction schedules. gates Implementations of quantum gates. playlist Control pulses and instruction schedules for quantum computers. quantum_ops Quantum operations. scheduler Tools for composing instruction schedules in time. timebox Reserving QPU resources in instruction scheduling. utils Utility functions. validation Validation of playlists and instructions schedules. previous API Reference next base_utils \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.playlist.fast_drag.compute_matrix_of_summed_fourier_transform_inner_products",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.fast_drag.compute_matrix_of_summed_fourier_transform_inner_products.html",
    "description": "Evaluate matrix \\(A\\) defined in Eq. (5) of [ 1 ] . The matrix element \\(A_{nm}\\) is defined as where n,m are the row and column indices starting from 1 and extending to \\(N\\) denoting the\nnumber of b...",
    "content": "Evaluate matrix \\(A\\) defined in Eq. (5) of [ 1 ] . The matrix element \\(A_{nm}\\) is defined as where n,m are the row and column indices starting from 1 and extending to \\(N\\) denoting the\nnumber of basis functions, \\(f_{l,j}\\) and \\(f_{h,j}\\) denote the starting and ending frequency of the\nj\u2019th frequency range to suppress, \\(\\hat{g}_n(f)\\) denotes the Fourier transform of \\(g_n(f) = 1 -  \\cos(2 \\pi n t/t_p)\\) with \\(t_p\\) being the pulse duration. Importantly, the computations are fully vectorized for fast evaluation. n_arr ( ndarray ) \u2013 1d array containing indices of basis functions used in the series expansion,\ntypically ranging from 1 to N weights ( ndarray ) \u2013 1d array of weights corresponding to the suppressed frequency ranges suppressed_freq_ranges_2darr ( ndarray ) \u2013 2d array describing the frequency ranges (in Hz), over which we want to suppress\nthe Fourier transform. The array should have two columns, the first giving the starting frequency\nfor each range and the second giving the ending frequency for each range.\nNote that frequencies will be symmetrically suppressed around the center frequency. pulse_duration ( float ) \u2013 Pulse duration (in s) without zero padding. time_scaling_factor ( float ) \u2013 Scaling factor for time to avoid excessively large or small values in the matrix. Scaling\nfactor of frequency is obtained as the inverse. n_points_for_integration ( int ) \u2013 Number of points at which the integrand is evaluated for each interval. At least 50\npoints are recommended for the numerical approximation error to be low. 2d array representing the A matrix with dimensions (len(n_arr), len(n_arr)) ndarray previous fast_drag next iqm.pulse.playlist.fast_drag.evaluate_fast_drag_i_envelope \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "cz",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.html",
    "description": "Two-qubit controlled-Z (CZ) gate. The CZ gate flips the relative phase of the \\(|11\u27e9\\) state.\nIt can be represented by the unitary matrix Full path: iqm.pulse.gates.cz Classes CZ_CRF CZ gate using a C...",
    "content": "Two-qubit controlled-Z (CZ) gate. The CZ gate flips the relative phase of the \\(|11\u27e9\\) state.\nIt can be represented by the unitary matrix Full path: iqm.pulse.gates.cz Classes CZ_CRF CZ gate using a CosineRiseFall flux pulse on the coupler. CZ_CRF_ACStarkCRF Controlled-Z two-qubit gate. CZ_GaussianSmoothedSquare CZ gate using a GaussianSmoothedSquare flux pulse on the coupler. CZ_Slepian CZ gate using a Slepian flux pulse on the coupler. CZ_Slepian_ACStarkCRF Controlled-Z two-qubit gate. CZ_Slepian_CRF CZ gate using a Slepian flux pulse on the coupler and a CosineRiseFall flux pulse on the qubit. CZ_TruncatedGaussianSmoothedSquare CZ gate using a TruncatedGaussianSmoothedSquare flux pulse on the coupler. CouplerFluxPulseQubitACStarkPulseGate Base class for CZ gates with coupler flux pulse and a qubit AC Stark pulse. FluxPulseGate Discrete two locus component gate implemented using flux pulses, virtual RZs, and the interaction mediated by the coupler. FluxPulseGate_CRF_CRF CZ gate using a CosineRiseFall flux pulse on the coupler and on the qubit. FluxPulseGate_TGSS_CRF CZ gate using a TruncatedGaussianSmoothedSquare flux pulse on the coupler and a CosineRiseFall flux pulse on the qubit. Inheritance previous CCPRX_Composite_DRAGGaussian next CZ_CRF \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "enums",
    "url": "/iqm-pulse/api/iqm.pulse.gates.enums.html",
    "description": "Enumerations for representing a set of important one- and two-qubit gates. Full path: iqm.pulse.gates.enums Module Attributes XYGATE_UNITARIES Mapping of XYGates to the corresponding SU(2) matrices TW...",
    "content": "Enumerations for representing a set of important one- and two-qubit gates. Full path: iqm.pulse.gates.enums Module Attributes XYGATE_UNITARIES Mapping of XYGates to the corresponding SU(2) matrices TWO_QUBIT_UNITARIES Mapping of TwoQubitGates to the corresponding U(4) matrices Classes TwoQubitGate Enumerates a subset of two-qubit gates. XYGate Enumerate all single-qubit Clifford gates whose rotation axis is in the XY plane. Inheritance previous Delay next iqm.pulse.gates.enums.XYGATE_UNITARIES \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "ReadoutTrigger",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.ReadoutTrigger.html",
    "description": "Bases: Instruction Instruction for playing a probe pulse and acquiring the associated readout results. Module: iqm.pulse.playlist.instructions Attributes probe_pulse Probe pulse to play, usually a Mul...",
    "content": "Bases: Instruction Instruction for playing a probe pulse and acquiring the associated readout results. Module: iqm.pulse.playlist.instructions Attributes probe_pulse Probe pulse to play, usually a MultiplexedIQPulse. acquisitions Active readout acquisition methods associated with this trigger instance. duration Time duration of the instruction. Methods duration ( int ) \u2013 probe_pulse ( MultiplexedIQPulse ) \u2013 acquisitions ( tuple [ AcquisitionMethod , ... ] ) \u2013 Probe pulse to play, usually a MultiplexedIQPulse. Active readout acquisition methods associated with this trigger instance. previous MultiplexedIQPulse next RealPulse \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "SinglePulseGate",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.SinglePulseGate.html",
    "description": "Bases: GateImplementation Base class for GateImplementations that play a single pulse on a single channel. The pulse is created in _get_pulse() and the channel is specified in _get_pulse_channel() .\nT...",
    "content": "Bases: GateImplementation Base class for GateImplementations that play a single pulse on a single channel. The pulse is created in _get_pulse() and the channel is specified in _get_pulse_channel() .\nThe base class also implements a basic _call() method that just inserts the specified pulse into the specified\nchannel, and a method for computing the pulse\u2019s duration. All of these methods can be overridden in subclasses. Module: iqm.pulse.gate_implementation Attributes Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Return the channel for the pulse. The default is the drive channel for a single qubit locus. str Return pulse based on the provided calibration data. Instruction Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\nSubclasses can reimplement this method in case it makes sense in their context. float previous GateImplementation next gates \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "ABC_Constant_smooth",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.ABC_Constant_smooth.html",
    "description": "Bases: PRX_GateImplementation ABC class for creating gates with an arbitrarily long Constant pulses with smooth rise and fall.\nThis pulse creates a :\u2019Segment\u2019 consisting of three instructions : [rise_...",
    "content": "Bases: PRX_GateImplementation ABC class for creating gates with an arbitrarily long Constant pulses with smooth rise and fall.\nThis pulse creates a :\u2019Segment\u2019 consisting of three instructions : [rise_waveform, main_waveform, fall_waveform].\nThis class is created so that one can use middle waveform as a constant, thus enabling to use arbitrarily\nlong pulses, not limited by the awg memory. main_waveform: The middle part of the pulse, which should (but doesn\u2019t have to) be a Constant waveform\nrise_waveform: rise part of the pulse\nfall_waveform: fall part of the pulse\nchannel: Name of the drive channel on which the AC Stark pulse is played. Constructs an instance of the AC Stark pulse for the given locus. Module: iqm.pulse.gates.prx Attributes main_waveform  rise_waveform  fall_waveform  Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Phased x rotation gate. angle ( float ) \u2013 rotation angle (in radians) phase ( float ) \u2013 phase angle (in radians) boxed instruction schedule implementing the phased x rotation gate TimeBox Returns the main part pulse. Waveform is the same for both I and Q channels n_samples ( int ) \u2013 amplitude_i ( float ) \u2013 amplitude_q ( float ) \u2013 phase ( float ) \u2013 IQPulse Returns a rise pulse. n_samples ( int ) \u2013 amplitude_i ( float ) \u2013 amplitude_q ( float ) \u2013 IQPulse Returns a fall pulse n_samples ( int ) \u2013 amplitude_i ( float ) \u2013 amplitude_q ( float ) \u2013 IQPulse previous iqm.pulse.gates.prx.get_unitary_prx next Constant_PRX_with_smooth_rise_fall \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "GateImplementation",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.GateImplementation.html",
    "description": "Bases: ABC ABC for implementing quantum gates and other quantum operations using instruction schedules. There is a separate GateImplementation subclass for every implementation of every operation type...",
    "content": "Bases: ABC ABC for implementing quantum gates and other quantum operations using instruction schedules. There is a separate GateImplementation subclass for every implementation of every operation type.\nEach GateImplementation instance represents a particular locus for that implementation, and encapsulates\nthe calibration data it requires. All GateImplementation subclasses __init__ must have exactly the below arguments in order to be\nusable via ScheduleBuilder.get_implementation() . GateImplementations also have the __call__() method, which takes the operation parameters\n(e.g. rotation angles) as input, and returns a TimeBox instance which implements\nan instance of the operation at that locus. parent ( QuantumOp ) \u2013 Quantum operation this instance implements. name ( str ) \u2013 Name of the implementation provided by this instance. locus ( Locus ) \u2013 Locus the operation acts on. calibration_data ( OILCalibrationData ) \u2013 (Raw) calibration data for the (operation, implementation, locus) represented by this instance builder ( ScheduleBuilder ) \u2013 Schedule builder. Module: iqm.pulse.gate_implementation Attributes parameters Required calibration data, may be nested qualified_name Qualified name of the implementation. special_implementation Set to True if  the implementation is a special purpose implementation that should never get called in ScheduleBuilder.get_implementation unless explicitly requested via the impl_name argument. symmetric True iff the implementation is symmetric in its locus components. Methods build Utility method for constructing a GateImplementation with self.builder . convert_calibration_data Convert time-like items in the calibration data to fractions of the time duration of the gate. duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_custom_locus_mapping Get custom locus mapping for this GateImplementation. get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. get_parameters Calibration data tree the GateImplementation subclass expects for each locus. needs_calibration Whether the implementation needs calibration data to_timebox Wraps the given instruction schedule into an atomic/resolved timebox. True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. Required calibration data, may be nested Set to True if  the implementation is a special purpose implementation that should never get called in ScheduleBuilder.get_implementation unless explicitly requested via the impl_name argument. Qualified name of the implementation. Whether the implementation needs calibration data Returns True if the calibration dict must contain a node with keyed with\n<operation name>: <implementation name>: <appropriate locus> in order to use this implementation. bool The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox | list [ TimeBox ] Utility method for constructing a GateImplementation with self.builder . Inheriting classes may override this in order to add additional logic. op_name ( str ) \u2013 operation name locus ( tuple [ str , ... ] ) \u2013 locus the operation acts on impl_name ( str | None ) \u2013 implementation name. Uses the assigned default implementation if not specified. strict_locus ( bool ) \u2013 iff False, for non-symmetric implementations of symmetric ops the locus order may\nbe changed if no calibration data is available for the requested locus order Calibrated gate implementation. GateImplementation Wraps the given instruction schedule into an atomic/resolved timebox. schedule ( Schedule ) \u2013 TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\nSubclasses can reimplement this method in case it makes sense in their context. float Convert time-like items in the calibration data to fractions of the time duration of the gate. This is a convenience method for converting calibration data items involving time\ndurations measured in seconds into fractions of the duration of the gate. Values of items that are not measured in seconds or Hz are returned as is. Additionally, converts duration to channel samples and adds it in the converted\ncalibration data under the key \"n_samples\" , while the original \"duration\" key is removed. calibration_data ( OILCalibrationData ) \u2013 (subset of) calibration data for the gate/implementation/locus params ( NestedParams ) \u2013 (subset of) cls.parameters specifying the calibration_data items\nto convert and return channel_props ( ChannelProperties ) \u2013 used to convert \"duration\" from seconds into channel samples duration ( float | None ) \u2013 Time duration of the gate, in seconds. If None, calibration_data must have\nan item named \"duration\" , measured in seconds, which will be used instead. converted calibration_data items OILCalibrationData Calibration data tree the GateImplementation subclass expects for each locus. Helper method for EXA use. locus ( Iterable [ str ] ) \u2013 Locus component names to replace the wildcard character \"*\" in the calibration\nparameter names. One Setting will be generated for each component name in locus .\nIf there are no wildcard characters in cls.parameters , this argument has no effect. path ( Iterable [ str ] ) \u2013 parts of the dotted name for the root node, if any. EXA setting node describing the required calibration data for each locus.\nAll the Setting values are None . SettingNode Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \"<operation_name>.<implementation_name>\" . Inheriting classes may\noverride this for different behaviour. operation_name ( str ) \u2013 name of the quantum operation. implementation_name ( str ) \u2013 name of the implementation name of the locus mapping str Get custom locus mapping for this GateImplementation. This method can be used to return the locus mapping (wrt. to the given ChipTopology ) for this GateImplementation . Overriding this method allows a GateImplementation to be \u201cself-sufficient\u201d in the\nsense that it knows its own locus mapping. chip_topology ( ChipTopology ) \u2013 ChipTopology instance in which context to create the custom locus mapping. component_to_channels ( dict [ str , Iterable [ str ] ] ) \u2013 dict mapping QPU component names to an Iterable of channel operation names\navailable for this component (i.e. \u201creadout\u201d, \u201cdrive\u201d, \u201cflux\u201d). This info is often needed\nin building a locus mapping. Custom locus mapping for this GateImplementation or None if the gate implementation has no need for a custom locus mapping, otherwise the returned mapping should be like in ChipTopology.set_locus_mapping() custom locus mapping, otherwise the returned mapping should be like in ChipTopology.set_locus_mapping() dict [ tuple [ str , \u2026] | frozenset [ str ], tuple [ str , \u2026]] | None previous CustomIQWaveforms next SinglePulseGate \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.quantum_ops.QuantumOpTable",
    "url": "/iqm-pulse/api/iqm.pulse.quantum_ops.QuantumOpTable.html",
    "description": "Type for representing tables of known quantum operations, maps names of the ops to their definitions. alias of dict [ str , QuantumOp ] previous quantum_ops next iqm.pulse.quantum_ops.validate_locus_c...",
    "content": "Type for representing tables of known quantum operations, maps names of the ops to their definitions. alias of dict [ str , QuantumOp ] previous quantum_ops next iqm.pulse.quantum_ops.validate_locus_calibration \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_HdDrag",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_HdDrag.html",
    "description": "Bases: PRX_CustomWaveforms PRX gate, HD DRAG IQ pulse based on amplitude scaling See PRX_CustomWaveforms . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform i...",
    "content": "Bases: PRX_CustomWaveforms PRX gate, HD DRAG IQ pulse based on amplitude scaling See PRX_CustomWaveforms . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). parameters Required calibration data, may be nested Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . Required calibration data, may be nested alias of HdDragI alias of HdDragQ previous PRX_GateImplementation next PRX_HdDragSX \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.scheduler.NONSOLID",
    "url": "/iqm-pulse/api/iqm.pulse.scheduler.NONSOLID.html",
    "description": "Instructions that can be converted to Wait after scheduling. previous scheduler next iqm.pulse.scheduler.BLOCKING \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27....",
    "content": "Instructions that can be converted to Wait after scheduling. previous scheduler next iqm.pulse.scheduler.BLOCKING \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "schedule",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.schedule.html",
    "description": "Instruction schedules for controlling the instruments. Full path: iqm.pulse.playlist.schedule Module Attributes TOLERANCE remove when COMP-1281 is done. Classes Nothing Used to extend a control channe...",
    "content": "Instruction schedules for controlling the instruments. Full path: iqm.pulse.playlist.schedule Module Attributes TOLERANCE remove when COMP-1281 is done. Classes Nothing Used to extend a control channel in time, without blocking it, during scheduling. Schedule Set of synchronously executed AWG/readout programs that start on a single trigger. Segment Sequence of instructions, for a single channel. Inheritance previous playlist next iqm.pulse.playlist.schedule.TOLERANCE \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "waveforms",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.waveforms.html",
    "description": "Waveform definitions. This module defines some waveforms that don\u2019t have special serialization, and reimports\nwaveforms that do from iqm.models.playlist.waveforms .\nSee the link for documentation of w...",
    "content": "Waveform definitions. This module defines some waveforms that don\u2019t have special serialization, and reimports\nwaveforms that do from iqm.models.playlist.waveforms .\nSee the link for documentation of waveforms that don\u2019t appear here. Full path: iqm.pulse.playlist.waveforms Classes Chirp Linear chirp, defined as ChirpImag Imaginary part of the linear chirp, which sets the phase to $-pi/2$. Cosine Periodic sinusoidal waveform which defaults to cosine. CosineFall Cosine Rise waveform. CosineRise Cosine Rise waveform. CosineRiseFallDerivative Derivative of a waveform that has a sinusoidal rise and fall, and a constant part in between. ModulatedCosineRiseFall Modulated Cosine Rise Fall waveform. Slepian Slepian waveform, which minimizes non-adiabatic errors during a gate. Inheritance previous iqm.pulse.playlist.visualisation.base.inspect_playlist next Chirp \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "CompositeGate",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.CompositeGate.html",
    "description": "Bases: GateImplementation Utility base class for creating gate implementations that are defined in terms of other gate implementations. Gates can be implemented using other pre-existing gate implement...",
    "content": "Bases: GateImplementation Utility base class for creating gate implementations that are defined in terms of other gate implementations. Gates can be implemented using other pre-existing gate implementations by just utilizing the ScheduleBuilder in builder in the __call__() method (e.g. by calling self.builder.get_implementation(<some gate>, <some locus>) . In this way, any such \u201cmember gates\u201d will use\nthe common calibration that exists in builder . In order for a composite gate\nimplementation to be able to calibrate its member gates with different calibration values from the common\ncalibration, it needs to know what gates it considers as its \u201cmembers\u201d. This is what the CompositeGate ABC is for. Inheriting from this class and defining e.g. registered_gates = [\"prx\", \"cz\"] allows one to calibrate the\nmember operations (i.e. \"prx\" and \"cz\" in this example) inside this composite gate differently from the\ncommon calibration. However, if no specific calibration data is provided, the gate implementation will be calibrated\nwith the common calibration. Module: iqm.pulse.gate_implementation Attributes default_implementations Mapping from operation names to the designated default implementation of that operation. registered_gates Gates that can be calibrated separately from their common calibration existing in self.builder . Methods build Construct a member gate implementation. parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Gates that can be calibrated separately from their common calibration existing in self.builder . The gate\nnames should correspond to the keys in self.builder.op_table . Other gates besides the ones given here can\nalso be constructed via self.builder , but these will always use the common calibration. Mapping from operation names to the designated default implementation of that operation. Filling this attribute\nallows one to define a different default implementation from the common default in self.builder.op_table to\nbe used in he context of this composite gate. If an operation is not found in this dict as a key, this\nCompositeGate will use the common default as the default implementation for it. Construct a member gate implementation. If the gate op_name is registered, a specific calibration for it in the context of this CompositeGate\nwill be sought for from self.builder.calibration . If any (non-empty) calibration values are found in self.builder.calibration[self.name][op_name][<impl_name>] they will be merged to the common calibration\n(only non-empty values will be merged). If there are no values found, the\ncommon calibration will be used. op_name ( str ) \u2013 operation name locus ( tuple [ str , ... ] ) \u2013 locus the operation acts on impl_name ( str | None ) \u2013 Implementation name. If not given, uses the default implementation defined in the class instance\nif any, and otherwise the common default in self.builder.op_table strict_locus ( bool ) \u2013 iff False, for non-symmetric implementations of symmetric ops the locus order may\nbe changed if no calibration data is available for the requested locus order Calibrated gate implementation. GateImplementation previous CompositeCache next CustomIQWaveforms \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "barrier",
    "url": "/iqm-pulse/api/iqm.pulse.gates.barrier.html",
    "description": "Barrier metaoperation. The barrier is an n-qubit metaoperation that forces a specific temporal ordering on the quantum\noperations on different sides of it (the ones preceding the barrier are always ex...",
    "content": "Barrier metaoperation. The barrier is an n-qubit metaoperation that forces a specific temporal ordering on the quantum\noperations on different sides of it (the ones preceding the barrier are always executed first). Full path: iqm.pulse.gates.barrier Classes Barrier GateImplementation for the n-qudit barrier metaoperation. Inheritance previous iqm.pulse.gates.register_implementation next Barrier \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.get_waveform_parameters",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.get_waveform_parameters.html",
    "description": "Parameters that are required to initialize the given Waveform class. n_samples is handled separately since it is determined by the Instruction duration\nand channel sample rate, and thus is shared by a...",
    "content": "Parameters that are required to initialize the given Waveform class. n_samples is handled separately since it is determined by the Instruction duration\nand channel sample rate, and thus is shared by all the waveforms of the Instruction. wave ( type [ Waveform ] ) \u2013 waveform class label_prefix ( str ) \u2013 optional prefix for the parameter labels for providing additional information parameters of wave , in the format expected by GateImplementation.parameters . Waveform parameters\nthat have a defined default will be returned as Setting objects and those that do not have default\nas Parameter objects. dict [ str , Setting | Parameter] previous iqm.pulse.gate_implementation.PROBE_LINES_LOCUS_MAPPING next CompositeCache \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "ConditionalInstruction",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.ConditionalInstruction.html",
    "description": "Bases: Instruction Choice between multiple Instructions, depending on a condition. Module: iqm.pulse.playlist.instructions Attributes condition can be evaluated to an integer >= 0 outcomes maps possib...",
    "content": "Bases: Instruction Choice between multiple Instructions, depending on a condition. Module: iqm.pulse.playlist.instructions Attributes condition can be evaluated to an integer >= 0 outcomes maps possible outcomes of the condition to the corresponding instructions duration Time duration of the instruction. Methods get_child_instructions Returns all the child Instructions the Instruction contains. validate Validate the instruction attributes. duration ( int ) \u2013 condition ( str ) \u2013 outcomes ( tuple [ Instruction , ... ] ) \u2013 can be evaluated to an integer >= 0 maps possible outcomes of the condition to the corresponding instructions Validate the instruction attributes. ValueError \u2013 something about the instruction is not ok Returns all the child Instructions the Instruction contains. tuple [ Instruction , \u2026] previous ComplexIntegration next FluxPulse \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "TimeTrace",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.TimeTrace.html",
    "description": "Bases: AcquisitionMethod Capture the raw IQ signal without integration. Module: iqm.pulse.playlist.instructions Attributes duration_samples Length of the capture window, in samples. label Identifier f...",
    "content": "Bases: AcquisitionMethod Capture the raw IQ signal without integration. Module: iqm.pulse.playlist.instructions Attributes duration_samples Length of the capture window, in samples. label Identifier for the returned data, like QB1__readout.time_trace . delay_samples Delay from beginning of probe pulse to beginning of acquisition window, in samples. Methods label ( str ) \u2013 delay_samples ( int ) \u2013 duration_samples ( int ) \u2013 Length of the capture window, in samples. previous ThresholdStateDiscrimination next VirtualRZ \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.reset.RESET_MEASUREMENT_KEY",
    "url": "/iqm-pulse/api/iqm.pulse.gates.reset.RESET_MEASUREMENT_KEY.html",
    "description": "Constant measurement key for the measure operation required in the fast-feedback reset gate (the double underscore\nemphasizes the fact that this label should not be manually used in fast feedback). pr...",
    "content": "Constant measurement key for the measure operation required in the fast-feedback reset gate (the double underscore\nemphasizes the fact that this label should not be manually used in fast feedback). previous reset next iqm.pulse.gates.reset.RESET_FEEDBACK_KEY \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Nothing",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.schedule.Nothing.html",
    "description": "Bases: Instruction Used to extend a control channel in time, without blocking it, during scheduling. Can overlap with any other Instruction.\nConverted to a Wait instruction at the end of scheduling. M...",
    "content": "Bases: Instruction Used to extend a control channel in time, without blocking it, during scheduling. Can overlap with any other Instruction.\nConverted to a Wait instruction at the end of scheduling. Module: iqm.pulse.playlist.schedule Attributes duration Time duration of the instruction. Methods duration ( int ) \u2013 previous iqm.pulse.playlist.schedule.TOLERANCE next Schedule \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.validation.validate_channel",
    "url": "/iqm-pulse/api/iqm.pulse.validation.validate_channel.html",
    "description": "Validate a single channel. channel_description ( ChannelDescription ) \u2013 device_constraints ( ChannelProperties ) \u2013 None previous iqm.pulse.validation.validate_awg_and_schedule_compatibility next iqm.p...",
    "content": "Validate a single channel. channel_description ( ChannelDescription ) \u2013 device_constraints ( ChannelProperties ) \u2013 None previous iqm.pulse.validation.validate_awg_and_schedule_compatibility next iqm.pulse.validation.validate_instruction_and_wf_length \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Measure_CustomWaveforms",
    "url": "/iqm-pulse/api/iqm.pulse.gates.measure.Measure_CustomWaveforms.html",
    "description": "Bases: CustomIQWaveforms Base class for implementing dispersive measurement operations with custom probe pulse waveforms. You may define a measurement implementation that uses the Waveform instances S...",
    "content": "Bases: CustomIQWaveforms Base class for implementing dispersive measurement operations with custom probe pulse waveforms. You may define a measurement implementation that uses the Waveform instances Something and SomethingElse as the probe pulse waveforms in the\nI and Q channels as follows: class MyGate(Measure_CustomWaveforms, i_wave=Something, q_wave=SomethingElse) . The measure operation is factorizable, and its arity is 0, which together mean that it can operate\non loci of any dimensionality, but is calibrated only on single component loci. When the gate is constructed in the len(locus) > 1 , case (e.g. builder.get_implementation('measure', ('QB1', 'QB2', 'QB3'))() ) the resulting TimeBox is constructed from the calibrated single-component gates. For each measured component, the readout IQPulse will be modulated with the\nintermediate frequency (IF), computed as the difference between the readout\nfrequency of that component and the probe line center frequency, and offset in phase\nby the readout phase of the component. The measurement is implemented using a ReadoutTrigger instruction, with a duration set by the\nrequirements of the acquisition(s). Note that this is typically different from gates.measure.constant.{locus}.duration , which is the probe pulse duration. Module: iqm.pulse.gates.measure Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). root_parameters Parameters independent of the of Waveforms. wave_i Waveform for the I channel. wave_q Waveform for the Q channel. Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. probe_timebox Returns a \"naked\" probe timebox that supports convenient multiplexing through MultiplexedProbeTimeBox.__add__ . time_trace Returns a multiplexed simultaneous measurement with an additional time trace acquisition. parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Parameters independent of the of Waveforms. Inheriting classes may override this to include parameters common\nto all such implementations. Cache for probe_timebox() . Cache for time_trace() . Builds a probe pulse and an acquisition method using the calibration data. Subclasses may override this method if needed. waveform_params ( dict [ str , Any ] ) \u2013 root_params ( dict [ str , Any ] ) \u2013 if_freq ( float ) \u2013 tuple [ IQPulse , AcquisitionMethod ] Returns a \u201cnaked\u201d probe timebox that supports convenient multiplexing through MultiplexedProbeTimeBox.__add__ . This method can be used if the user wants to control the multiplexing explicitly. With two MultiplexedProbeTimeBox``es ``A and B the result A + B has all the ReadoutTrigger instructions\non each probe channel of A and B multiplexed together and played simultaneously. key ( str ) \u2013 The readout results generated on this trigger will be assigned to f\"{qubit}__{key}\" , where qubit goes over the component names in self.locus . If empty,\nthe key \u201creadout.result\u201d will be used to maintain backwards compatibility. feedback_key ( str ) \u2013 The signals generated by this measure operation are routed using this key for\nfast feedback purposes. See __call__() . do_acquisition ( bool ) \u2013 if False, no acquisitions are added. MultiplexedProbeTimeBox containing the ReadoutTrigger instruction. MultiplexedProbeTimeBox Returns a TimeBox containing the multiplexed simultaneous measurement. If len(self.locus) == 1 , the TimeBox contains the measurement for just that component, otherwise\nthe measurements of components that belong to the same probeline are multiplexed together. The returned TimeBox instances behave like any other TimeBox in scheduling and circuit\ngeneration. With measurement TimeBoxes A and B the result A + B first plays the ReadoutTrigger instructions of A and only then those of B in each probe channel. If the multiplexing features of MultiplexedProbeTimeBox are needed, the method probe_timebox() can be used. In scheduling, the returned TimeBox blocks the locus components and the probe\nlines they are associated with. key ( str ) \u2013 Readout results generated on this trigger will be assigned to the acquisition labels f\"{qubit}__{key}\" , where qubit goes over the component names in self.locus .\nIf empty, the key \"readout.result\" will be used to maintain backwards compatibility. feedback_key ( str ) \u2013 If the readout mode is \u201cthreshold\u201d, the results generated by this measure operation\nare routed using the label f\"{qubit}__{feedback_key}\" for fast feedback purposes.\nThe signals are picked up by ConditionalInstruction`s that have the same label. The default value ` \u201d\u201d`` means the signal is not routed anywhere. TODO: currently the HW does not\nsupport multiple feedback keys per drive channel, so the actual key used will be FEEDBACK_KEY whenever any non-empty key is inputted. When the HW is improved, the actual key the user inputs\nshould be passed. TimeBox containing the ReadoutTrigger instruction. TimeBox Returns a multiplexed simultaneous measurement with an additional time trace acquisition. The returned TimeBox is the same as the one returned by __call__() except the time trace\nacquisition is appended to the acquisitions of each probe line\u2019s ReadoutTrigger instruction. key ( str ) \u2013 Readout results generated on this trigger will be used to assigned to f\"{qubit}__{key}\" , where qubit goes over the component names in self.locus , whereas\nthe recorded time traces will be assigned to f\"{probe_line}__{key}\" where probe_line goes through all the probe lines associated with self.locus .\nIf empty, the key \"readout.result\" will be used for integrated results and the key \"readout.time_trace\" for the recorded time traces. acquisition_delay ( float | None ) \u2013 optionally override the time trace acquisition delay with this value (given in\nseconds). Does not affect the acqusition delays of the integrated measurements. acquisition_duration ( float | None ) \u2013 optionally override the time trace acquisition duration with this value (given in\nseconds). Does not affect the integration lengths of the integrated measurements. feedback_key ( str ) \u2013 The signals generated by the integration are routed using this label, prefixed by\nthe component. See __call__() . TimeBox containing the ReadoutTrigger instruction. TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\nSubclasses can reimplement this method in case it makes sense in their context. float Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \"<operation_name>.<implementation_name>\" . Inheriting classes may\noverride this for different behaviour. operation_name ( str ) \u2013 name of the quantum operation. implementation_name ( str ) \u2013 name of the implementation name of the locus mapping str If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . previous Measure_Constant_Qnd next ProbePulse_CustomWaveforms \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.playlist.fast_drag.evaluate_fast_drag_i_envelope",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.fast_drag.evaluate_fast_drag_i_envelope.html",
    "description": "Evaluate I-envelope of a FAST DRAG pulse for given coefficients. The I-envelope is defined as \\(I(t) = \\sum_{n=1}^{N} c_n [1 - (-1)^n \\cos(2\\pi n t/t_p)]\\) , where \\(N\\) is\nthe number of cosine terms ...",
    "content": "Evaluate I-envelope of a FAST DRAG pulse for given coefficients. The I-envelope is defined as \\(I(t) = \\sum_{n=1}^{N} c_n [1 - (-1)^n \\cos(2\\pi n t/t_p)]\\) , where \\(N\\) is\nthe number of cosine terms in the series, \\(\\{c_n\\}\\) are the coefficients, and the pulse is defined on the\ninterval \\(t \\in [-t_p/2, t_p/2]\\) . t_arr ( ndarray ) \u2013 Array of time points, at which the function is to be evaluated pulse_duration ( float ) \u2013 Pulse duration in the same units as t_arr coefficients ( ndarray ) \u2013 Coefficients of a FAST DRAG pulse I-envelope of a FAST DRAG pulse evaluated at t_arr ndarray previous iqm.pulse.playlist.fast_drag.compute_matrix_of_summed_fourier_transform_inner_products next iqm.pulse.playlist.fast_drag.evaluate_fast_drag_q_envelope \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Probe_Constant",
    "url": "/iqm-pulse/api/iqm.pulse.gates.measure.Probe_Constant.html",
    "description": "Bases: ProbePulse_CustomWaveforms_noIntegration Implementation of a single-qubit projective, dispersive measurement in the Z basis. Uses a constant probe pulse. Module: iqm.pulse.gates.measure Attribu...",
    "content": "Bases: ProbePulse_CustomWaveforms_noIntegration Implementation of a single-qubit projective, dispersive measurement in the Z basis. Uses a constant probe pulse. Module: iqm.pulse.gates.measure Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). parameters Required calibration data, may be nested Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . Required calibration data, may be nested alias of Constant alias of Constant previous ProbePulse_CustomWaveforms_noIntegration next move \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Delay",
    "url": "/iqm-pulse/api/iqm.pulse.gates.delay.Delay.html",
    "description": "Bases: GateImplementation Applies a delay on the control channels of its locus components. This operation applies Wait instructions on all the control channels of all its locus\ncomponents.  The durati...",
    "content": "Bases: GateImplementation Applies a delay on the control channels of its locus components. This operation applies Wait instructions on all the control channels of all its locus\ncomponents.  The duration of all the Waits is the same, and it is given as a parameter for the\noperation, rounded up to the nearest possible duration the hardware can handle. Note We can only guarantee that the delay is at least of the requested duration.  Also, when\nDelay is used in a quantum circuit, the delay between the preceding and following operations is\nagain at least the requested duration, but could be much more depending on the other operations\nin the circuit.  To see why, consider e.g. the circuit [CZ(a, b), Delay(1, a), Delay(10, b), CZ(a, b)] where a and b are qubits.\nIn this case the actual delay between the two CZ gates will be 10 time units rounded up to\nhardware granularity. Module: iqm.pulse.gates.delay Attributes symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. Delay instruction. duration ( float ) \u2013 Duration of the requested wait (in seconds). Will be rounded up to the nearest\nduration that the hardware enables, with the exception that a duration of zero will\ncause no waiting. However, as usual, during scheduling all channels the TimeBox is\nacting on will be extended to the duration of the longest channel in the TimeBox. TimeBox previous iqm.pulse.gates.delay.DELAY_MAX_DURATION_SECONDS next enums \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.base_utils.merge_dicts",
    "url": "/iqm-pulse/api/iqm.pulse.base_utils.merge_dicts.html",
    "description": "Merge two dictionaries recursively, leaving the originals unchanged. A ( dict ) \u2013 dictionary B ( dict ) \u2013 another dictionary merge_nones ( bool ) \u2013 whether to also merge None and empty Sized values fr...",
    "content": "Merge two dictionaries recursively, leaving the originals unchanged. A ( dict ) \u2013 dictionary B ( dict ) \u2013 another dictionary merge_nones ( bool ) \u2013 whether to also merge None and empty Sized values from B to A. copy of A, with the contents of B merged in (and taking precedence) recursively dict previous base_utils next builder \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Measure_Constant_Qnd",
    "url": "/iqm-pulse/api/iqm.pulse.gates.measure.Measure_Constant_Qnd.html",
    "description": "Bases: Measure_CustomWaveforms Implementation of a single-qubit projective, non quantum demolition, dispersive\nmeasurements in the Z basis. Uses a constant probe pulse. Module: iqm.pulse.gates.measure...",
    "content": "Bases: Measure_CustomWaveforms Implementation of a single-qubit projective, non quantum demolition, dispersive\nmeasurements in the Z basis. Uses a constant probe pulse. Module: iqm.pulse.gates.measure Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). parameters Required calibration data, may be nested Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . Required calibration data, may be nested alias of Constant alias of Constant previous Measure_Constant next Measure_CustomWaveforms \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "UGate",
    "url": "/iqm-pulse/api/iqm.pulse.gates.u.UGate.html",
    "description": "Bases: CompositeGate SU(2) gate implemented using PRX. Assumes the chosen PRX implementation uses resonant driving, and that the virtual RZ technique can be used. Module: iqm.pulse.gates.u Attributes ...",
    "content": "Bases: CompositeGate SU(2) gate implemented using PRX. Assumes the chosen PRX implementation uses resonant driving, and that the virtual RZ technique can be used. Module: iqm.pulse.gates.u Attributes registered_gates Gates that can be calibrated separately from their common calibration existing in self.builder . Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Gates that can be calibrated separately from their common calibration existing in self.builder . The gate\nnames should correspond to the keys in self.builder.op_table . Other gates besides the ones given here can\nalso be constructed via self.builder , but these will always use the common calibration. Convert pulses into timebox, via Euler decomposition. theta ( float ) \u2013 phi ( float ) \u2013 lam ( float ) \u2013 TimeBox previous iqm.pulse.gates.u.get_unitary_u next playlist \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.validation.validate_instruction_and_wf_length",
    "url": "/iqm-pulse/api/iqm.pulse.validation.validate_instruction_and_wf_length.html",
    "description": "Validate that instruction and waveform lengths match instruction ( Instruction ) \u2013 The IQPulse or RealPulse to be validated previous iqm.pulse.validation.validate_channel next iqm.pulse.validation.val...",
    "content": "Validate that instruction and waveform lengths match instruction ( Instruction ) \u2013 The IQPulse or RealPulse to be validated previous iqm.pulse.validation.validate_channel next iqm.pulse.validation.validate_playlist_compatibility \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "CZ_TruncatedGaussianSmoothedSquare",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.CZ_TruncatedGaussianSmoothedSquare.html",
    "description": "Bases: FluxPulseGate CZ gate using a TruncatedGaussianSmoothedSquare flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flu...",
    "content": "Bases: FluxPulseGate CZ gate using a TruncatedGaussianSmoothedSquare flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flux pulse Waveform to be played in the qubit flux AWG. symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of TruncatedGaussianSmoothedSquare Required calibration data, may be nested Flux pulse Waveform to be played in the qubit flux AWG. True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous CZ_Slepian_CRF next CouplerFluxPulseQubitACStarkPulseGate \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.playlist.hd_drag.solve_cosine_coefs_for_hd_drag",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.hd_drag.solve_cosine_coefs_for_hd_drag.html",
    "description": "Solve cosine coefficients of the basis envelope given the number of suppressed frequencies. The cosine coefficients \\(\\{d_k\\}_{k=1}^{K+1}\\) define the basis envelope as \\(g(t) = \\sum_{k=1}^{K+1} d_k (...",
    "content": "Solve cosine coefficients of the basis envelope given the number of suppressed frequencies. The cosine coefficients \\(\\{d_k\\}_{k=1}^{K+1}\\) define the basis envelope as \\(g(t) = \\sum_{k=1}^{K+1} d_k (1 - \\cos(2\\pi k t/t_p + k\\pi))\\) , where the pulse is defined on the\ninterval \\(t \\in [-t_p/2, t_p/2]\\) . number_of_suppressed_freqs ( int ) \u2013 Number of suppressed frequencies Coefficient array of length number_of_suppressed_freqs + 1 ndarray previous iqm.pulse.playlist.hd_drag.evaluate_nth_derivative_of_basis_envelope next iqm.pulse.playlist.hd_drag.solve_hd_drag_coefficients_from_suppressed_frequencies \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.builder.validate_quantum_circuit",
    "url": "/iqm-pulse/api/iqm.pulse.builder.validate_quantum_circuit.html",
    "description": "Validate a sequence of circuit operations constituting a quantum circuit. operations ( Iterable [ CircuitOperation ] ) \u2013 quantum circuit to be validated op_table ( dict [ str , QuantumOp ] ) \u2013 table c...",
    "content": "Validate a sequence of circuit operations constituting a quantum circuit. operations ( Iterable [ CircuitOperation ] ) \u2013 quantum circuit to be validated op_table ( dict [ str , QuantumOp ] ) \u2013 table containing allowed/calibrated quantum operations require_measurements ( bool ) \u2013 iff True the circuit must include at least one measurement operation ValueError \u2013 operations do not constitute a valid quantum circuit None previous iqm.pulse.builder.load_config next CircuitOperation \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "CosineFall",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.waveforms.CosineFall.html",
    "description": "Bases: Waveform Cosine Rise waveform. This waveform assumes that during its duration, the only thing occurring is signal falling to 0.\nThe waveform is made for pairing with \u2018Constant\u2019 waveform to enab...",
    "content": "Bases: Waveform Cosine Rise waveform. This waveform assumes that during its duration, the only thing occurring is signal falling to 0.\nThe waveform is made for pairing with \u2018Constant\u2019 waveform to enable arbitrarily long pulses with smooth fall part.\nThe fall time is equal to pulse duration. Module: iqm.pulse.playlist.waveforms Attributes n_samples Requested number of samples for the waveform. Methods n_samples ( int ) \u2013 Actually samples the waveform. sample_coords ( ndarray ) \u2013 coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) ndarray previous Cosine next CosineRise \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "u",
    "url": "/iqm-pulse/api/iqm.pulse.gates.u.html",
    "description": "Single-qubit SU(2) gate. The SU(2) matrix in the computational basis is parametrized using Euler angles: where the angles \\(\\theta\\) , \\(\\phi\\) and \\(\\lambda\\) are in radians. They are the angles of s...",
    "content": "Single-qubit SU(2) gate. The SU(2) matrix in the computational basis is parametrized using Euler angles: where the angles \\(\\theta\\) , \\(\\phi\\) and \\(\\lambda\\) are in radians. They are the angles of subsequent\nZ, Y and Z Euler rotations: It rotates the qubit state around an arbitrary axis on the Bloch sphere. Some common single-qubit gates expressed as U gates: References https://openqasm.com/language/gates.html#built-in-gates Full path: iqm.pulse.gates.u Functions get_unitary_u (theta,\u00a0phi,\u00a0lam) Unitary for an SU(2) gate. Classes UGate SU(2) gate implemented using PRX. Inheritance previous SXGate next iqm.pulse.gates.u.get_unitary_u \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "builder",
    "url": "/iqm-pulse/api/iqm.pulse.builder.html",
    "description": "Tools for building instruction schedules. Full path: iqm.pulse.builder Functions build_quantum_ops (ops) Builds the table of known quantum operations. load_config (path) Load quantum operation definit...",
    "content": "Tools for building instruction schedules. Full path: iqm.pulse.builder Functions build_quantum_ops (ops) Builds the table of known quantum operations. load_config (path) Load quantum operation definitions and calibration data from a YAML config file. validate_quantum_circuit (operations,\u00a0op_table,\u00a0*) Validate a sequence of circuit operations constituting a quantum circuit. Classes CircuitOperation Specific quantum operation applied on a specific part of the QPU, e.g. in a quantum circuit. ScheduleBuilder Builds instruction schedules out of quantum circuits or individual quantum operations. Inheritance previous iqm.pulse.base_utils.merge_dicts next iqm.pulse.builder.build_quantum_ops \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "FluxPulseGate",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.FluxPulseGate.html",
    "description": "Bases: GateImplementation Discrete two locus component gate implemented using flux pulses, virtual RZs,\nand the interaction mediated by the coupler. Does not take any parameters since it is discrete. ...",
    "content": "Bases: GateImplementation Discrete two locus component gate implemented using flux pulses, virtual RZs,\nand the interaction mediated by the coupler. Does not take any parameters since it is discrete. The two locus components of the gate must be coupled by a tunable coupler. Consists of a flux pulse for the coupler, and possibly another one for the first locus component,\nassumed to be a qubit, both with arbitrary waveforms, and virtual RZs on both components.\nInherit from this class and assign\nwaveforms to the coupler_wave and qubit_wave pulse slots to create a specific implementation. Can be used as a base class for both CZ and MOVE gate implementations. Note: the coupler and qubit pulses typically have the same duration (given in the calibration data), and in the\nspecial case of the duration being zero, the gate implementation will apply Block(0) instructions\nto all the channels where it would otherwise apply flux pulses or virtual z rotations. flux_pulses \u2013 mapping from flux channel name to its flux pulse rz \u2013 mapping from drive channel name to the virtual z rotation angle, in radians, that should be performed on it parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Module: iqm.pulse.gates.cz Attributes excluded_parameters Parameters names to be excluded from self.parameters . root_parameters Parameters shared by all FluxPulseGate classes. coupler_wave Flux pulse Waveform to be played in the coupler flux AWG. qubit_wave Flux pulse Waveform to be played in the qubit flux AWG. Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. Flux pulse Waveform to be played in the coupler flux AWG. Flux pulse Waveform to be played in the qubit flux AWG. Parameters shared by all FluxPulseGate classes. Inheriting classes may override this if there\u2019s\na need for additional calibration parameters. Parameters names to be excluded from self.parameters . Inheriting classes may override this if certain\nparameters are not wanted in that class (also parameters defined by the waveforms can be excluded). The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\nSubclasses can reimplement this method in case it makes sense in their context. float Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \"<operation_name>.<implementation_name>\" . Inheriting classes may\noverride this for different behaviour. operation_name ( str ) \u2013 name of the quantum operation. implementation_name ( str ) \u2013 name of the implementation name of the locus mapping str previous CouplerFluxPulseQubitACStarkPulseGate next FluxPulseGate_CRF_CRF \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "conditional",
    "url": "/iqm-pulse/api/iqm.pulse.gates.conditional.html",
    "description": "Classically controlled gates. Full path: iqm.pulse.gates.conditional Classes CCPRX_Composite Classically controlled PRX gate. CCPRX_Composite_DRAGCosineRiseFall Conditional drag_crf pulse. CCPRX_Compo...",
    "content": "Classically controlled gates. Full path: iqm.pulse.gates.conditional Classes CCPRX_Composite Classically controlled PRX gate. CCPRX_Composite_DRAGCosineRiseFall Conditional drag_crf pulse. CCPRX_Composite_DRAGGaussian Conditional drag_gaussian pulse. Inheritance previous Barrier next CCPRX_Composite \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.validation.PlaylistValidationError",
    "url": "/iqm-pulse/api/iqm.pulse.validation.PlaylistValidationError.html",
    "description": "Error raised when Playlist validation fails. previous iqm.pulse.validation.InvalidInstructionError next Changelog \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27....",
    "content": "Error raised when Playlist validation fails. previous iqm.pulse.validation.InvalidInstructionError next Changelog \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Barrier",
    "url": "/iqm-pulse/api/iqm.pulse.gates.barrier.Barrier.html",
    "description": "Bases: GateImplementation GateImplementation for the n-qudit barrier metaoperation. Returns a schedule with zero-duration Block metainstructions.\nWhen this is appended to another Schedule ,\nit causes ...",
    "content": "Bases: GateImplementation GateImplementation for the n-qudit barrier metaoperation. Returns a schedule with zero-duration Block metainstructions.\nWhen this is appended to another Schedule ,\nit causes the affected channels to be padded with Wait instructions to the same length,\nwhich in turn imposes a definite temporal order for the operations on different sides of\nthe barrier (the ones preceding it are always executed first). Note Assumes that all instructions involve either the drive, flux or probe channels of the locus QPU components. channels \u2013 channels related to the locus QPU components, to be blocked parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Module: iqm.pulse.gates.barrier Attributes symmetric True iff the implementation is symmetric in its locus components. Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\nSubclasses can reimplement this method in case it makes sense in their context. float previous barrier next conditional \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "timebox",
    "url": "/iqm-pulse/api/iqm.pulse.timebox.html",
    "description": "Reserving QPU resources in instruction scheduling. Full path: iqm.pulse.timebox Classes MultiplexedProbeTimeBox A TimeBox that contains any number of multiplexed readout pulses for probe channels. Sch...",
    "content": "Reserving QPU resources in instruction scheduling. Full path: iqm.pulse.timebox Classes MultiplexedProbeTimeBox A TimeBox that contains any number of multiplexed readout pulses for probe channels. SchedulingAlgorithm Algorithms for resolving composite TimeBoxes into atomic ones. SchedulingStrategy Different scheduling strategies for the contents of composite TimeBoxes. TimeBox Container for one or more instruction schedule fragments, to be scheduled according to a given strategy. Inheritance previous SegmentPointer next MultiplexedProbeTimeBox \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "base_utils",
    "url": "/iqm-pulse/api/iqm.pulse.base_utils.html",
    "description": "Base utility functions with no dependencies on other iqm.pulse modules. Full path: iqm.pulse.base_utils Functions merge_dicts (A,\u00a0B[,\u00a0path,\u00a0merge_nones]) Merge two dictionaries recursively, leaving th...",
    "content": "Base utility functions with no dependencies on other iqm.pulse modules. Full path: iqm.pulse.base_utils Functions merge_dicts (A,\u00a0B[,\u00a0path,\u00a0merge_nones]) Merge two dictionaries recursively, leaving the originals unchanged. previous pulse next iqm.pulse.base_utils.merge_dicts \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "playlist",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.playlist.html",
    "description": "Sequences of instruction schedules to execute. Full path: iqm.pulse.playlist.playlist previous Wait next schedule \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27....",
    "content": "Sequences of instruction schedules to execute. Full path: iqm.pulse.playlist.playlist previous Wait next schedule \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "RealPulse",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.RealPulse.html",
    "description": "Bases: Instruction Play a real-valued pulse. Module: iqm.pulse.playlist.instructions Attributes wave Shape of the pulse. scale Scaling factor for the waveform. duration Time duration of the instructio...",
    "content": "Bases: Instruction Play a real-valued pulse. Module: iqm.pulse.playlist.instructions Attributes wave Shape of the pulse. scale Scaling factor for the waveform. duration Time duration of the instruction. Methods get_waveforms Returns all the waveforms the Instruction contains. validate Validate the instruction attributes. duration ( int ) \u2013 wave ( Waveform ) \u2013 scale ( float ) \u2013 Shape of the pulse. Scaling factor for the waveform. Validate the instruction attributes. ValueError \u2013 something about the instruction is not ok Returns all the waveforms the Instruction contains. tuple [ Waveform , \u2026] previous ReadoutTrigger next ThresholdStateDiscrimination \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "ProbeChannelProperties",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.channel.ProbeChannelProperties.html",
    "description": "Bases: ChannelProperties ChannelProperties for probe line channels. Module: iqm.pulse.playlist.channel Attributes center_frequency Center frequency for the channel. integration_start_dead_time Dead ti...",
    "content": "Bases: ChannelProperties ChannelProperties for probe line channels. Module: iqm.pulse.playlist.channel Attributes center_frequency Center frequency for the channel. integration_start_dead_time Dead time samples before integration. integration_stop_dead_time Dead time samples after integration. sample_rate sample rate of the instrument responsible for the channel (in Hz) instruction_duration_granularity all instruction durations on this channel must be multiples of this granularity (in samples) instruction_duration_min all instruction durations on this channel must at least this long (in samples) compatible_instructions instruction types that are allowed on this channel Methods sample_rate ( float ) \u2013 instruction_duration_granularity ( int ) \u2013 instruction_duration_min ( int ) \u2013 compatible_instructions ( tuple [ type [ Instruction ] , ... ] ) \u2013 is_iq ( bool ) \u2013 is_virtual ( bool ) \u2013 blocks_component ( bool ) \u2013 center_frequency ( float ) \u2013 integration_start_dead_time ( int ) \u2013 integration_stop_dead_time ( int ) \u2013 Center frequency for the channel. Dead time samples before integration. Dead time samples after integration. previous IQChannelConfig next RealChannelConfig \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "FastDragQ",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.fast_drag.FastDragQ.html",
    "description": "Bases: FastDrag Q-component of the Fourier Ansatz Spectrum Tuning (FAST) drag pulse. The Q-envelope is defined as where \\(N\\) is the number of cosine terms in the series, \\(\\{c_n\\}\\) are the coefficie...",
    "content": "Bases: FastDrag Q-component of the Fourier Ansatz Spectrum Tuning (FAST) drag pulse. The Q-envelope is defined as where \\(N\\) is the number of cosine terms in the series, \\(\\{c_n\\}\\) are the coefficients, and\nthe pulse is defined on the interval \\(t \\in [-t_p/2, t_p/2]\\) . Module: iqm.pulse.playlist.fast_drag Attributes number_of_cos_terms  suppressed_interval_widths  weights  full_width  coefficients  suppressed_frequencies  compute_coefs_from_frequencies  n_samples Requested number of samples for the waveform. Methods n_samples ( int ) \u2013 full_width ( float ) \u2013 coefficients ( ndarray ) \u2013 suppressed_frequencies ( ndarray ) \u2013 compute_coefs_from_frequencies ( bool ) \u2013 number_of_cos_terms ( int ) \u2013 suppressed_interval_widths ( ndarray ) \u2013 weights ( ndarray ) \u2013 center_offset ( float ) \u2013 Actually samples the waveform. sample_coords ( ndarray ) \u2013 coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) ndarray previous FastDragI next SuppressedPulse \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.quantum_ops.validate_locus_calibration",
    "url": "/iqm-pulse/api/iqm.pulse.quantum_ops.validate_locus_calibration.html",
    "description": "Validates calibration for a particular gate implementation at particular locus. cal_data ( OILCalibrationData ) \u2013 Calibration data tree for the locus. impl ( type [ GateImplementation ] ) \u2013 GateImplem...",
    "content": "Validates calibration for a particular gate implementation at particular locus. cal_data ( OILCalibrationData ) \u2013 Calibration data tree for the locus. impl ( type [ GateImplementation ] ) \u2013 GateImplementation class that defines the required parameters. op ( QuantumOp ) \u2013 QuantumOp that impl implements. impl_name ( str ) \u2013 name of the implementation, for error messages. locus ( tuple [ str , ... ] ) \u2013 Locus of the operation ValueError \u2013 there is something wrong with the calibration data None previous iqm.pulse.quantum_ops.QuantumOpTable next iqm.pulse.quantum_ops.validate_op_calibration \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.scheduler.extend_schedule",
    "url": "/iqm-pulse/api/iqm.pulse.scheduler.extend_schedule.html",
    "description": "Extend a Schedule with another Schedule. Extends A with B , modifying both. The extension can add new channels to A . If B has a ragged left side, i.e. some of its channels begin with Nothing instruct...",
    "content": "Extend a Schedule with another Schedule. Extends A with B , modifying both. The extension can add new channels to A . If B has a ragged left side, i.e. some of its channels begin with Nothing instructions,\nthis algorithm will not always produce an optimally short schedule. A ( Schedule ) \u2013 schedule to be extended B ( Schedule ) \u2013 schedule to extend A with channels ( dict [ str , ChannelProperties ] ) \u2013 properties of the control channels TOL ( float ) \u2013 time durations equal or smaller than this are considered zero (in seconds) None previous iqm.pulse.scheduler.extend_hard_boundary_in_seconds next iqm.pulse.scheduler.extend_schedule_new \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "CouplerFluxPulseQubitACStarkPulseGate",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.CouplerFluxPulseQubitACStarkPulseGate.html",
    "description": "Bases: GateImplementation Base class for CZ gates with coupler flux pulse and a qubit AC Stark pulse. Analogous to the fast qubit flux pulse, the AC Stark pulse can tune the frequency of the qubit. To...",
    "content": "Bases: GateImplementation Base class for CZ gates with coupler flux pulse and a qubit AC Stark pulse. Analogous to the fast qubit flux pulse, the AC Stark pulse can tune the frequency of the qubit. Together with the\ncoupler flux pulse, this can implement a fast qubit pulsed CZ gate. Module: iqm.pulse.gates.cz Attributes excluded_parameters Parameters names to be excluded from self.parameters . root_parameters  coupler_wave Flux pulse Waveform to be played in the coupler flux AWG. qubit_drive_wave Qubit drive pulse waveform to be played in the qubit drive AWG. Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Flux pulse Waveform to be played in the coupler flux AWG. Qubit drive pulse waveform to be played in the qubit drive AWG. Parameters names to be excluded from self.parameters . Inheriting classes may override this if certain\nparameters are not wanted in that class (also parameters defined by the waveforms can be excluded). Returns an AC Stark pulse which consists of a modulated I and modulated Q waveform, where the Q quadrature\nhas an additional phase of -pi/2. phase ( float ) \u2013 amplitude ( float ) \u2013 phase_increment ( float ) \u2013 IQPulse The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\nSubclasses can reimplement this method in case it makes sense in their context. float Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \"<operation_name>.<implementation_name>\" . Inheriting classes may\noverride this for different behaviour. operation_name ( str ) \u2013 name of the quantum operation. implementation_name ( str ) \u2013 name of the implementation name of the locus mapping str previous CZ_TruncatedGaussianSmoothedSquare next FluxPulseGate \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.validation.validate_playlist_compatibility",
    "url": "/iqm-pulse/api/iqm.pulse.validation.validate_playlist_compatibility.html",
    "description": "Validates that the given playlist is compatible with the provided AWG data. The following requirements are validated as they are the same for all controllers. Playlist sample rate vs. Actual controlle...",
    "content": "Validates that the given playlist is compatible with the provided AWG data. The following requirements are validated as they are the same for all controllers. Playlist sample rate vs. Actual controller sample rate Instruction granularity with respect to the controllers granularity requirements Checks that no other than supported instructions are used. Checks that instruction length matches waveform length in IQ and RealPulse Checks that all instructions are at least the length of minimum number of samples Checks that Conditional instruction has the same duration in every child instruction playlist ( Playlist ) \u2013 instructions used on each channel, as well as the channel configurations device_constraints ( dict [ str , ChannelProperties ] ) \u2013 actual hardware limitations of the channels None previous iqm.pulse.validation.validate_instruction_and_wf_length next AWGScheduleValidationData \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "CustomIQWaveforms",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.CustomIQWaveforms.html",
    "description": "Bases: GateImplementation Base class for GateImplementations using custom waveform definition with IQPulses. The class contains logic for automatic gate calibration parameters handling for such gates ...",
    "content": "Bases: GateImplementation Base class for GateImplementations using custom waveform definition with IQPulses. The class contains logic for automatic gate calibration parameters handling for such gates (see the class\nattributes for more info). With given Waveform waveform definitions Something and SomethingElse ,\nan inheriting class may define the waveforms for the I and Q channels like this: class MyGate(CustomIQWaveforms, i_wave=Something, q_wave=SomethingElse) . Module: iqm.pulse.gate_implementation Attributes excluded_parameters Parameters names to be excluded from self.parameters . root_parameters Parameters independent of the of Waveforms. wave_i Waveform for the I channel. wave_q Waveform for the Q channel. dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Waveform for the I channel. Waveform for the Q channel. If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . Parameters independent of the of Waveforms. Inheriting classes may override this to include parameters common\nto all such implementations. Parameters names to be excluded from self.parameters . Inheriting classes may override this if certain\nparameters are not wanted in that class (also parameters defined by the waveforms can be excluded). previous CompositeGate next GateImplementation \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.utils.normalize_angle",
    "url": "/iqm-pulse/api/iqm.pulse.utils.normalize_angle.html",
    "description": "Normalize the given angle to (-pi, pi]. angle ( float ) \u2013 angle to normalize (in radians) angle normalized to (-pi, pi] float previous iqm.pulse.utils.map_waveform_param_types next iqm.pulse.utils.pha...",
    "content": "Normalize the given angle to (-pi, pi]. angle ( float ) \u2013 angle to normalize (in radians) angle normalized to (-pi, pi] float previous iqm.pulse.utils.map_waveform_param_types next iqm.pulse.utils.phase_transformation \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.scheduler.extend_hard_boundary_in_seconds",
    "url": "/iqm-pulse/api/iqm.pulse.scheduler.extend_hard_boundary_in_seconds.html",
    "description": "The same as extend_hard_boundary , but the scheduling is done in seconds. Used when the probe channel sampling rate differs from the other channels\u2019 rate.\nThe incoming schedules measure Instruction du...",
    "content": "The same as extend_hard_boundary , but the scheduling is done in seconds. Used when the probe channel sampling rate differs from the other channels\u2019 rate.\nThe incoming schedules measure Instruction durations in samples, but component_durations is in seconds. schedule ( Schedule ) \u2013 Schedule that should be extended with child_schedule . Modified in place. child_schedule ( Schedule ) \u2013 Child schedule to be added. child_components ( set [ str ] ) \u2013 Components (qubits, couplers, computational_resonators) that have at least\none channel in child_schedule . neighborhood_components ( set [ str ] ) \u2013 Components neighboring the child_components that should\nadditionally be blocked in the scheduling. component_durations ( dict [ str , float ] ) \u2013 Blocked durations for each component in schedule .\nThese act as the earliest starting points for new segment added to any of the channels\nof a given component, but will also block the component even if it has no occupied channels\nin the schedule yet or ever (e.g. a computational resonator).\nThe durations are in seconds. Modified in place. is_alap ( bool ) \u2013 Whether the scheduling strategy is ALAP (As Late As Possible). channel_properties ( dict [ str , ChannelProperties ] ) \u2013 Mapping from channel name to its properties (e.g. the sample rates\nand granularities). None previous iqm.pulse.scheduler.extend_hard_boundary next iqm.pulse.scheduler.extend_schedule \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.register_implementation",
    "url": "/iqm-pulse/api/iqm.pulse.gates.register_implementation.html",
    "description": "Register a new gate implementation, and a new gate (operation) if needed. operations ( dict [ str , QuantumOp ] ) \u2013 Known operations, mapping gate names to QuantumOps gate_name ( str ) \u2013 The gate name...",
    "content": "Register a new gate implementation, and a new gate (operation) if needed. operations ( dict [ str , QuantumOp ] ) \u2013 Known operations, mapping gate names to QuantumOps gate_name ( str ) \u2013 The gate name to register impl_name ( str ) \u2013 The name for this implementation impl_class ( type [ GateImplementation ] ) \u2013 The implementation class set_as_default ( bool ) \u2013 Whether to set as default implementation overwrite ( bool ) \u2013 If True, allows replacing existing operation/implementation quantum_op_specs ( QuantumOp | dict | None ) \u2013 Specs for creating new quantum op if needed ValueError \u2013 If operation/implementation exists and overwrite=False None previous iqm.pulse.gates.get_implementation_class next barrier \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.scheduler.extend_schedule_new",
    "url": "/iqm-pulse/api/iqm.pulse.scheduler.extend_schedule_new.html",
    "description": "Extend a Schedule with another Schedule. Extends A with B , modifying A . The extension can add new channels to A . Can also handle cases where B has a ragged left side, i.e. some of its channels begi...",
    "content": "Extend a Schedule with another Schedule. Extends A with B , modifying A . The extension can add new channels to A . Can also handle cases where B has a ragged left side, i.e. some of its channels begin\nwith Nothing instructions. A ( Schedule ) \u2013 schedule to be extended B ( Schedule ) \u2013 schedule to extend A with channels ( dict [ str , ChannelProperties ] ) \u2013 properties of the control channels TOL ( float ) \u2013 time durations equal or smaller than this are considered zero (in seconds) None previous iqm.pulse.scheduler.extend_schedule next SegmentPointer \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.u.get_unitary_u",
    "url": "/iqm-pulse/api/iqm.pulse.gates.u.get_unitary_u.html",
    "description": "Unitary for an SU(2) gate. See iqm.pulse.gates.u for the definition of the gate parameters. theta ( float ) \u2013 y rotation angle phi ( float ) \u2013 z rotation angle lam ( float ) \u2013 another z rotation angle...",
    "content": "Unitary for an SU(2) gate. See iqm.pulse.gates.u for the definition of the gate parameters. theta ( float ) \u2013 y rotation angle phi ( float ) \u2013 z rotation angle lam ( float ) \u2013 another z rotation angle 2x2 unitary representing u(theta, phi, lam) . ndarray previous u next UGate \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_DRAGCosineRiseFall",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_DRAGCosineRiseFall.html",
    "description": "Bases: PRX_CustomWaveforms PRX gate, DRAG / CosineRiseFall IQ pulse implementation. See PRX_CustomWaveforms . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel wavefor...",
    "content": "Bases: PRX_CustomWaveforms PRX gate, DRAG / CosineRiseFall IQ pulse implementation. See PRX_CustomWaveforms . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). excluded_parameters Parameters names to be excluded from self.parameters . parameters Required calibration data, may be nested Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Parameters names to be excluded from self.parameters . Inheriting classes may override this if certain\nparameters are not wanted in that class (also parameters defined by the waveforms can be excluded). Builds an x_pi pulse out of the calibration data. IQPulse If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . Required calibration data, may be nested alias of CosineRiseFall alias of CosineRiseFallDerivative previous PRX_CustomWaveformsSX next PRX_DRAGCosineRiseFallSX \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "Schedule",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.schedule.Schedule.html",
    "description": "Bases: object Set of synchronously executed AWG/readout programs that start on a single trigger. Consists of a number of channels , each containing a Segment of Instruction s for a specific controller...",
    "content": "Bases: object Set of synchronously executed AWG/readout programs that start on a single trigger. Consists of a number of channels , each containing a Segment of Instruction s for a specific controller.  For each channel, maps the channel name to\nits Segment of Instructions. Mutable. To make an independent copy, use copy() . contents ( Mapping [ str , Iterable [ Instruction ] ] | None ) \u2013 mapping from channel name to a list of Instructions for that channel duration ( int | None ) \u2013 Optional precomputed duration (in samples). In cases where the duration is known and performance\nis critical, the duration can be given in the constructor, allowing one to skip computing it. Module: iqm.pulse.playlist.schedule Attributes duration The maximum duration of the Schedule's channels, in samples. Methods add_channels Add new empty channels to the schedule. append Append a single Instruction to a specific channel in the Schedule. channels The channels occupied in self . cleanup Cleans up the schedule by removing things that do not affect the execution. copy Make an independent copy of the schedule. duration_in_seconds Schedule duration in seconds, taking into account the sample rates of the channels. extend Append given Instruction to a specific channel in the Schedule. front_pad Modifies the schedule in place by front-padding it with Wait instructions. front_pad_in_seconds Modifies the schedule in place by front-padding it with Wait instructions. has_content_in Returns True if self has content in any of the given channels, otherwise False . items Iterator over the schedule channel names and segments. pad_to_hard_box Pad channels in self to the maximum channel length found within with Wait instructions. pad_to_hard_box_in_seconds Pad channels in self to the maximum channel length (seconds) found within with Wait instructions. pprint Fixed-width character graphics representation of the Schedule. reverse Copy of the schedule with the order of the instructions in each channel reversed. reverse_hard_box Copy of the schedule with the order of the instructions in each channel reversed. validate Validate the contents of the schedule. The maximum duration of the Schedule\u2019s channels, in samples. Computed only when needed and cached for performance. Schedule duration in seconds, taking into account the sample rates of the channels. channel_properties ( dict [ str , ChannelProperties ] ) \u2013 channel properties. schedule duration (in seconds) float Fixed-width character graphics representation of the Schedule. Assumes the Instruction.duration s are in samples. time_unit ( int ) \u2013 unit of time represented by a single symbol (in samples) str Iterator over the schedule channel names and segments. The channels occupied in self . KeysView Make an independent copy of the schedule. Mutating the original must not affect the copy, or vice versa.\nInstructions are immutable, so they need not be copied. copy of the schedule Schedule Add new empty channels to the schedule. If a given channel (identified by its controller name) already exist in the schedule,\nit is unchanged. Modifies self . channel_names ( Iterable [ str ] ) \u2013 names of the controllers for which empty channels are added None Append a single Instruction to a specific channel in the Schedule. channel ( str ) \u2013 name of the channel to append the instruction to instruction ( Instruction ) \u2013 instruction to append None Append given Instruction to a specific channel in the Schedule. channel ( str ) \u2013 name of the channel to append the instructions to instructions ( Iterable [ Instruction ] ) \u2013 instructions to append None Modifies the schedule in place by front-padding it with Wait instructions. NOTE: this method cannot be used when there are variable sampling rates present in the schedule. In that\ncase, use the method front_pad_in_seconds . to_duration ( int ) \u2013 duration of the resulting schedule, in samples self , with the padding Schedule Modifies the schedule in place by front-padding it with Wait instructions. The new duration is given in seconds, and this method works also with variable sample rates. channel_properties ( dict [ str , ChannelProperties ] ) \u2013 channel properties. to_duration ( float ) \u2013 self , with the padding Pad channels in self to the maximum channel length found within with Wait instructions. The Wait``s are appended to the end of the segments. NOTE: this method cannot be used when there are variable sampling rates present in the schedule. In that case, use the method ``pad_to_hard_box_in_seconds . None Pad channels in self to the maximum channel length (seconds) found within with Wait instructions. The Waits are appended to the end of the segments. The segment durations are compared in seconds, so this\nmethod works in the case of variable sampling rates as well. The padding is added to a channel only if the\ndifference between the channel\u2019s duration and the maximum duration is larger than the smallest possible\ninstruction duration for that channel. channel_properties ( dict [ str , ChannelProperties ] ) \u2013 channel properties (containing the sampling rates and granularities). None Copy of the schedule with the order of the instructions in each channel reversed. NOTE: this method cannot be used when there are variable sampling rates present in the schedule. To preserve synchronization of the channels, the channels are first rear-padded\nwith Nothing instructions. Schedule Copy of the schedule with the order of the instructions in each channel reversed. No additional time-synchronisation logic is implemented, so this method will break the synchronisation\nif self is not a schedule with matching durations in all segments. Schedule Cleans up the schedule by removing things that do not affect the execution. Removes empty channels, and channels that only have idling instructions. Modifies self . Schedule Validate the contents of the schedule. path ( tuple [ str , ... ] ) \u2013 None Returns True if self has content in any of the given channels, otherwise False . channel_names ( Iterable [ str ] ) \u2013 bool previous Nothing next Segment \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.playlist.channel.get_channel_properties_from_station_settings",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.channel.get_channel_properties_from_station_settings.html",
    "description": "Get channel properties from Station Control controller settings following the standard convention. settings ( SettingNode ) \u2013 Flat tree of all controllers. chip_topology ( ChipTopology ) \u2013 Chip topolo...",
    "content": "Get channel properties from Station Control controller settings following the standard convention. settings ( SettingNode ) \u2013 Flat tree of all controllers. chip_topology ( ChipTopology ) \u2013 Chip topology. mapping from channel name to its properties\ncomponent_to_channel: mapping from chip component to function name to channel name. channel_properties previous iqm.pulse.playlist.channel.get_channel_properties next iqm.pulse.playlist.channel.round_duration_to_granularity_samples \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.circuit_operations.get_unitary_from_op",
    "url": "/iqm-pulse/api/iqm.pulse.circuit_operations.get_unitary_from_op.html",
    "description": "Unitary matrix representing an operation within the context of the circuit. First, fetches the unitary corresponding to the correct operation from the QuantumOpTable. If that unitary\nis a function, ge...",
    "content": "Unitary matrix representing an operation within the context of the circuit. First, fetches the unitary corresponding to the correct operation from the QuantumOpTable. If that unitary\nis a function, gets the matrix by calling the function with values of quantum operation params stored\nin the operation. Checks whether the size of the unitary is correct. Then, optionally extends that unitary to act\non the Hilbert space of the entire circuit. op ( CircuitOperation ) \u2013 quantum operation instance table ( dict [ str , QuantumOp ] ) \u2013 registered quantum operations qubits ( list [ str ] ) \u2013 qubits of the whole circuit, in big-endian order Unitary matrix representing op on the Hilbert space of the circuit. ndarray previous iqm.pulse.circuit_operations.get_unitary_from_circuit next iqm.pulse.circuit_operations.reorder \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.playlist.hd_drag.evaluate_nth_derivative_of_basis_envelope",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.hd_drag.evaluate_nth_derivative_of_basis_envelope.html",
    "description": "Evaluate nth derivative of the basis envelope for HD DRAG based on a cosine series. The basis envelope is given by \\(g(t) = \\sum_{k=1}^{K+1} d_k (1 - \\cos(2\\pi k t/t_p + k\\pi))\\) , where the\npulse is ...",
    "content": "Evaluate nth derivative of the basis envelope for HD DRAG based on a cosine series. The basis envelope is given by \\(g(t) = \\sum_{k=1}^{K+1} d_k (1 - \\cos(2\\pi k t/t_p + k\\pi))\\) , where the\npulse is defined on the interval \\(t \\in [-t_p/2, t_p/2]\\) . The returned derivatives are normalized\nvia multiplication by \\(((t_p/(2\\pi))^n\\) , where \\(n\\) is the order of the derivative. t_arr ( ndarray ) \u2013 Array of time points, at which the function is to be evaluated pulse_duration ( float ) \u2013 Pulse duration in the same units as t_arr cosine_coefs_arr ( ndarray ) \u2013 Coefficients of the cosine terms in the basis envelope n ( int ) \u2013 order of derivative Array containing the nth derivative of the basis envelope evaluated at t_arr ndarray previous iqm.pulse.playlist.hd_drag.evaluate_hd_drag_q_envelope next iqm.pulse.playlist.hd_drag.solve_cosine_coefs_for_hd_drag \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "XYGate",
    "url": "/iqm-pulse/api/iqm.pulse.gates.enums.XYGate.html",
    "description": "Bases: IntEnum Enumerate all single-qubit Clifford gates whose rotation axis is in the XY plane. Members of this enum can be mapped to the corresponding unitary propagator using XYGATE_UNITARIES . Onl...",
    "content": "Bases: IntEnum Enumerate all single-qubit Clifford gates whose rotation axis is in the XY plane. Members of this enum can be mapped to the corresponding unitary propagator using XYGATE_UNITARIES . Only used in the tomography experiments. Module: iqm.pulse.gates.enums Attributes IDENTITY  X_90  X_180  X_M90  Y_90  Y_180  Y_M90  Methods previous TwoQubitGate next flux_multiplexer \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "CZ_Slepian_ACStarkCRF",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.CZ_Slepian_ACStarkCRF.html",
    "description": "Bases: CouplerFluxPulseQubitACStarkPulseGate Controlled-Z two-qubit gate. CZ gate implemented using a slepian flux pulse for the coupler and a modulated cosine rise fall (CRF) AC Stark\npulse on one qu...",
    "content": "Bases: CouplerFluxPulseQubitACStarkPulseGate Controlled-Z two-qubit gate. CZ gate implemented using a slepian flux pulse for the coupler and a modulated cosine rise fall (CRF) AC Stark\npulse on one qubit. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of Slepian Required calibration data, may be nested alias of ModulatedCosineRiseFall True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous CZ_Slepian next CZ_Slepian_CRF \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.quantum_ops.validate_op_calibration",
    "url": "/iqm-pulse/api/iqm.pulse.quantum_ops.validate_op_calibration.html",
    "description": "Validates quantum operation calibration data against the known quantum operations. NOTE: calibration data parameters that have a defined default value are not required to be in the calibration data. c...",
    "content": "Validates quantum operation calibration data against the known quantum operations. NOTE: calibration data parameters that have a defined default value are not required to be in the calibration data. calibration ( OpCalibrationDataTree ) \u2013 quantum operation calibration data tree to validate ops ( QuantumOpTable ) \u2013 known quantum operations and their implementations ValueError \u2013 there is something wrong with the calibration data None previous iqm.pulse.quantum_ops.validate_locus_calibration next QuantumOp \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.circuit_operations.reshape_unitary",
    "url": "/iqm-pulse/api/iqm.pulse.circuit_operations.reshape_unitary.html",
    "description": "Extend a unitary propagator to act on a larger system. Given a unitary matrix acting on N qubits, indices of N qubits in a larger Hilbert space, and the number\nof qubits in that Hilbert space, calcula...",
    "content": "Extend a unitary propagator to act on a larger system. Given a unitary matrix acting on N qubits, indices of N qubits in a larger Hilbert space, and the number\nof qubits in that Hilbert space, calculate a unitary acting on the larger Hilbert space, which acts as\nthe given unitary on the N selected qubits and as identity on the others. unitary ( tuple [ tuple [ float , ... ] , ... ] ) \u2013 original unitary as a nested tuple for hashing & caching purposes. indices ( tuple [ int , ... ] ) \u2013 qubit indices in the larger Hilbert space, all in range(num_qubits) n_qubits ( int ) \u2013 number of qubits in the larger Hilbert space Unitary matrix acting as unitary on the selected qubits in the larger Hilbert space. ndarray previous iqm.pulse.circuit_operations.reorder next CircuitOperationList \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_ModulatedDRAGCosineRiseFall",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_ModulatedDRAGCosineRiseFall.html",
    "description": "Bases: PRX_ModulatedCustomWaveForms Modulated PRX pulse with cosine rise fall waveform Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depe...",
    "content": "Bases: PRX_ModulatedCustomWaveForms Modulated PRX pulse with cosine rise fall waveform Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). excluded_parameters Parameters names to be excluded from self.parameters . parameters Required calibration data, may be nested Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . Required calibration data, may be nested alias of CosineRiseFall alias of CosineRiseFallDerivative Parameters names to be excluded from self.parameters . Inheriting classes may override this if certain\nparameters are not wanted in that class (also parameters defined by the waveforms can be excluded). Return the IQPulse with modulated arbitrary waveform based on the calibration data. IQPulse previous PRX_ModulatedCustomWaveForms next PRX_SinglePulse_GateImplementation \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.reset.RESET_FEEDBACK_KEY",
    "url": "/iqm-pulse/api/iqm.pulse.gates.reset.RESET_FEEDBACK_KEY.html",
    "description": "The feedback key used in fast-feedback reset gate (the double underscore emphasizes the fact that this label should\nnot be manually used in fast feedback). previous iqm.pulse.gates.reset.RESET_MEASURE...",
    "content": "The feedback key used in fast-feedback reset gate (the double underscore emphasizes the fact that this label should\nnot be manually used in fast feedback). previous iqm.pulse.gates.reset.RESET_MEASUREMENT_KEY next Reset_Conditional \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "FluxPulseGate_TGSS_CRF",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.FluxPulseGate_TGSS_CRF.html",
    "description": "Bases: FluxPulseGate CZ gate using a TruncatedGaussianSmoothedSquare flux pulse on the coupler and a CosineRiseFall\nflux pulse on the qubit. Module: iqm.pulse.gates.cz Attributes parameters Required c...",
    "content": "Bases: FluxPulseGate CZ gate using a TruncatedGaussianSmoothedSquare flux pulse on the coupler and a CosineRiseFall\nflux pulse on the qubit. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of TruncatedGaussianSmoothedSquare Required calibration data, may be nested alias of CosineRiseFall True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous FluxPulseGate_CRF_CRF next default_gates \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_DRIVE_LOCUS_MAPPING",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_DRIVE_LOCUS_MAPPING.html",
    "description": "Locus mapping name for mapping all components that have the drive operation defined. previous iqm.pulse.gate_implementation.NestedParams next iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_READO...",
    "content": "Locus mapping name for mapping all components that have the drive operation defined. previous iqm.pulse.gate_implementation.NestedParams next iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_READOUT_LOCUS_MAPPING \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "AcquisitionMethod",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.AcquisitionMethod.html",
    "description": "Bases: object Describes a way to acquire readout data. Module: iqm.pulse.playlist.instructions Attributes label Identifier for the returned data, like QB1__readout.time_trace . delay_samples Delay fro...",
    "content": "Bases: object Describes a way to acquire readout data. Module: iqm.pulse.playlist.instructions Attributes label Identifier for the returned data, like QB1__readout.time_trace . delay_samples Delay from beginning of probe pulse to beginning of acquisition window, in samples. Methods label ( str ) \u2013 delay_samples ( int ) \u2013 Identifier for the returned data, like QB1__readout.time_trace . Delay from beginning of probe pulse to beginning of acquisition window, in samples. previous instructions next Block \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "validation",
    "url": "/iqm-pulse/api/iqm.pulse.validation.html",
    "description": "Validation of playlists and instructions schedules. Full path: iqm.pulse.validation Functions validate_awg_and_schedule_compatibility (...) Validates that the given playlist is compatible with the pro...",
    "content": "Validation of playlists and instructions schedules. Full path: iqm.pulse.validation Functions validate_awg_and_schedule_compatibility (...) Validates that the given playlist is compatible with the provided AWG data. validate_channel (channel_description,\u00a0...) Validate a single channel. validate_instruction_and_wf_length (instruction) Validate that instruction and waveform lengths match validate_playlist_compatibility (playlist,\u00a0...) Validates that the given playlist is compatible with the provided AWG data. Classes AWGScheduleValidationData Controller specific validation data Exceptions AWGScheduleValidationError Error raised when schedule validation for an AWG fails. InvalidInstructionError (instruction[,\u00a0...]) Error raised when encountering an invalid instruction. PlaylistValidationError Error raised when Playlist validation fails. Inheritance previous iqm.pulse.utils.phase_transformation next iqm.pulse.validation.validate_awg_and_schedule_compatibility \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_ModulatedCustomWaveForms",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_ModulatedCustomWaveForms.html",
    "description": "Bases: PRX_CustomWaveforms ABC for PRX gates with modulated frequency, hot-swappable waveforms. The class takes baseband I and Q waveform as input, and modulates them with frequency in the root_parame...",
    "content": "Bases: PRX_CustomWaveforms ABC for PRX gates with modulated frequency, hot-swappable waveforms. The class takes baseband I and Q waveform as input, and modulates them with frequency in the root_parameters.\nThe final pulse shape after modulation is: where \\(A_I\\) is amplitude_i , \\(A_Q\\) is amplitude_q , \\(\\Omega\\) is arbitrary waveform in\nbaseband, \\(\\omega_d/2\\pi\\) is the drive frequency and \\(\\delta/2\\pi\\) is the modulated frequency . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). root_parameters Parameters independent of the of Waveforms. wave_i Waveform for the I channel. wave_q Waveform for the Q channel. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Parameters independent of the of Waveforms. Inheriting classes may override this to include parameters common\nto all such implementations. Return the IQPulse with modulated arbitrary waveform based on the calibration data. amplitude_i ( float ) \u2013 amplitude_q ( float ) \u2013 n_samples ( int ) \u2013 IQPulse If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . previous PRX_HdDragSX next PRX_ModulatedDRAGCosineRiseFall \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "TwoQubitGate",
    "url": "/iqm-pulse/api/iqm.pulse.gates.enums.TwoQubitGate.html",
    "description": "Bases: Enum Enumerates a subset of two-qubit gates. Members of this enum can be mapped to the corresponding unitary propagator using\nthe dictionary returned by TWO_QUBIT_UNITARIES . Module: iqm.pulse....",
    "content": "Bases: Enum Enumerates a subset of two-qubit gates. Members of this enum can be mapped to the corresponding unitary propagator using\nthe dictionary returned by TWO_QUBIT_UNITARIES . Module: iqm.pulse.gates.enums Attributes CZ Controlled-Z gate. ISWAP iSWAP gate. SQRT_ISWAP Square root of the iSWAP gate. Methods Controlled-Z gate. iSWAP gate. Square root of the iSWAP gate. previous iqm.pulse.gates.enums.TWO_QUBIT_UNITARIES next XYGate \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-pulse",
    "title": "CZ_Slepian",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.CZ_Slepian.html",
    "description": "Bases: FluxPulseGate CZ gate using a Slepian flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flux pulse Waveform to be p...",
    "content": "Bases: FluxPulseGate CZ gate using a Slepian flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flux pulse Waveform to be played in the qubit flux AWG. symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of Slepian Required calibration data, may be nested Flux pulse Waveform to be played in the qubit flux AWG. True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous CZ_GaussianSmoothedSquare next CZ_Slepian_ACStarkCRF \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 9.10.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "API Reference",
    "url": "/iqm-station-control-client/API.html",
    "description": "iqm.station_control.client Station control client implementation. iqm.station_control.interface Station control interface. previous API documentation: station-control-client next client \u00a9 Copyright 20...",
    "content": "iqm.station_control.client Station control client implementation. iqm.station_control.interface Station control interface. previous API documentation: station-control-client next client \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "API documentation: station-control-client",
    "url": "/iqm-station-control-client/index.html",
    "description": "3.17.0 2025-05-27 This is the documentation of the IQM station-control client library. Index Module Index Search Page next API Reference \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last upd...",
    "content": "3.17.0 2025-05-27 This is the documentation of the IQM station-control client library. Index Module Index Search Page next API Reference \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "QuantumComputersStub",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.qc_pb2_grpc.QuantumComputersStub.html",
    "description": "Bases: object Quantum Computer management APIs. Constructor. channel \u2013 A grpc.Channel. Module: iqm.station_control.client.iqm_server.proto.qc_pb2_grpc Methods previous QuantumComputersServicer next uu...",
    "content": "Bases: object Quantum Computer management APIs. Constructor. channel \u2013 A grpc.Channel. Module: iqm.station_control.client.iqm_server.proto.qc_pb2_grpc Methods previous QuantumComputersServicer next uuid_pb2 \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "RunWithTimestamps",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.run.RunWithTimestamps.html",
    "description": "Bases: RunBase Abstract base class of run data including timestamps. Module: iqm.station_control.interface.models.run Attributes created_timestamp Time when the object was created in the database. mod...",
    "content": "Bases: RunBase Abstract base class of run data including timestamps. Module: iqm.station_control.interface.models.run Attributes created_timestamp Time when the object was created in the database. modified_timestamp Time when the object was last modified in the database. begin_timestamp Time when the run began in the station control. end_timestamp Time when the run ended in the station control. run_id Unique identifier of the run. username User who defined the run. experiment_name Identifier of the Experiment ( Experiment.name ). experiment_label Freeform label of the Experiment. options Experiment-specific options or toggles that generated the run. software_version_set_id Unique identifier of the software version set of the current Python runtime. Methods run_id ( UUID ) \u2013 username ( str ) \u2013 experiment_name ( str ) \u2013 experiment_label ( str ) \u2013 options ( dict [ str , Any ] | None ) \u2013 software_version_set_id ( int | None ) \u2013 created_timestamp ( datetime ) \u2013 modified_timestamp ( datetime ) \u2013 begin_timestamp ( datetime ) \u2013 end_timestamp ( datetime | None ) \u2013 Time when the object was created in the database. Time when the object was last modified in the database. Time when the run began in the station control. Time when the run ended in the station control. previous RunLite next sequence \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_results",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_results.html",
    "description": "Convert binary string into SweepResults. sweep_results_str ( bytes ) \u2013 dict [ str , list [ ndarray ]] previous iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_definition nex...",
    "content": "Convert binary string into SweepResults. sweep_results_str ( bytes ) \u2013 dict [ str , list [ ndarray ]] previous iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_definition next iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_data \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "SequenceResultBase",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.sequence.SequenceResultBase.html",
    "description": "Bases: PydanticBase Abstract base class of the sequence result definition and data. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_...",
    "content": "Bases: PydanticBase Abstract base class of the sequence result definition and data. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.sequence Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. sequence_id Unique identifier of the sequence result. data JSON serializable dict. final Indicates whether this result was marked as final. Methods sequence_id ( UUID ) \u2013 data ( dict [ str , Any ] ) \u2013 final ( bool ) \u2013 Unique identifier of the sequence result. JSON serializable dict. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Indicates whether this result was marked as final. previous SequenceMetadataDefinition next SequenceResultData \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "run",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.run.html",
    "description": "Run related station control interface models. Full path: iqm.station_control.interface.models.run Classes RunBase Abstract base class of run data. RunConfigurationBase Abstract base class of the run c...",
    "content": "Run related station control interface models. Full path: iqm.station_control.interface.models.run Classes RunBase Abstract base class of run data. RunConfigurationBase Abstract base class of the run configuration data. RunData The content of the run and its configuration stored in the database. RunDefinition The content of the run object when creating it. RunLite The data of the run stored in the database, excluding run configuration data. RunWithTimestamps Abstract base class of run data including timestamps. Inheritance previous ObservationSetUpdate next RunBase \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "task_serializers",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.task_serializers.html",
    "description": "Serializers and deserializers for task related models. Full path: iqm.station_control.client.serializers.task_serializers Functions deserialize_sweep_task_request (data) Deserializes sweep_definition ...",
    "content": "Serializers and deserializers for task related models. Full path: iqm.station_control.client.serializers.task_serializers Functions deserialize_sweep_task_request (data) Deserializes sweep_definition and queue_name from the serialized bitstring. serialize_run_task_request (run_definition,\u00a0...) Wrap run_definition and queue_name into a protobuf message and serialize into a bitstring. serialize_sweep_task_request (...) Wrap sweep_definition and queue_name into a protobuf message and serialize into a bitstring. previous iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_results next iqm.station_control.client.serializers.task_serializers.deserialize_sweep_task_request \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "testing",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.testing.html",
    "description": "Full path: iqm.station_control.client.iqm_server.testing Subpackages and modules iqm_server_mock Internal testing utilities for IqmServerClient previous uuid_pb2_grpc next iqm_server_mock \u00a9 Copyright ...",
    "content": "Full path: iqm.station_control.client.iqm_server.testing Subpackages and modules iqm_server_mock Internal testing utilities for IqmServerClient previous uuid_pb2_grpc next iqm_server_mock \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "SweepBase",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.sweep.SweepBase.html",
    "description": "Bases: object Abstract base class of the sweep definition and data. Module: iqm.station_control.interface.models.sweep Attributes sweep_id Unique identifier of the sweep. dut_label DUT label of the de...",
    "content": "Bases: object Abstract base class of the sweep definition and data. Module: iqm.station_control.interface.models.sweep Attributes sweep_id Unique identifier of the sweep. dut_label DUT label of the device being used. settings A tree representation of the initial settings to set before the sweep. sweeps Sweeps that define the swept parameters, i.e. a list of parallel sweeps, where the data values of all sweeps in the tuple are interleaved, and updated simultaneously during the sweep. return_parameters Parameters that will be queried from devices and saved for each spot (variable-tuple) of the N-dimensional sweep. Methods sweep_id ( UUID ) \u2013 dut_label ( str ) \u2013 settings ( SettingNode ) \u2013 sweeps ( list [ tuple [ Sweep , ... ] ] ) \u2013 return_parameters ( list [ str ] ) \u2013 Unique identifier of the sweep. DUT label of the device being used. A tree representation of the initial settings to set before the sweep. Sweeps that define the swept parameters, i.e. a list of parallel sweeps,\nwhere the data values of all sweeps in the tuple are interleaved, and updated simultaneously during the sweep. Parameters that will be queried from devices and saved for each spot (variable-tuple)\nof the N-dimensional sweep. Each item must correspond to a setting name in settings . previous sweep next SweepData \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.iqm_server.iqm_server_client.payload_to_sweep",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.iqm_server_client.payload_to_sweep.html",
    "description": "job_payload ( bytes ) \u2013 SweepDefinition previous iqm.station_control.client.iqm_server.iqm_server_client.parse_json next iqm.station_control.client.iqm_server.iqm_server_client.resolve_current_qc \u00a9 Co...",
    "content": "job_payload ( bytes ) \u2013 SweepDefinition previous iqm.station_control.client.iqm_server.iqm_server_client.parse_json next iqm.station_control.client.iqm_server.iqm_server_client.resolve_current_qc \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.playlist_serializers.unpack_playlist",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.playlist_serializers.unpack_playlist.html",
    "description": "Unpack a protobuf representation of a playlist into its runtime representation. proto_playlist ( Playlist ) \u2013 serialized playlist proto_playlist in runtime representation Playlist previous iqm.station...",
    "content": "Unpack a protobuf representation of a playlist into its runtime representation. proto_playlist ( Playlist ) \u2013 serialized playlist proto_playlist in runtime representation Playlist previous iqm.station_control.client.serializers.playlist_serializers.pack_playlist next run_serializers \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "QuantumComputers",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.qc_pb2_grpc.QuantumComputers.html",
    "description": "Bases: object Quantum Computer management APIs. Module: iqm.station_control.client.iqm_server.proto.qc_pb2_grpc Methods GetQuantumComputerResourceV1  GetQuantumComputerV1  ListQuantumComputersV1  prev...",
    "content": "Bases: object Quantum Computer management APIs. Module: iqm.station_control.client.iqm_server.proto.qc_pb2_grpc Methods GetQuantumComputerResourceV1  GetQuantumComputerV1  ListQuantumComputersV1  previous iqm.station_control.client.iqm_server.proto.qc_pb2_grpc.add_QuantumComputersServicer_to_server next QuantumComputersServicer \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "channel_property_serializer",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.channel_property_serializer.html",
    "description": "Serializers and deserializers for ChannelProperties Full path: iqm.station_control.client.serializers.channel_property_serializer Functions deserialize_channel_properties (...[,\u00a0...]) Convert the give...",
    "content": "Serializers and deserializers for ChannelProperties Full path: iqm.station_control.client.serializers.channel_property_serializer Functions deserialize_channel_properties (...[,\u00a0...]) Convert the given protobuf dictionary of channel properties into a dictionary of ChannelProperties . deserialize_instructions (instructions) Convert a repeated scalar container of instruction type strings into a tuple of python types. serialize_channel_properties (...) Pack the given dictionary of channel properties into a protobuf format for further serialization. unpack_channel_properties (payload[,\u00a0...]) Parse the Channel Property Dictionary from a string serialised protobuf payload. previous serializers next iqm.station_control.client.serializers.channel_property_serializer.deserialize_channel_properties \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "ObservationSetData",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.observation_set.ObservationSetData.html",
    "description": "Bases: ObservationSetBase The content of the observation set stored in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic...",
    "content": "Bases: ObservationSetBase The content of the observation set stored in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.observation_set Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. dut_label String representation of the DUT the observation set is associated with. observation_set_id Unique identifier of the observation set. created_timestamp Time when the object was created in the database. end_timestamp Time when the observation set was finalized. observation_set_type Indicates the type (i.e. purpose) of the observation set. observation_ids Database IDs of the observations belonging to the observation set. describes_id Unique identifier of the observation set this observation set describes. invalid Flag indicating if the object is invalid. Methods observation_set_type ( Literal [ 'calibration-set' , 'characterization-set' , 'generic-set' , 'quality-metric-set' ] ) \u2013 observation_ids ( list [ int ] ) \u2013 describes_id ( UUID | None ) \u2013 invalid ( bool ) \u2013 dut_label ( str | None ) \u2013 observation_set_id ( UUID ) \u2013 created_timestamp ( datetime ) \u2013 end_timestamp ( datetime | None ) \u2013 String representation of the DUT the observation set is associated with. Can only be None for generic sets. Unique identifier of the observation set. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Time when the object was created in the database. Time when the observation set was finalized. If None , the set is not finalized yet. previous ObservationSetBase next ObservationSetDefinition \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "SequenceResultDefinition",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.sequence.SequenceResultDefinition.html",
    "description": "Bases: SequenceResultBase The content of the sequence result object when creating it. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydanti...",
    "content": "Bases: SequenceResultBase The content of the sequence result object when creating it. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.sequence Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. sequence_id Unique identifier of the sequence result. data JSON serializable dict. final Indicates whether this result was marked as final. Methods sequence_id ( UUID ) \u2013 data ( dict [ str , Any ] ) \u2013 final ( bool ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous SequenceResultData next sweep \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "sequence",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.sequence.html",
    "description": "Sequence related station control interface models. Full path: iqm.station_control.interface.models.sequence Classes SequenceMetadataBase Abstract base class of the sequence metadata definition and dat...",
    "content": "Sequence related station control interface models. Full path: iqm.station_control.interface.models.sequence Classes SequenceMetadataBase Abstract base class of the sequence metadata definition and data. SequenceMetadataData The content of the sequence metadata stored in the database. SequenceMetadataDefinition The content of the sequence metadata object when creating it. SequenceResultBase Abstract base class of the sequence result definition and data. SequenceResultData The content of the sequence result stored in the database. SequenceResultDefinition The content of the sequence result object when creating it. Inheritance previous RunWithTimestamps next SequenceMetadataBase \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "RunDefinition",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.run.RunDefinition.html",
    "description": "Bases: RunBase , RunConfigurationBase The content of the run object when creating it. Module: iqm.station_control.interface.models.run Attributes sweep_definition The content of the associated sweep s...",
    "content": "Bases: RunBase , RunConfigurationBase The content of the run object when creating it. Module: iqm.station_control.interface.models.run Attributes sweep_definition The content of the associated sweep stored in the database. run_id Unique identifier of the run. username User who defined the run. experiment_name Identifier of the Experiment ( Experiment.name ). experiment_label Freeform label of the Experiment. options Experiment-specific options or toggles that generated the run. software_version_set_id Unique identifier of the software version set of the current Python runtime. additional_run_properties A free-form dictionary of data, used to store information that does not fall into other categories. hard_sweeps Maps SweepBase.return_parameters to \"hardware sweep specification\" which specifies how the data measured at each spot should be interpreted and shaped. components Components that participate in this run. default_data_parameters The subset of SweepBase.return_parameters that were added by default, not by the user. default_sweep_parameters The subset of SweepBase.sweeps parameters were added by default, not by the user. Methods additional_run_properties ( dict [ str , Any ] | None ) \u2013 hard_sweeps ( dict [ str , list [ tuple [ Sweep , ... ] ] ] | None ) \u2013 components ( list [ str ] ) \u2013 default_data_parameters ( list [ str ] ) \u2013 default_sweep_parameters ( list [ str ] ) \u2013 run_id ( UUID ) \u2013 username ( str ) \u2013 experiment_name ( str ) \u2013 experiment_label ( str ) \u2013 options ( dict [ str , Any ] | None ) \u2013 software_version_set_id ( int | None ) \u2013 sweep_definition ( SweepDefinition ) \u2013 The content of the associated sweep stored in the database. previous RunData next RunLite \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "Calibrations",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.calibration_pb2_grpc.Calibrations.html",
    "description": "Bases: object Missing associated documentation comment in .proto file. Module: iqm.station_control.client.iqm_server.proto.calibration_pb2_grpc Methods GetCalibrationV1  GetFullCalibrationDataV1  GetL...",
    "content": "Bases: object Missing associated documentation comment in .proto file. Module: iqm.station_control.client.iqm_server.proto.calibration_pb2_grpc Methods GetCalibrationV1  GetFullCalibrationDataV1  GetLatestQuantumComputerCalibrationV1  previous iqm.station_control.client.iqm_server.proto.calibration_pb2_grpc.add_CalibrationsServicer_to_server next CalibrationsServicer \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "error",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.error.html",
    "description": "Full path: iqm.station_control.client.iqm_server.error Exceptions IqmServerError (message,\u00a0status_code[,\u00a0...])  previous iqm_server next iqm.station_control.client.iqm_server.error.IqmServerError \u00a9 Co...",
    "content": "Full path: iqm.station_control.client.iqm_server.error Exceptions IqmServerError (message,\u00a0status_code[,\u00a0...])  previous iqm_server next iqm.station_control.client.iqm_server.error.IqmServerError \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.channel_property_serializer.deserialize_channel_properties",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.channel_property_serializer.deserialize_channel_properties.html",
    "description": "Convert the given protobuf dictionary of channel properties into a dictionary of ChannelProperties . channel_properties_dictionary \u2013 channel property dictionary in protobuf format convert_instructions...",
    "content": "Convert the given protobuf dictionary of channel properties into a dictionary of ChannelProperties . channel_properties_dictionary \u2013 channel property dictionary in protobuf format convert_instructions ( bool ) \u2013 whether to convert string representation of instruction types to actual\npython types. channel_property_dictionary ( ChannelPropertyDictionary ) \u2013 dictionary of channel properties dict [ str , ChannelProperties ] previous channel_property_serializer next iqm.station_control.client.serializers.channel_property_serializer.deserialize_instructions \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "SequenceMetadataDataList",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.list_models.SequenceMetadataDataList.html",
    "description": "alias of ListModel[list[SequenceMetadataData]] previous RunLiteList next serializers \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27....",
    "content": "alias of ListModel[list[SequenceMetadataData]] previous RunLiteList next serializers \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.iqm_server.iqm_server_client.resolve_current_qc",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.iqm_server_client.resolve_current_qc.html",
    "description": "channel ( Channel ) \u2013 alias ( str ) \u2013 QuantumComputerV1 previous iqm.station_control.client.iqm_server.iqm_server_client.payload_to_sweep next iqm.station_control.client.iqm_server.iqm_server_client.s...",
    "content": "channel ( Channel ) \u2013 alias ( str ) \u2013 QuantumComputerV1 previous iqm.station_control.client.iqm_server.iqm_server_client.payload_to_sweep next iqm.station_control.client.iqm_server.iqm_server_client.subscribe_to_job_events \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "RunData",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.run.RunData.html",
    "description": "Bases: RunWithTimestamps , RunConfigurationBase The content of the run and its configuration stored in the database. Module: iqm.station_control.interface.models.run Attributes sweep_data The content ...",
    "content": "Bases: RunWithTimestamps , RunConfigurationBase The content of the run and its configuration stored in the database. Module: iqm.station_control.interface.models.run Attributes sweep_data The content of the associated sweep stored in the database. created_timestamp Time when the object was created in the database. modified_timestamp Time when the object was last modified in the database. begin_timestamp Time when the run began in the station control. end_timestamp Time when the run ended in the station control. run_id Unique identifier of the run. username User who defined the run. experiment_name Identifier of the Experiment ( Experiment.name ). experiment_label Freeform label of the Experiment. options Experiment-specific options or toggles that generated the run. software_version_set_id Unique identifier of the software version set of the current Python runtime. additional_run_properties A free-form dictionary of data, used to store information that does not fall into other categories. hard_sweeps Maps SweepBase.return_parameters to \"hardware sweep specification\" which specifies how the data measured at each spot should be interpreted and shaped. components Components that participate in this run. default_data_parameters The subset of SweepBase.return_parameters that were added by default, not by the user. default_sweep_parameters The subset of SweepBase.sweeps parameters were added by default, not by the user. Methods additional_run_properties ( dict [ str , Any ] | None ) \u2013 hard_sweeps ( dict [ str , list [ tuple [ Sweep , ... ] ] ] | None ) \u2013 components ( list [ str ] ) \u2013 default_data_parameters ( list [ str ] ) \u2013 default_sweep_parameters ( list [ str ] ) \u2013 run_id ( UUID ) \u2013 username ( str ) \u2013 experiment_name ( str ) \u2013 experiment_label ( str ) \u2013 options ( dict [ str , Any ] | None ) \u2013 software_version_set_id ( int | None ) \u2013 created_timestamp ( datetime ) \u2013 modified_timestamp ( datetime ) \u2013 begin_timestamp ( datetime ) \u2013 end_timestamp ( datetime | None ) \u2013 sweep_data ( SweepData ) \u2013 The content of the associated sweep stored in the database. previous RunConfigurationBase next RunDefinition \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "run_serializers",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.run_serializers.html",
    "description": "Serializers and deserializers for run related models. Full path: iqm.station_control.client.serializers.run_serializers Functions deserialize_run_data (data) Convert a JSON serializable dictionary to ...",
    "content": "Serializers and deserializers for run related models. Full path: iqm.station_control.client.serializers.run_serializers Functions deserialize_run_data (data) Convert a JSON serializable dictionary to RunData object. deserialize_run_definition (run_definition_proto) Convert run proto into RunDefinition. serialize_run_data (run_data) Convert RunData object to a JSON serializable dictionary. serialize_run_definition (run_definition) Convert RunDefinition into run proto. previous iqm.station_control.client.serializers.playlist_serializers.unpack_playlist next iqm.station_control.client.serializers.run_serializers.deserialize_run_data \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "struct_serializer",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.struct_serializer.html",
    "description": "Serializers and deserializers for struct related models. We use custom Struct model instead of standard Struct from protobuf,\nsince standard Struct doesn\u2019t support integers but instead casts them alwa...",
    "content": "Serializers and deserializers for struct related models. We use custom Struct model instead of standard Struct from protobuf,\nsince standard Struct doesn\u2019t support integers but instead casts them always to floats. Full path: iqm.station_control.client.serializers.struct_serializer Functions deserialize_struct (proto) Deserialize a Struct protobuf representation into a free-form dict. serialize_struct (data) Serialize a free-form dict into a Struct protobuf representation. previous iqm.station_control.client.serializers.setting_node_serializer.deserialize_setting_node next iqm.station_control.client.serializers.struct_serializer.deserialize_struct \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.channel_property_serializer.unpack_channel_properties",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.channel_property_serializer.unpack_channel_properties.html",
    "description": "Parse the Channel Property Dictionary from a string serialised protobuf payload. payload ( bytes ) \u2013 protobuf serialised payload of channel property dictionary. convert_instructions ( bool ) \u2013 whether...",
    "content": "Parse the Channel Property Dictionary from a string serialised protobuf payload. payload ( bytes ) \u2013 protobuf serialised payload of channel property dictionary. convert_instructions ( bool ) \u2013 whether to convert string representation of instruction types to actual\npython types. dict [ str , ChannelProperties ] previous iqm.station_control.client.serializers.channel_property_serializer.serialize_channel_properties next datetime_serializers \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "ResponseWithMeta",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.list_models.ResponseWithMeta.html",
    "description": "Bases: PydanticBase , Generic [ T ] Class used for query endpoints to return metadata in addition to the returned items. Create a new model by parsing and validating input data from keyword arguments....",
    "content": "Bases: PydanticBase , Generic [ T ] Class used for query endpoints to return metadata in addition to the returned items. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.client.list_models Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. items  meta  Methods items ( list [ T ] ) \u2013 meta ( Meta | None ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous ObservationUpdateList next RunLiteList \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "ObservationSetDataList",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.list_models.ObservationSetDataList.html",
    "description": "alias of ListModel[list[ObservationSetData]] previous ObservationLiteList next ObservationUpdateList \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27....",
    "content": "alias of ListModel[list[ObservationSetData]] previous ObservationLiteList next ObservationUpdateList \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "RunLiteList",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.list_models.RunLiteList.html",
    "description": "alias of ListModel[list[RunLite]] previous ResponseWithMeta next SequenceMetadataDataList \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27....",
    "content": "alias of ListModel[list[RunLite]] previous ResponseWithMeta next SequenceMetadataDataList \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "calibration_pb2",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.calibration_pb2.html",
    "description": "Generated protocol buffer code. Full path: iqm.station_control.client.iqm_server.proto.calibration_pb2 previous proto next calibration_pb2_grpc \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. L...",
    "content": "Generated protocol buffer code. Full path: iqm.station_control.client.iqm_server.proto.calibration_pb2 previous proto next calibration_pb2_grpc \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.struct_serializer.serialize_struct",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.struct_serializer.serialize_struct.html",
    "description": "Serialize a free-form dict into a Struct protobuf representation. data ( dict ) \u2013 Struct previous iqm.station_control.client.serializers.struct_serializer.deserialize_struct next sweep_serializers \u00a9 C...",
    "content": "Serialize a free-form dict into a Struct protobuf representation. data ( dict ) \u2013 Struct previous iqm.station_control.client.serializers.struct_serializer.deserialize_struct next sweep_serializers \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.datetime_serializers.serialize_datetime",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.datetime_serializers.serialize_datetime.html",
    "description": "Convert a datetime object to a string formatted according to ISO. timestamp ( datetime | None ) \u2013 str | None previous iqm.station_control.client.serializers.datetime_serializers.deserialize_datetime n...",
    "content": "Convert a datetime object to a string formatted according to ISO. timestamp ( datetime | None ) \u2013 str | None previous iqm.station_control.client.serializers.datetime_serializers.deserialize_datetime next playlist_serializers \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "meta_class",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.meta_class.html",
    "description": "Full path: iqm.station_control.client.iqm_server.meta_class Classes IqmServerClientMeta Custom metaclass that automatically adds '<feature> not implemented' stub implementations for all StationControl...",
    "content": "Full path: iqm.station_control.client.iqm_server.meta_class Classes IqmServerClientMeta Custom metaclass that automatically adds '<feature> not implemented' stub implementations for all StationControlClient functions that are not overridden by IqmServerClient. Inheritance previous IqmServerClient next IqmServerClientMeta \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "common_pb2_grpc",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.common_pb2_grpc.html",
    "description": "Client and server classes corresponding to protobuf-defined services. Full path: iqm.station_control.client.iqm_server.proto.common_pb2_grpc previous common_pb2 next job_pb2 \u00a9 Copyright 2019-2025, IQM...",
    "content": "Client and server classes corresponding to protobuf-defined services. Full path: iqm.station_control.client.iqm_server.proto.common_pb2_grpc previous common_pb2 next job_pb2 \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "ListModel",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.list_models.ListModel.html",
    "description": "Bases: RootModel A Pydantic BaseModel for a container model of a list of objects. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_co...",
    "content": "Bases: RootModel A Pydantic BaseModel for a container model of a list of objects. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.client.list_models Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. root  Methods root ( RootModelRootType ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous DutList next ObservationDataList \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.struct_serializer.deserialize_struct",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.struct_serializer.deserialize_struct.html",
    "description": "Deserialize a Struct protobuf representation into a free-form dict. proto ( Struct ) \u2013 dict previous struct_serializer next iqm.station_control.client.serializers.struct_serializer.serialize_struct \u00a9 ...",
    "content": "Deserialize a Struct protobuf representation into a free-form dict. proto ( Struct ) \u2013 dict previous struct_serializer next iqm.station_control.client.serializers.struct_serializer.serialize_struct \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm_server",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.html",
    "description": "StationControlClient implementation for IQM Server Full path: iqm.station_control.client.iqm_server Subpackages and modules error  grpc_utils Internal utility functions used by IqmServerClient. iqm_se...",
    "content": "StationControlClient implementation for IQM Server Full path: iqm.station_control.client.iqm_server Subpackages and modules error  grpc_utils Internal utility functions used by IqmServerClient. iqm_server_client StationControlClient implementation for IQM Server meta_class  proto  testing  previous client next error \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.run_serializers.serialize_run_data",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.run_serializers.serialize_run_data.html",
    "description": "Convert RunData object to a JSON serializable dictionary. run_data ( RunData ) \u2013 dict previous iqm.station_control.client.serializers.run_serializers.deserialize_run_definition next iqm.station_contro...",
    "content": "Convert RunData object to a JSON serializable dictionary. run_data ( RunData ) \u2013 dict previous iqm.station_control.client.serializers.run_serializers.deserialize_run_definition next iqm.station_control.client.serializers.run_serializers.serialize_run_definition \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.iqm_server.grpc_utils.extract_error",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.grpc_utils.extract_error.html",
    "description": "error ( RpcError ) \u2013 title ( str | None ) \u2013 IqmServerError previous iqm.station_control.client.iqm_server.grpc_utils.create_channel next iqm.station_control.client.iqm_server.grpc_utils.from_proto_uui...",
    "content": "error ( RpcError ) \u2013 title ( str | None ) \u2013 IqmServerError previous iqm.station_control.client.iqm_server.grpc_utils.create_channel next iqm.station_control.client.iqm_server.grpc_utils.from_proto_uuid \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.iqm_server.proto.job_pb2_grpc.add_JobsServicer_to_server",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.job_pb2_grpc.add_JobsServicer_to_server.html",
    "description": "previous job_pb2_grpc next Jobs \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27....",
    "content": "previous job_pb2_grpc next Jobs \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "SequenceResultData",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.sequence.SequenceResultData.html",
    "description": "Bases: SequenceResultBase The content of the sequence result stored in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic...",
    "content": "Bases: SequenceResultBase The content of the sequence result stored in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.sequence Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. created_timestamp Time when the object was created in the database. modified_timestamp Time when the object was last modified in the database. sequence_id Unique identifier of the sequence result. data JSON serializable dict. final Indicates whether this result was marked as final. Methods sequence_id ( UUID ) \u2013 data ( dict [ str , Any ] ) \u2013 final ( bool ) \u2013 created_timestamp ( datetime ) \u2013 modified_timestamp ( datetime | None ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Time when the object was created in the database. Time when the object was last modified in the database. previous SequenceResultBase next SequenceResultDefinition \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "job_pb2_grpc",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.job_pb2_grpc.html",
    "description": "Client and server classes corresponding to protobuf-defined services. Full path: iqm.station_control.client.iqm_server.proto.job_pb2_grpc Functions add_JobsServicer_to_server (servicer,\u00a0server)  Class...",
    "content": "Client and server classes corresponding to protobuf-defined services. Full path: iqm.station_control.client.iqm_server.proto.job_pb2_grpc Functions add_JobsServicer_to_server (servicer,\u00a0server)  Classes Jobs User job management APIs. JobsServicer User job management APIs. JobsStub User job management APIs. Inheritance previous job_pb2 next iqm.station_control.client.iqm_server.proto.job_pb2_grpc.add_JobsServicer_to_server \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "DutFieldData",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.dut.DutFieldData.html",
    "description": "Bases: PydanticBase A DUT field or path and its unit. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the i...",
    "content": "Bases: PydanticBase A DUT field or path and its unit. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.dut Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. path DUT field or path. unit SI unit of the value. Methods path ( str ) \u2013 unit ( str ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. DUT field or path. SI unit of the value. Empty string means the value is dimensionless. previous DutData next observation \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.iqm_server.iqm_server_client.subscribe_to_job_events",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.iqm_server_client.subscribe_to_job_events.html",
    "description": "channel ( Channel ) \u2013 job_id ( UUID ) \u2013 Iterable [ JobV1 ] previous iqm.station_control.client.iqm_server.iqm_server_client.resolve_current_qc next iqm.station_control.client.iqm_server.iqm_server_cli...",
    "content": "channel ( Channel ) \u2013 job_id ( UUID ) \u2013 Iterable [ JobV1 ] previous iqm.station_control.client.iqm_server.iqm_server_client.resolve_current_qc next iqm.station_control.client.iqm_server.iqm_server_client.to_sweep_status \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "uuid_pb2",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.uuid_pb2.html",
    "description": "Generated protocol buffer code. Full path: iqm.station_control.client.iqm_server.proto.uuid_pb2 previous QuantumComputersStub next uuid_pb2_grpc \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. ...",
    "content": "Generated protocol buffer code. Full path: iqm.station_control.client.iqm_server.proto.uuid_pb2 previous QuantumComputersStub next uuid_pb2_grpc \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "pydantic_base",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.pydantic_base.html",
    "description": "Pydantic related models and types. Full path: iqm.station_control.interface.pydantic_base Classes PydanticBase Pydantic base model to change the behaviour of pydantic globally. Inheritance previous ty...",
    "content": "Pydantic related models and types. Full path: iqm.station_control.interface.pydantic_base Classes PydanticBase Pydantic base model to change the behaviour of pydantic globally. Inheritance previous type_aliases next PydanticBase \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.iqm_server.iqm_server_client.wrap_error",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.iqm_server_client.wrap_error.html",
    "description": "title ( str ) \u2013 previous iqm.station_control.client.iqm_server.iqm_server_client.to_task_status next IqmServerClient \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27....",
    "content": "title ( str ) \u2013 previous iqm.station_control.client.iqm_server.iqm_server_client.to_task_status next IqmServerClient \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "list_with_meta",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.list_with_meta.html",
    "description": "Models to extend standard list with metadata. Full path: iqm.station_control.interface.list_with_meta Classes ListWithMeta Standard list extension holding optional metadata as well. Meta Class holding...",
    "content": "Models to extend standard list with metadata. Full path: iqm.station_control.interface.list_with_meta Classes ListWithMeta Standard list extension holding optional metadata as well. Meta Class holding metadata for list return values, like pagination related data. Inheritance previous interface next ListWithMeta \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "QuantumComputersServicer",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.qc_pb2_grpc.QuantumComputersServicer.html",
    "description": "Bases: object Quantum Computer management APIs. Module: iqm.station_control.client.iqm_server.proto.qc_pb2_grpc Methods GetQuantumComputerResourceV1  GetQuantumComputerV1 Returns the details for the r...",
    "content": "Bases: object Quantum Computer management APIs. Module: iqm.station_control.client.iqm_server.proto.qc_pb2_grpc Methods GetQuantumComputerResourceV1  GetQuantumComputerV1 Returns the details for the requested quantum computer. ListQuantumComputersV1 Returns a list of quantum computers matching the given filters. Returns the details for the requested quantum computer. The quantum computer\ncan be queried by its id or alias. If the given lookup does not match any\nexisting quantum computer, the RPC call returns an error with a GRPC status NOT_FOUND . Returns a list of quantum computers matching the given filters. Returns the contents of a given resource by name and QC id (e.g. chip design record, static architecture, etc).\nSee the full list of available resources at app/backend/lib/iqm-core-client/src/station_control_http_client/resources.rs .\nEach resource is an opaque binary blob, the interpretation of which is up to the client. previous QuantumComputers next QuantumComputersStub \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.utils.calset_from_observations",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.utils.calset_from_observations.html",
    "description": "Create a calibration set from the given observations. calset_observations ( Iterable [ ObservationBase ] ) \u2013 observations that form a calibration set calibration set dict [ str , bool | str | int | fl...",
    "content": "Create a calibration set from the given observations. calset_observations ( Iterable [ ObservationBase ] ) \u2013 observations that form a calibration set calibration set dict [ str , bool | str | int | float | complex | ndarray ] previous utils next iqm.station_control.client.utils.get_progress_bar_callback \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.iqm_server.proto.qc_pb2_grpc.add_QuantumComputersServicer_to_server",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.qc_pb2_grpc.add_QuantumComputersServicer_to_server.html",
    "description": "previous qc_pb2_grpc next QuantumComputers \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27....",
    "content": "previous qc_pb2_grpc next QuantumComputers \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.task_serializers.serialize_run_task_request",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.task_serializers.serialize_run_task_request.html",
    "description": "Wrap run_definition and queue_name into a protobuf message and serialize into a bitstring. run_definition ( RunDefinition ) \u2013 The content of the run. queue_name ( str ) \u2013 Name of the destination queue...",
    "content": "Wrap run_definition and queue_name into a protobuf message and serialize into a bitstring. run_definition ( RunDefinition ) \u2013 The content of the run. queue_name ( str ) \u2013 Name of the destination queue. SweepTaskRequest encoded into a bitstring. bytes previous iqm.station_control.client.serializers.task_serializers.deserialize_sweep_task_request next iqm.station_control.client.serializers.task_serializers.serialize_sweep_task_request \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "list_models",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.list_models.html",
    "description": "Station control client type adapters. Full path: iqm.station_control.client.list_models Classes DutFieldDataList alias of ListModel[list[DutFieldData]] DutList alias of ListModel[list[DutData]] ListMo...",
    "content": "Station control client type adapters. Full path: iqm.station_control.client.list_models Classes DutFieldDataList alias of ListModel[list[DutFieldData]] DutList alias of ListModel[list[DutData]] ListModel A Pydantic BaseModel for a container model of a list of objects. ListModel[list[DutData]] A Pydantic BaseModel for a container model of a list of objects. ListModel[list[DutFieldData]] A Pydantic BaseModel for a container model of a list of objects. ListModel[list[ObservationData]] A Pydantic BaseModel for a container model of a list of objects. ListModel[list[ObservationDefinition]] A Pydantic BaseModel for a container model of a list of objects. ListModel[list[ObservationLite]] A Pydantic BaseModel for a container model of a list of objects. ListModel[list[ObservationSetData]] A Pydantic BaseModel for a container model of a list of objects. ListModel[list[ObservationUpdate]] A Pydantic BaseModel for a container model of a list of objects. ListModel[list[RunLite]] A Pydantic BaseModel for a container model of a list of objects. ListModel[list[SequenceMetadataData]] A Pydantic BaseModel for a container model of a list of objects. ObservationDataList alias of ListModel[list[ObservationData]] ObservationDefinitionList alias of ListModel[list[ObservationDefinition]] ObservationLiteList alias of ListModel[list[ObservationLite]] ObservationSetDataList alias of ListModel[list[ObservationSetData]] ObservationUpdateList alias of ListModel[list[ObservationUpdate]] ResponseWithMeta Class used for query endpoints to return metadata in addition to the returned items. RunLiteList alias of ListModel[list[RunLite]] SequenceMetadataDataList alias of ListModel[list[SequenceMetadataData]] Inheritance previous IqmServerMockBase next DutFieldDataList \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "playlist_serializers",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.playlist_serializers.html",
    "description": "Serializers and deserializers for Playlist Full path: iqm.station_control.client.serializers.playlist_serializers Functions pack_playlist (playlist) Pack the given playlist into a protobuf format for ...",
    "content": "Serializers and deserializers for Playlist Full path: iqm.station_control.client.serializers.playlist_serializers Functions pack_playlist (playlist) Pack the given playlist into a protobuf format for further serialization. unpack_playlist (proto_playlist) Unpack a protobuf representation of a playlist into its runtime representation. previous iqm.station_control.client.serializers.datetime_serializers.serialize_datetime next iqm.station_control.client.serializers.playlist_serializers.pack_playlist \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.iqm_server.error.IqmServerError",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.error.IqmServerError.html",
    "description": "message ( str ) \u2013 status_code ( str ) \u2013 error_code ( str | None ) \u2013 details ( dict | None ) \u2013 previous error next grpc_utils \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025...",
    "content": "message ( str ) \u2013 status_code ( str ) \u2013 error_code ( str | None ) \u2013 details ( dict | None ) \u2013 previous error next grpc_utils \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "PydanticBase",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.pydantic_base.PydanticBase.html",
    "description": "Bases: BaseModel Pydantic base model to change the behaviour of pydantic globally.\nNote that setting model_config in child classes will merge the configs rather than override this one. https://docs.py...",
    "content": "Bases: BaseModel Pydantic base model to change the behaviour of pydantic globally.\nNote that setting model_config in child classes will merge the configs rather than override this one. https://docs.pydantic.dev/latest/concepts/config/#change-behaviour-globally Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.pydantic_base Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Methods Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous pydantic_base next Changelog \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.playlist_serializers.pack_playlist",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.playlist_serializers.pack_playlist.html",
    "description": "Pack the given playlist into a protobuf format for further serialization. playlist ( Playlist ) \u2013 playlist to pack playlist in protobuf format Playlist previous playlist_serializers next iqm.station_c...",
    "content": "Pack the given playlist into a protobuf format for further serialization. playlist ( Playlist ) \u2013 playlist to pack playlist in protobuf format Playlist previous playlist_serializers next iqm.station_control.client.serializers.playlist_serializers.unpack_playlist \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "JobsServicer",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.job_pb2_grpc.JobsServicer.html",
    "description": "Bases: object User job management APIs. Module: iqm.station_control.client.iqm_server.proto.job_pb2_grpc Methods CancelJobV1 Cancel a queued job by JobLookup. GetJobPayloadV1 Get job payload as GRPC d...",
    "content": "Bases: object User job management APIs. Module: iqm.station_control.client.iqm_server.proto.job_pb2_grpc Methods CancelJobV1 Cancel a queued job by JobLookup. GetJobPayloadV1 Get job payload as GRPC data chunk streams by JobLookup . GetJobResultsV1 Get job result as GRPC data chunk streams by JobLookup. GetJobV1 Get job details by JobLookup. SubmitJobV1 Submits a new job to the quantum computer. SubscribeToJobV1 Subscribes to the job changes. Submits a new job to the quantum computer. If the submit succeeds, returns\nthe handle for the submitted job. ## Errors\nIn case of an error, a GRPC error status is returned with some optional additional\ndetails. The possible error cases are described below: ### Invalid payload\nThis error is returned if the given job payload is not accepted by the\ntarget quantum computer. Note that different quantum computers might\naccept different payloads. ` Code = \"INVALID_ARGUMENT\" Metadata.error_code = \"invalid_payload\" Details = https://protobuf.dev/reference/protobuf/google.protobuf/#value { \"errors\": [<list-of-error-messages>] } ` ### Job type not supported\nThis error is returned if the target quantum computer does not support the\ngiven job type (circuit, pulse). ` Code = \"INVALID_ARGUMENT\" Metadata.error_code = \"job_type_not_supported\" ` ### User job quota exceeded\nThis error is returned if the user has already submitted the maximum allowed\namount of jobs to the queue. Quota can be freed by either waiting for existing\njobs to finish or manually cancelling them (either via the API or the web). ` Code = \"RESOURCE_EXHAUSTED\" Metadata.error_code = \"quota_exceeded\" ` ### Account does not have any active or upcoming timeslots\nThis error is returned if the job is submitted with the use_timeslot flag enabled,\nbut the user\u2019s account does not have active or upcoming timeslots booked. ` Code = \"FAILED_PRECONDITION\" Metadata.error_code = \"no_booked_timeslots\" ` ### Timeslot is required to execute job\nThis error is returned if the target quantum computer requires timeslot to execute\njobs but use_timeslot was unset (or set to false ). ` Code = \"FAILED_PRECONDITION\" Metadata.error_code = \"timeslot_required\" ` ### Quantum computer not found\nThis error is returned if the qc_id does not match any existing quantum computer. ` Code = \"NOT_FOUND\" Metadata.error_code = \"not_found\" ` Get job details by JobLookup. Returns the job if the user job exists.\nUser needs to be authorised to access the job data, i.e. the job must be created by the user. ## Errors\nIn case of an error, a GRPC error status is returned with some optional additional\ndetails. The possible error cases are described below: ### Job not found\nThis error is returned if the JobLookup does not match any existing job. ` Code = \"NOT_FOUND\" Metadata.error_code = \"not_found\" ` ### Quantum computer not found\nThis error is returned if quantum computer associated with the job does not match any existing quantum computer. ` Code = \"NOT_FOUND\" Metadata.error_code = \"not_found\" ` Subscribes to the job changes. Returns a stream that emits the job at subscription\nmoment and after that the changed job every time when the job state changes. The stream\nwill end automatically when the job is considered as \u201cfinal\u201d and won\u2019t be updated\nanymore in the future (cancelled, interrupted, failed, completed). The stream may also emit empty Keepalive messages to indicate that job is still being\nprocessed but hasn\u2019t been updated. Clients may ignore these keepalive messages. ## Errors ### Job not found\nIf the job does not exist with the given lookup, the following error is\nreturned upon the subscription. ` Code = \"NOT_FOUND\" Metadata.error_code = \"not_found\" ` ### Job deleted during the subscription\nIf the job gets deleted during the open subscription, the subscription stream will\nemit the following error and close immediately after that. ` Code = \"ABORTED\" Metadata.error_code = \"job_deleted\" ` ### Server cancellation\nIf server wants to cancel the subscription (e.g. due to restarts or maintenance), the\nsubscription stream will emit the following error and close immediately after that. ` Code = \"ABORTED\" Metadata.error_code = \"server_cancel\" ` Get job payload as GRPC data chunk streams by JobLookup . Returns the job input data if the user job exists.\nUser needs to be authorised to access the job. ## Errors\nIn case of an error, a GRPC error status is returned with some optional additional\ndetails. The possible error cases are described below: ### Job not found\nThis error is returned if the JobLookup does not match any existing job. ` Code = \"NOT_FOUND\" Metadata.error_code = \"not_found\" ` ### Job payload not found\nThis error is returned if the job payload is not found. ` Code = \"NOT_FOUND\" Metadata.error_code = \"not_found\" ` Get job result as GRPC data chunk streams by JobLookup. Returns the job measurements data if the user job exists.\nUser needs to be authorised to access the job. ## Errors\nIn case of an error, a GRPC error status is returned with some optional additional\ndetails. The possible error cases are described below: ### Job not found\nThis error is returned if the JobLookup does not match any existing job. ` Code = \"NOT_FOUND\" Metadata.error_code = \"not_found\" ` ### Job results not found\nThis error is returned if the job results is not found. ` Code = \"NOT_FOUND\" Metadata.error_code = \"not_found\" ` Cancel a queued job by JobLookup. Returns the updated job when cancelled.\nUser needs to be authorised to access the job. ## Errors\nIn case of an error, a GRPC error status is returned with some optional additional\ndetails. The possible error cases are described below: ### Job not found\nThis error is returned if the JobLookup does not match any existing user job. ` Code = \"NOT_FOUND\" Metadata.error_code = \"not_found\" ` ### Can\u2019t cancel job from QC because it\u2019s already in final state\nThis error is returned if the job measurements is not found. ` Code = \"FAILED_PRECONDITION\" Metadata.error_code = \"job_not_submitted_to_qc\" ` ### Quantum computer not found\nThis error is returned if quantum computer associated with the job does not match any existing quantum computer. ` Code = \"NOT_FOUND\" Metadata.error_code = \"not_found\" ` previous Jobs next JobsStub \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.iqm_server.grpc_utils.parse_connection_params",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.grpc_utils.parse_connection_params.html",
    "description": "qc_url ( str ) \u2013 ConnectionParameters previous iqm.station_control.client.iqm_server.grpc_utils.load_all next iqm.station_control.client.iqm_server.grpc_utils.to_datetime \u00a9 Copyright 2019-2025, IQM Fi...",
    "content": "qc_url ( str ) \u2013 ConnectionParameters previous iqm.station_control.client.iqm_server.grpc_utils.load_all next iqm.station_control.client.iqm_server.grpc_utils.to_datetime \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "utils",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.utils.html",
    "description": "Utility functions for IQM Station Control Client. Full path: iqm.station_control.client.utils Functions calset_from_observations (calset_observations) Create a calibration set from the given observati...",
    "content": "Utility functions for IQM Station Control Client. Full path: iqm.station_control.client.utils Functions calset_from_observations (calset_observations) Create a calibration set from the given observations. get_progress_bar_callback () Returns a callback function that creates or updates existing progressbars when called. previous StationControlClient next iqm.station_control.client.utils.calset_from_observations \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "RunLite",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.run.RunLite.html",
    "description": "Bases: RunWithTimestamps The data of the run stored in the database, excluding run configuration data. Module: iqm.station_control.interface.models.run Attributes sweep_id Unique identifier of the ass...",
    "content": "Bases: RunWithTimestamps The data of the run stored in the database, excluding run configuration data. Module: iqm.station_control.interface.models.run Attributes sweep_id Unique identifier of the associated sweep. created_timestamp Time when the object was created in the database. modified_timestamp Time when the object was last modified in the database. begin_timestamp Time when the run began in the station control. end_timestamp Time when the run ended in the station control. run_id Unique identifier of the run. username User who defined the run. experiment_name Identifier of the Experiment ( Experiment.name ). experiment_label Freeform label of the Experiment. options Experiment-specific options or toggles that generated the run. software_version_set_id Unique identifier of the software version set of the current Python runtime. Methods run_id ( UUID ) \u2013 username ( str ) \u2013 experiment_name ( str ) \u2013 experiment_label ( str ) \u2013 options ( dict [ str , Any ] | None ) \u2013 software_version_set_id ( int | None ) \u2013 created_timestamp ( datetime ) \u2013 modified_timestamp ( datetime ) \u2013 begin_timestamp ( datetime ) \u2013 end_timestamp ( datetime | None ) \u2013 sweep_id ( UUID | None ) \u2013 Unique identifier of the associated sweep. previous RunDefinition next RunWithTimestamps \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_data",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_data.html",
    "description": "Convert SweepData into JSON serializable dictionary. sweep_data ( SweepData ) \u2013 dict previous iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_results next iqm.station_contro...",
    "content": "Convert SweepData into JSON serializable dictionary. sweep_data ( SweepData ) \u2013 dict previous iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_results next iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_definition \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "ObservationSetBase",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.observation_set.ObservationSetBase.html",
    "description": "Bases: PydanticBase Abstract base class of the observation set definition and data. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_...",
    "content": "Bases: PydanticBase Abstract base class of the observation set definition and data. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.observation_set Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. observation_set_type Indicates the type (i.e. purpose) of the observation set. observation_ids Database IDs of the observations belonging to the observation set. describes_id Unique identifier of the observation set this observation set describes. invalid Flag indicating if the object is invalid. Methods observation_set_type ( Literal [ 'calibration-set' , 'characterization-set' , 'generic-set' , 'quality-metric-set' ] ) \u2013 observation_ids ( list [ int ] ) \u2013 describes_id ( UUID | None ) \u2013 invalid ( bool ) \u2013 Indicates the type (i.e. purpose) of the observation set. Database IDs of the observations belonging to the observation set. Unique identifier of the observation set this observation set describes. Flag indicating if the object is invalid. Automated systems must not use invalid objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous observation_set next ObservationSetData \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "ObservationUpdateList",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.list_models.ObservationUpdateList.html",
    "description": "alias of ListModel[list[ObservationUpdate]] previous ObservationSetDataList next ResponseWithMeta \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27....",
    "content": "alias of ListModel[list[ObservationUpdate]] previous ObservationSetDataList next ResponseWithMeta \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "ObservationData",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.observation.ObservationData.html",
    "description": "Bases: ObservationLite , ObservationDefinition The content of the observation stored in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ Validatio...",
    "content": "Bases: ObservationLite , ObservationDefinition The content of the observation stored in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.observation Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. observation_set_ids List of observation set UUIDs this observation belongs to. observation_id Unique identifier of the observation. created_timestamp Time when the object was created in the database. modified_timestamp Time when the object was last modified in the database. dut_label DUT label of the device the observation is about. source How the observation was made, e.g. experiment analysis or manual specification. tags Human-readable tags of the observation. dut_field Name of the property the observation is about. value Value of the observation. unit SI unit of the value. uncertainty Uncertainty of the observation value. invalid Flag indicating if the object is invalid. Methods dut_field ( str ) \u2013 value ( bool | str | int | float | complex | ndarray ) \u2013 unit ( str ) \u2013 uncertainty ( int | float | complex | ndarray | None ) \u2013 invalid ( bool ) \u2013 dut_label ( str ) \u2013 source ( dict [ str , Any ] ) \u2013 tags ( list [ str ] ) \u2013 observation_id ( int ) \u2013 created_timestamp ( datetime ) \u2013 modified_timestamp ( datetime ) \u2013 observation_set_ids ( list [ UUID ] ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. List of observation set UUIDs this observation belongs to. previous ObservationBase next ObservationDefinition \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "datetime_serializers",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.datetime_serializers.html",
    "description": "Serializers and deserializers for datetime related models. Full path: iqm.station_control.client.serializers.datetime_serializers Functions deserialize_datetime (timestamp) Convert a string formatted ...",
    "content": "Serializers and deserializers for datetime related models. Full path: iqm.station_control.client.serializers.datetime_serializers Functions deserialize_datetime (timestamp) Convert a string formatted according to ISO to a datetime object. serialize_datetime (timestamp) Convert a datetime object to a string formatted according to ISO. previous iqm.station_control.client.serializers.channel_property_serializer.unpack_channel_properties next iqm.station_control.client.serializers.datetime_serializers.deserialize_datetime \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "ListWithMeta",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.list_with_meta.ListWithMeta.html",
    "description": "Bases: list Standard list extension holding optional metadata as well. Module: iqm.station_control.interface.list_with_meta Methods items ( Iterable ) \u2013 meta ( Meta ) \u2013 previous list_with_meta next Me...",
    "content": "Bases: list Standard list extension holding optional metadata as well. Module: iqm.station_control.interface.list_with_meta Methods items ( Iterable ) \u2013 meta ( Meta ) \u2013 previous list_with_meta next Meta \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.task_serializers.serialize_sweep_task_request",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.task_serializers.serialize_sweep_task_request.html",
    "description": "Wrap sweep_definition and queue_name into a protobuf message and serialize into a bitstring. sweep_definition ( SweepDefinition ) \u2013 The content of the sweep. queue_name ( str ) \u2013 Name of the destinati...",
    "content": "Wrap sweep_definition and queue_name into a protobuf message and serialize into a bitstring. sweep_definition ( SweepDefinition ) \u2013 The content of the sweep. queue_name ( str ) \u2013 Name of the destination queue. SweepTaskRequest encoded into a bitstring. bytes previous iqm.station_control.client.serializers.task_serializers.serialize_run_task_request next station_control \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.iqm_server.grpc_utils.from_proto_uuid",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.grpc_utils.from_proto_uuid.html",
    "description": "value ( Uuid ) \u2013 UUID previous iqm.station_control.client.iqm_server.grpc_utils.extract_error next iqm.station_control.client.iqm_server.grpc_utils.load_all \u00a9 Copyright 2019-2025, IQM Finland Oy, Rele...",
    "content": "value ( Uuid ) \u2013 UUID previous iqm.station_control.client.iqm_server.grpc_utils.extract_error next iqm.station_control.client.iqm_server.grpc_utils.load_all \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "RunBase",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.run.RunBase.html",
    "description": "Bases: object Abstract base class of run data. Module: iqm.station_control.interface.models.run Attributes run_id Unique identifier of the run. username User who defined the run. experiment_name Ident...",
    "content": "Bases: object Abstract base class of run data. Module: iqm.station_control.interface.models.run Attributes run_id Unique identifier of the run. username User who defined the run. experiment_name Identifier of the Experiment ( Experiment.name ). experiment_label Freeform label of the Experiment. options Experiment-specific options or toggles that generated the run. software_version_set_id Unique identifier of the software version set of the current Python runtime. Methods run_id ( UUID ) \u2013 username ( str ) \u2013 experiment_name ( str ) \u2013 experiment_label ( str ) \u2013 options ( dict [ str , Any ] | None ) \u2013 software_version_set_id ( int | None ) \u2013 Unique identifier of the run. User who defined the run. Identifier of the Experiment ( Experiment.name ). Freeform label of the Experiment. As opposed to experiment_name , no core logic relies on this value. Experiment-specific options or toggles that generated the run. Unique identifier of the software version set of the current Python runtime. previous run next RunConfigurationBase \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "ClientCallDetails",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.grpc_utils.ClientCallDetails.html",
    "description": "Bases: ClientCallDetails Module: iqm.station_control.client.iqm_server.grpc_utils Methods previous ApiTokenAuth next ConnectionParameters \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last up...",
    "content": "Bases: ClientCallDetails Module: iqm.station_control.client.iqm_server.grpc_utils Methods previous ApiTokenAuth next ConnectionParameters \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "CalibrationsServicer",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.calibration_pb2_grpc.CalibrationsServicer.html",
    "description": "Bases: object Missing associated documentation comment in .proto file. Module: iqm.station_control.client.iqm_server.proto.calibration_pb2_grpc Methods GetCalibrationV1 Missing associated documentatio...",
    "content": "Bases: object Missing associated documentation comment in .proto file. Module: iqm.station_control.client.iqm_server.proto.calibration_pb2_grpc Methods GetCalibrationV1 Missing associated documentation comment in .proto file. GetFullCalibrationDataV1  GetLatestQuantumComputerCalibrationV1 Missing associated documentation comment in .proto file. Missing associated documentation comment in .proto file. Missing associated documentation comment in .proto file. Get the calibration set for a given QC. The calibration set is returned as bytes data that contains the JSON\nrepresentation of the calibration set data. If the calibration set is\nnot found, a NOT_FOUND error status is returned. previous Calibrations next CalibrationsStub \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "setting_node_serializer",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.setting_node_serializer.html",
    "description": "Serializers and deserializers for setting node related models. Full path: iqm.station_control.client.serializers.setting_node_serializer Functions deserialize_setting_node (setting_node_str) Convert b...",
    "content": "Serializers and deserializers for setting node related models. Full path: iqm.station_control.client.serializers.setting_node_serializer Functions deserialize_setting_node (setting_node_str) Convert binary string into SettingNode. previous iqm.station_control.client.serializers.run_serializers.serialize_run_definition next iqm.station_control.client.serializers.setting_node_serializer.deserialize_setting_node \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "SweepDefinition",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.sweep.SweepDefinition.html",
    "description": "Bases: SweepBase The content of the sweep object when creating it. Module: iqm.station_control.interface.models.sweep Attributes playlist A Playlist that should be uploaded to the controllers. sweep_i...",
    "content": "Bases: SweepBase The content of the sweep object when creating it. Module: iqm.station_control.interface.models.sweep Attributes playlist A Playlist that should be uploaded to the controllers. sweep_id Unique identifier of the sweep. dut_label DUT label of the device being used. settings A tree representation of the initial settings to set before the sweep. sweeps Sweeps that define the swept parameters, i.e. a list of parallel sweeps, where the data values of all sweeps in the tuple are interleaved, and updated simultaneously during the sweep. return_parameters Parameters that will be queried from devices and saved for each spot (variable-tuple) of the N-dimensional sweep. Methods sweep_id ( UUID ) \u2013 dut_label ( str ) \u2013 settings ( SettingNode ) \u2013 sweeps ( list [ tuple [ Sweep , ... ] ] ) \u2013 return_parameters ( list [ str ] ) \u2013 playlist ( Playlist | None ) \u2013 A Playlist that should be uploaded to the controllers. previous SweepData next SweepStatus \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "ObservationLite",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.observation.ObservationLite.html",
    "description": "Bases: ObservationBase The lightweight version of the observation data. This model can be used when not all observation data is needed, to speed up retrieval. Create a new model by parsing and validat...",
    "content": "Bases: ObservationBase The lightweight version of the observation data. This model can be used when not all observation data is needed, to speed up retrieval. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.observation Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. observation_id Unique identifier of the observation. created_timestamp Time when the object was created in the database. modified_timestamp Time when the object was last modified in the database. dut_field Name of the property the observation is about. value Value of the observation. unit SI unit of the value. uncertainty Uncertainty of the observation value. invalid Flag indicating if the object is invalid. Methods dut_field ( str ) \u2013 value ( bool | str | int | float | complex | ndarray ) \u2013 unit ( str ) \u2013 uncertainty ( int | float | complex | ndarray | None ) \u2013 invalid ( bool ) \u2013 observation_id ( int ) \u2013 created_timestamp ( datetime ) \u2013 modified_timestamp ( datetime ) \u2013 Unique identifier of the observation. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Time when the object was created in the database. Time when the object was last modified in the database. previous ObservationDefinition next ObservationUpdate \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_data",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_data.html",
    "description": "Convert JSON serializable dictionary into SweepData. data ( dict ) \u2013 SweepData previous sweep_serializers next iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_definition \u00a9 C...",
    "content": "Convert JSON serializable dictionary into SweepData. data ( dict ) \u2013 SweepData previous sweep_serializers next iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_definition \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "interface",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.html",
    "description": "Station control interface. A StationControlInterface administers a set of control and measurement instruments\nattached to a quantum device, and connects to the database and related external services. ...",
    "content": "Station control interface. A StationControlInterface administers a set of control and measurement instruments\nattached to a quantum device, and connects to the database and related external services. Full path: iqm.station_control.interface Subpackages and modules list_with_meta Models to extend standard list with metadata. models Station control interface models. pydantic_base Pydantic related models and types. previous iqm.station_control.client.utils.get_progress_bar_callback next list_with_meta \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.run_serializers.deserialize_run_definition",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.run_serializers.deserialize_run_definition.html",
    "description": "Convert run proto into RunDefinition. run_definition_proto ( RunDefinition ) \u2013 RunDefinition previous iqm.station_control.client.serializers.run_serializers.deserialize_run_data next iqm.station_contr...",
    "content": "Convert run proto into RunDefinition. run_definition_proto ( RunDefinition ) \u2013 RunDefinition previous iqm.station_control.client.serializers.run_serializers.deserialize_run_data next iqm.station_control.client.serializers.run_serializers.serialize_run_data \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.channel_property_serializer.deserialize_instructions",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.channel_property_serializer.deserialize_instructions.html",
    "description": "Convert a repeated scalar container of instruction type strings into a tuple of python types. instructions ( Iterable [ str ] ) \u2013 tuple [ Operation , \u2026] previous iqm.station_control.client.serializers...",
    "content": "Convert a repeated scalar container of instruction type strings into a tuple of python types. instructions ( Iterable [ str ] ) \u2013 tuple [ Operation , \u2026] previous iqm.station_control.client.serializers.channel_property_serializer.deserialize_channel_properties next iqm.station_control.client.serializers.channel_property_serializer.serialize_channel_properties \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.iqm_server.iqm_server_client.to_task_status",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.iqm_server_client.to_task_status.html",
    "description": "job_status ( <google.protobuf.internal.enum_type_wrapper.EnumTypeWrapper object at 0x7f090e71b510> ) \u2013 str previous iqm.station_control.client.iqm_server.iqm_server_client.to_sweep_status next iqm.sta...",
    "content": "job_status ( <google.protobuf.internal.enum_type_wrapper.EnumTypeWrapper object at 0x7f090e71b510> ) \u2013 str previous iqm.station_control.client.iqm_server.iqm_server_client.to_sweep_status next iqm.station_control.client.iqm_server.iqm_server_client.wrap_error \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "models",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.html",
    "description": "Station control interface models. Full path: iqm.station_control.interface.models Subpackages and modules dut DUT related interface models. observation Observation related station control interface mo...",
    "content": "Station control interface models. Full path: iqm.station_control.interface.models Subpackages and modules dut DUT related interface models. observation Observation related station control interface models. observation_set Observation set related station control interface models. run Run related station control interface models. sequence Sequence related station control interface models. sweep Sweep related station control interface models. type_aliases Type hint aliases used in the station control interface. previous Meta next dut \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "sweep_serializers",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.sweep_serializers.html",
    "description": "Serializers and deserializers for sweep related models. Full path: iqm.station_control.client.serializers.sweep_serializers Functions deserialize_sweep_data (data) Convert JSON serializable dictionary...",
    "content": "Serializers and deserializers for sweep related models. Full path: iqm.station_control.client.serializers.sweep_serializers Functions deserialize_sweep_data (data) Convert JSON serializable dictionary into SweepData. deserialize_sweep_definition (...) Convert sweep proto into SweepDefinition. deserialize_sweep_results (sweep_results_str) Convert binary string into SweepResults. serialize_sweep_data (sweep_data) Convert SweepData into JSON serializable dictionary. serialize_sweep_definition (sweep_definition) Convert SweepDefinition into sweep proto. serialize_sweep_results (sweep_id,\u00a0sweep_results) Convert SweepResults into binary string. previous iqm.station_control.client.serializers.struct_serializer.serialize_struct next iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_data \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_definition",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_definition.html",
    "description": "Convert sweep proto into SweepDefinition. sweep_definition_proto ( SweepRequest ) \u2013 SweepDefinition previous iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_data next iqm.st...",
    "content": "Convert sweep proto into SweepDefinition. sweep_definition_proto ( SweepRequest ) \u2013 SweepDefinition previous iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_data next iqm.station_control.client.serializers.sweep_serializers.deserialize_sweep_results \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm_server_mock",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.testing.iqm_server_mock.html",
    "description": "Internal testing utilities for IqmServerClient Full path: iqm.station_control.client.iqm_server.testing.iqm_server_mock Classes IqmServerMockBase Base class for IQM server mocks. Inheritance previous ...",
    "content": "Internal testing utilities for IqmServerClient Full path: iqm.station_control.client.iqm_server.testing.iqm_server_mock Classes IqmServerMockBase Base class for IQM server mocks. Inheritance previous testing next IqmServerMockBase \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "observation",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.observation.html",
    "description": "Observation related station control interface models. Full path: iqm.station_control.interface.models.observation Classes ObservationBase Abstract base class of the observation models. ObservationData...",
    "content": "Observation related station control interface models. Full path: iqm.station_control.interface.models.observation Classes ObservationBase Abstract base class of the observation models. ObservationData The content of the observation stored in the database. ObservationDefinition The content of the observation definition. ObservationLite The lightweight version of the observation data. ObservationUpdate The observation data to be updated in the database. Inheritance previous DutFieldData next ObservationBase \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "IqmServerClientMeta",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.meta_class.IqmServerClientMeta.html",
    "description": "Bases: type Custom metaclass that automatically adds \u2018<feature> not implemented\u2019\nstub implementations for all StationControlClient functions that are\nnot overridden by IqmServerClient. Module: iqm.sta...",
    "content": "Bases: type Custom metaclass that automatically adds \u2018<feature> not implemented\u2019\nstub implementations for all StationControlClient functions that are\nnot overridden by IqmServerClient. Module: iqm.station_control.client.iqm_server.meta_class Methods previous meta_class next proto \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "sweep",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.sweep.html",
    "description": "Sweep related station control interface models. Full path: iqm.station_control.interface.models.sweep Classes SweepBase Abstract base class of the sweep definition and data. SweepData The content of t...",
    "content": "Sweep related station control interface models. Full path: iqm.station_control.interface.models.sweep Classes SweepBase Abstract base class of the sweep definition and data. SweepData The content of the sweep stored in the database. SweepDefinition The content of the sweep object when creating it. SweepStatus Status for sweeps. Inheritance previous SequenceResultDefinition next SweepBase \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "ObservationDefinition",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.observation.ObservationDefinition.html",
    "description": "Bases: ObservationBase The content of the observation definition. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationErr...",
    "content": "Bases: ObservationBase The content of the observation definition. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.observation Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. dut_label DUT label of the device the observation is about. source How the observation was made, e.g. experiment analysis or manual specification. tags Human-readable tags of the observation. dut_field Name of the property the observation is about. value Value of the observation. unit SI unit of the value. uncertainty Uncertainty of the observation value. invalid Flag indicating if the object is invalid. Methods dut_field ( str ) \u2013 value ( bool | str | int | float | complex | ndarray ) \u2013 unit ( str ) \u2013 uncertainty ( int | float | complex | ndarray | None ) \u2013 invalid ( bool ) \u2013 dut_label ( str ) \u2013 source ( dict [ str , Any ] ) \u2013 tags ( list [ str ] ) \u2013 DUT label of the device the observation is about. How the observation was made, e.g. experiment analysis or manual specification. source always has the key \"type\" whose str value determines the other contents of the dict.\nThe currently supported source types are:\n- analysis_source\n- configuration_source\n- measurement_source\n- sequence_analysis_source\n- specification_source Human-readable tags of the observation. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous ObservationData next ObservationLite \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "IqmServerMockBase",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.testing.iqm_server_mock.IqmServerMockBase.html",
    "description": "Bases: QuantumComputersServicer , CalibrationsServicer , JobsServicer Base class for IQM server mocks. Only meant for testing IQM library packages, do not use outside of tests! Module: iqm.station_con...",
    "content": "Bases: QuantumComputersServicer , CalibrationsServicer , JobsServicer Base class for IQM server mocks. Only meant for testing IQM library packages, do not use outside of tests! Module: iqm.station_control.client.iqm_server.testing.iqm_server_mock Methods channel Gets a grpc.Channel that connects to this mock server instance. chunk_stream A utility function for converting a binary data blob into a`(stream DataChunk)`. parse_uuid Helper function for generating protobuf UUIDs proto_timestamp Helper function for generating protobuf timestamps proto_uuid Helper function for generating protobuf UUIDs Helper function for generating protobuf UUIDs base ( UUID | None ) \u2013 Uuid Helper function for generating protobuf UUIDs value ( Uuid ) \u2013 UUID Helper function for generating protobuf timestamps base ( datetime | None ) \u2013 Timestamp Gets a grpc.Channel that connects to this mock server instance. Can be used to initialize\na new IqmServerClient that uses this mock server instance as a backend for the\ninvoked GRPC calls. Channel A utility function for converting a binary data blob into a`(stream DataChunk)`. data ( bytes ) \u2013 Iterator [ DataChunk ] previous iqm_server_mock next list_models \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "Jobs",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.job_pb2_grpc.Jobs.html",
    "description": "Bases: object User job management APIs. Module: iqm.station_control.client.iqm_server.proto.job_pb2_grpc Methods CancelJobV1  GetJobPayloadV1  GetJobResultsV1  GetJobV1  SubmitJobV1  SubscribeToJobV1 ...",
    "content": "Bases: object User job management APIs. Module: iqm.station_control.client.iqm_server.proto.job_pb2_grpc Methods CancelJobV1  GetJobPayloadV1  GetJobResultsV1  GetJobV1  SubmitJobV1  SubscribeToJobV1  previous iqm.station_control.client.iqm_server.proto.job_pb2_grpc.add_JobsServicer_to_server next JobsServicer \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.iqm_server.iqm_server_client.parse_json",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.iqm_server_client.parse_json.html",
    "description": "data ( bytes ) \u2013 Any previous iqm.station_control.client.iqm_server.iqm_server_client.parse_calibration_set next iqm.station_control.client.iqm_server.iqm_server_client.payload_to_sweep \u00a9 Copyright 20...",
    "content": "data ( bytes ) \u2013 Any previous iqm.station_control.client.iqm_server.iqm_server_client.parse_calibration_set next iqm.station_control.client.iqm_server.iqm_server_client.payload_to_sweep \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.run_serializers.serialize_run_definition",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.run_serializers.serialize_run_definition.html",
    "description": "Convert RunDefinition into run proto. run_definition ( RunDefinition ) \u2013 RunDefinition previous iqm.station_control.client.serializers.run_serializers.serialize_run_data next setting_node_serializer \u00a9...",
    "content": "Convert RunDefinition into run proto. run_definition ( RunDefinition ) \u2013 RunDefinition previous iqm.station_control.client.serializers.run_serializers.serialize_run_data next setting_node_serializer \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "uuid_pb2_grpc",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.uuid_pb2_grpc.html",
    "description": "Client and server classes corresponding to protobuf-defined services. Full path: iqm.station_control.client.iqm_server.proto.uuid_pb2_grpc previous uuid_pb2 next testing \u00a9 Copyright 2019-2025, IQM Fin...",
    "content": "Client and server classes corresponding to protobuf-defined services. Full path: iqm.station_control.client.iqm_server.proto.uuid_pb2_grpc previous uuid_pb2 next testing \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.iqm_server.grpc_utils.load_all",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.grpc_utils.load_all.html",
    "description": "chunks ( Iterable [ DataChunk ] ) \u2013 bytes previous iqm.station_control.client.iqm_server.grpc_utils.from_proto_uuid next iqm.station_control.client.iqm_server.grpc_utils.parse_connection_params \u00a9 Copy...",
    "content": "chunks ( Iterable [ DataChunk ] ) \u2013 bytes previous iqm.station_control.client.iqm_server.grpc_utils.from_proto_uuid next iqm.station_control.client.iqm_server.grpc_utils.parse_connection_params \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "StationControlClient",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.station_control.StationControlClient.html",
    "description": "Bases: object Station control client implementation. Current implementation uses HTTP calls to the remote station control service,\nthat is controlling the station control instance. root_url ( str ) \u2013 ...",
    "content": "Bases: object Station control client implementation. Current implementation uses HTTP calls to the remote station control service,\nthat is controlling the station control instance. root_url ( str ) \u2013 Remote station control service URL. get_token_callback ( Callable [ [ ] , str ] | None ) \u2013 A callback function that returns a token (str) which will be passed in Authorization header\nin all requests. Station control client implements generic query methods for certain objects,\nlike query_observations() , query_observation_sets() , and query_sequence_metadatas() .\nThese methods accept only keyword arguments as parameters, which are based on the syntax field__lookup=value .\nNote double-underscore in the name, to separate field names like dut_field from lookup types like in .\nThe syntax is based on Django implementation, documented here and here . As a convenience, when no lookup type is provided (like in dut_label=\"foo\" ),\nthe lookup type is assumed to be exact ( dut_label__exact=\"foo\" ). Other supported lookup types are: For example, created_timestamp__range=(datetime(2023, 10, 12), datetime(2024, 10, 14)) For example, dut_field__in=[\"QB1.frequency\", \"gates.measure.constant.QB2.frequency\"] For example, origin_uri__icontains=\"local\" For example, tags__overlap=[\"calibration=good\", \"2023-12-04\"] For example, tags__contains=[\"calibration=good\", \"2023-12-04\"] For example, end_timestamp__isnull=False In addition to model fields (like \u201cdut_label\u201d, \u201cdut_field\u201d, \u201ccreated_timestamp\u201d, \u201cinvalid\u201d, etc.),\nall of our generic query methods accept also following shared query parameters: For example, latest=\"invalid\" would return only one result (latest \u201ccreated_timestamp\u201d)\nfor each different \u201cinvalid\u201d value in the database. Thus, maximum three results would be returned,\none for each invalid value of True , False , and None . order_by: str. Prefix with \u201c-\u201d for descending order, for example \u201c-created_timestamp\u201d. limit: int: Default 20. If 0 (or negative number) is given, then pagination is not used, i.e. limit=infinity. offset: int. Default 0. Our generic query methods are not fully generalized yet, thus not all fields and lookup types are supported.\nCheck query methods own documentation for details about currently supported query parameters. Generic query methods will return a list of objects, but with additional (optional) \u201cmeta\u201d attribute,\nwhich contains metadata, like pagination details. The client can ignore this data,\nor use it to implement pagination logic for example to fetch all results available. Module: iqm.station_control.client.station_control Attributes version Return the version of the station control API this client is using. Methods create_observation_set Create an observation set in the database. create_observations Create observations in the database. create_sequence_metadata Create sequence metadata in the database. delete_sweep Delete sweep in the database. finalize_observation_set Finalize an observation set in the database. get_about Return information about the station control. get_calibration_set_values Get saved calibration set observations by UUID get_channel_properties Get channel properties from the station. get_chip_design_record Get a raw chip design record matching the given chip label. get_configuration Return the configuration of the station control. get_dut_fields Get DUT fields for the specified DUT label from the database. get_duts Get DUTs of the station control. get_exa_configuration Return the recommended EXA configuration from the server. get_latest_calibration_set_id Get UUID of the latest saved calibration set for the given dut_label. get_observation_set Get an observation set from the database. get_observation_set_observations Get the constituent observations of an observation set from the database. get_observations Get observations from the database. get_or_create_software_version_set Get software version set ID from the database, or create if it doesn't exist. get_run Get run data from the database. get_sequence_result Get sequence result from the database. get_settings Return a tree representation of the default settings as defined in the configuration file. get_sweep Get N-dimensional sweep data from the database. get_sweep_results Get N-dimensional sweep results from the database. get_task Get task data. init Initialize a new station control client instance connected to the given remote. query_observation_sets Query observation sets from the database. query_observations Query observations from the database. query_runs Query runs from the database. query_sequence_metadatas Query sequence metadatas from the database. revoke_sweep Either remove a sweep task from the queue, or abort it gracefully if it's already executing. run Execute an N-dimensional sweep of selected variables and save run, sweep and results. save_sequence_result Save sequence result in the database. sweep Execute an N-dimensional sweep of selected variables and save sweep and results. update_observation_set Update an observation set in the database. update_observations Update observations in the database. Return the version of the station control API this client is using. Initialize a new station control client instance connected to the given remote. Client implementation is selected automatically based on the remote station: if the remote station\nis running the IQM Server software stack, then the IQM Server client implementation (with a limited\nfeature set) is chosen. If the remote station is running the SC software stack, then the Station\nControl client implementation (with the full feature set) is chosen. root_url ( str ) \u2013 Remote station control service URL. For IQM Server remotes, this is the \u201cQuantum Computer URL\u201d\nvalue from the web dashboard. get_token_callback ( Callable [ [ ] , str ] | None ) \u2013 A callback function that returns a token (str) which will be passed in Authorization\nheader in all requests. StationControlClient Return information about the station control. dict Return the configuration of the station control. dict Return the recommended EXA configuration from the server. str Get software version set ID from the database, or create if it doesn\u2019t exist. software_version_set ( dict [ str , str ] ) \u2013 int Return a tree representation of the default settings as defined in the configuration file. SettingNode Get a raw chip design record matching the given chip label. dut_label ( str ) \u2013 dict Get channel properties from the station. Channel properties contain information regarding hardware limitations e.g. sampling rate, granularity\nand supported instructions. Mapping from channel name to AWGProperties or ReadoutProperties dict [ str , ChannelProperties ] Execute an N-dimensional sweep of selected variables and save sweep and results. The raw data for each spot in the sweep is saved as numpy arrays,\nand the complete data for the whole sweep is saved as an x-array dataset\nwhich has the sweep_definition.sweeps as coordinates and\ndata of sweep_definition.return_parameters data as DataArrays. The values of sweep_definition.playlist will be uploaded to the controllers given by the keys of sweep_definition.playlist . sweep_definition ( SweepDefinition ) \u2013 The content of the sweep to be created. Dict containing the task ID  and sweep ID, and corresponding hrefs, of a successful sweep execution\nin monolithic mode or successful submission to the task queue in remote mode. ExaError if submitting a sweep failed. \u2013 dict Get N-dimensional sweep data from the database. sweep_id ( UUID ) \u2013 SweepData Either remove a sweep task from the queue, or abort it gracefully if it\u2019s already executing. If the task was already executing when revoked, the status of the task will be set to \"INTERRUPTED\" .\nIf the task had not started yet, the status will be set to \"REVOKED\" .\nIf the task is not found or is already finished nothing happens. sweep_id ( UUID ) \u2013 None Delete sweep in the database. sweep_id ( UUID ) \u2013 None Get N-dimensional sweep results from the database. sweep_id ( UUID ) \u2013 dict [ str , list [ ndarray ]] Execute an N-dimensional sweep of selected variables and save run, sweep and results. run_definition ( RunDefinition ) \u2013 update_progress_callback ( Callable [ [ list [ tuple [ str , int , int ] ] ] , None ] | None ) \u2013 wait_task_completion ( bool ) \u2013 bool Get run data from the database. run_id ( UUID ) \u2013 RunData Query runs from the database. run_id: uuid.UUID run_id__in: list[uuid.UUID] sweep_id: uuid.UUID sweep_id__in: list[uuid.UUID] username: str username__in: list[str] username__contains: str username__icontains: str experiment_label: str experiment_label__in: list[str] experiment_label__contains: str experiment_label__icontains: str experiment_name: str experiment_name__in: list[str] experiment_name__contains: str experiment_name__icontains: str software_version_set_id: int software_version_set_id__in: list[int] begin_timestamp__range: tuple[datetime, datetime] end_timestamp__range: tuple[datetime, datetime] end_timestamp__isnull: bool Queried runs with some query related metadata. ListWithMeta [ RunLite ] Create observations in the database. observation_definitions ( Sequence [ ObservationDefinition ] ) \u2013 A sequence of observation definitions,\neach containing the content of the observation which will be created. Created observations, each including also the database created fields like ID and timestamps. ListWithMeta [ ObservationData ] Get observations from the database. Observations are queried by the given query parameters. mode ( Literal [ 'all_latest' , 'tags_and' , 'tags_or' , 'sequence' ] ) \u2013 The \u201cmode\u201d used to query the observations. Possible values \u201call_latest\u201d, \u201ctags_and\u201d, or \u201ctags_or\u201d. \u201dall_latest\u201d:Query all the latest observations for the given dut_label .\nNo other query parameters are accepted. \u201dtags_and\u201d: Query observations. Query all the observations that have all the given tags .\nBy default, only valid observations are included.\nAll other query parameters can be used to narrow down the query,\nexpect \u201crun_ids\u201d and \u201csequence_ids\u201d. \u201dtags_or\u201d: Query all the latest observations that have at least one of the given tags .\nAdditionally, dut_label must be given. No other query parameters are used. \u201dsequence\u201d: Query observations originating from a list of run and/or sequence IDs.\nNo other query parameters are accepted. The \u201cmode\u201d used to query the observations. Possible values \u201call_latest\u201d, \u201ctags_and\u201d, or \u201ctags_or\u201d. \u201dall_latest\u201d:Query all the latest observations for the given dut_label .\nNo other query parameters are accepted. \u201dtags_and\u201d: Query observations. Query all the observations that have all the given tags .\nBy default, only valid observations are included.\nAll other query parameters can be used to narrow down the query,\nexpect \u201crun_ids\u201d and \u201csequence_ids\u201d. \u201dtags_or\u201d: Query all the latest observations that have at least one of the given tags .\nAdditionally, dut_label must be given. No other query parameters are used. \u201dsequence\u201d: Query observations originating from a list of run and/or sequence IDs.\nNo other query parameters are accepted. dut_label ( str | None ) \u2013 DUT label of the device the observations pertain to. dut_field ( str | None ) \u2013 Name of the property the observation is about. tags ( list [ str ] | None ) \u2013 Human-readable tags of the observation. invalid ( bool | None ) \u2013 Flag indicating if the object is invalid. Automated systems must not use invalid objects.\nIf None , both valid and invalid objects are included. run_ids ( list [ UUID ] | None ) \u2013 The run IDs for which to query the observations. sequence_ids ( list [ UUID ] | None ) \u2013 The sequence IDs for which to query the observations. limit ( int | None ) \u2013 Indicates the maximum number of items to return. Observations, each including also the database created fields like ID and timestamps. list [ ObservationData ] Query observations from the database. observation_id: int observation_id__in: list[int] dut_label: str dut_field: str dut_field__in: list[str] tags__overlap: list[str] tags__contains: list[str] invalid: bool source__run_id__in: list[uuid.UUID] source__sequence_id__in: list[uuid.UUID] source__type: str uncertainty__isnull: bool created_timestamp__range: tuple[datetime, datetime] observation_set_ids__overlap: list[uuid.UUID] observation_set_ids__contains: list[uuid.UUID] Queried observations with some query related metadata. ListWithMeta [ ObservationData ] Update observations in the database. observation_updates ( Sequence [ ObservationUpdate ] ) \u2013 A sequence of observation updates,\neach containing the content of the observation which will be updated. Updated observations, each including also the database created fields like ID and timestamps. list [ ObservationData ] Query observation sets from the database. observation_set_id: UUID observation_set_id__in: list[UUID] observation_set_type: Literal[\u201ccalibration-set\u201d, \u201cgeneric-set\u201d, \u201cquality-metric-set\u201d] observation_ids__overlap: list[int] observation_ids__contains: list[int] describes_id: UUID describes_id__in: list[UUID] invalid: bool created_timestamp__range: tuple[datetime, datetime] end_timestamp__isnull: bool dut_label: str dut_label__in: list[str] Queried observation sets with some query related metadata ListWithMeta [ ObservationSetData ] Create an observation set in the database. observation_set_definition ( ObservationSetDefinition ) \u2013 The content of the observation set to be created. The content of the observation set. ExaError \u2013 If creation failed. ObservationSetData Get an observation set from the database. observation_set_id ( UUID ) \u2013 Observation set to retrieve. The content of the observation set. ExaError \u2013 If retrieval failed. ObservationSetData Update an observation set in the database. observation_set_update ( ObservationSetUpdate ) \u2013 The content of the observation set to be updated. The content of the observation set. ExaError \u2013 If updating failed. ObservationSetData Finalize an observation set in the database. A finalized set is nearly immutable, allowing to change only invalid flag after finalization. observation_set_id ( UUID ) \u2013 Observation set to finalize. ExaError \u2013 If finalization failed. None Get the constituent observations of an observation set from the database. observation_set_id ( UUID ) \u2013 UUID of the observation set to retrieve. Observations belonging to the given observation set. list [ ObservationLite ] Get saved calibration set observations by UUID calibration_set_id ( UUID ) \u2013 UUID of the calibration set to retrieve. Dictionary of observations belonging to the given calibration set. dict [ str , bool | str | int | float | complex | ndarray ] Get UUID of the latest saved calibration set for the given dut_label. dut_label ( str ) \u2013 Target DUT label UUID of the latest saved calibration set. UUID Get DUTs of the station control. list [ DutData ] Get DUT fields for the specified DUT label from the database. dut_label ( str ) \u2013 list [ DutFieldData ] Query sequence metadatas from the database. origin_id: str origin_id__in: list[str] origin_uri: str origin_uri__icontains: str created_timestamp__range: tuple[datetime, datetime] Sequence metadatas with some query related metadata. ListWithMeta [ SequenceMetadataData ] Create sequence metadata in the database. sequence_metadata_definition ( SequenceMetadataDefinition ) \u2013 SequenceMetadataData Save sequence result in the database. This method creates the object if it doesn\u2019t exist and completely replaces the \u201cdata\u201d and \u201cfinal\u201d if it does.\nTimestamps are assigned by the database. \u201cmodified_timestamp\u201d is not set on initial creation,\nbut it\u2019s updated on each subsequent call. sequence_result_definition ( SequenceResultDefinition ) \u2013 SequenceResultData Get sequence result from the database. sequence_id ( UUID ) \u2013 SequenceResultData Get task data. task_id ( UUID ) \u2013 dict previous station_control next utils \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "SequenceMetadataData",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.sequence.SequenceMetadataData.html",
    "description": "Bases: SequenceMetadataBase The content of the sequence metadata stored in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pyda...",
    "content": "Bases: SequenceMetadataBase The content of the sequence metadata stored in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.sequence Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. created_timestamp Time when the object was created in the database. sequence_id Unique identifier of the sequence. origin_id Unique identifier of the creator. origin_uri Uniform resource identifier (weak reference) for the creator. Methods sequence_id ( UUID ) \u2013 origin_id ( str ) \u2013 origin_uri ( str ) \u2013 created_timestamp ( datetime ) \u2013 Time when the object was created in the database. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous SequenceMetadataBase next SequenceMetadataDefinition \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.datetime_serializers.deserialize_datetime",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.datetime_serializers.deserialize_datetime.html",
    "description": "Convert a string formatted according to ISO to a datetime object. timestamp ( str | None ) \u2013 datetime | None previous datetime_serializers next iqm.station_control.client.serializers.datetime_serializ...",
    "content": "Convert a string formatted according to ISO to a datetime object. timestamp ( str | None ) \u2013 datetime | None previous datetime_serializers next iqm.station_control.client.serializers.datetime_serializers.serialize_datetime \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "ApiTokenAuth",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.grpc_utils.ApiTokenAuth.html",
    "description": "Bases: UnaryUnaryClientInterceptor , UnaryStreamClientInterceptor Module: iqm.station_control.client.iqm_server.grpc_utils Methods intercept_unary_stream Intercepts a unary-stream invocation. intercep...",
    "content": "Bases: UnaryUnaryClientInterceptor , UnaryStreamClientInterceptor Module: iqm.station_control.client.iqm_server.grpc_utils Methods intercept_unary_stream Intercepts a unary-stream invocation. intercept_unary_unary Intercepts a unary-unary invocation asynchronously. get_token_callback ( Callable [ [ ] , str ] ) \u2013 Intercepts a unary-stream invocation. continuation \u2013 A function that proceeds with the invocation by\nexecuting the next interceptor in chain or invoking the\nactual RPC on the underlying Channel. It is the interceptor\u2019s\nresponsibility to call it if it decides to move the RPC forward.\nThe interceptor can use response_iterator = continuation(client_call_details, request) to continue with the RPC. continuation returns an object that is\nboth a Call for the RPC and an iterator for response values.\nDrawing response values from the returned Call-iterator may\nraise RpcError indicating termination of the RPC with non-OK\nstatus. client_call_details \u2013 A ClientCallDetails object describing the\noutgoing RPC. request \u2013 The request value for the RPC. An object that is both a Call for the RPC and an iterator of\nresponse values. Drawing response values from the returned\nCall-iterator may raise RpcError indicating termination of\nthe RPC with non-OK status. This object should also fulfill the\nFuture interface, though it may not. Intercepts a unary-unary invocation asynchronously. continuation \u2013 A function that proceeds with the invocation by\nexecuting the next interceptor in chain or invoking the\nactual RPC on the underlying Channel. It is the interceptor\u2019s\nresponsibility to call it if it decides to move the RPC forward.\nThe interceptor can use response_future = continuation(client_call_details, request) to continue with the RPC. continuation returns an object that is\nboth a Call for the RPC and a Future. In the event of RPC\ncompletion, the return Call-Future\u2019s result value will be\nthe response message of the RPC. Should the event terminate\nwith non-OK status, the returned Call-Future\u2019s exception value\nwill be an RpcError. client_call_details \u2013 A ClientCallDetails object describing the\noutgoing RPC. request \u2013 The request value for the RPC. An object that is both a Call for the RPC and a Future.\nIn the event of RPC completion, the return Call-Future\u2019s\nresult value will be the response message of the RPC.\nShould the event terminate with non-OK status, the returned\nCall-Future\u2019s exception value will be an RpcError. previous iqm.station_control.client.iqm_server.grpc_utils.to_proto_uuid next ClientCallDetails \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "ConnectionParameters",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.grpc_utils.ConnectionParameters.html",
    "description": "Bases: object Module: iqm.station_control.client.iqm_server.grpc_utils Attributes server_address  is_secure  quantum_computer  use_timeslot  Methods server_address ( str ) \u2013 is_secure ( bool ) \u2013 quant...",
    "content": "Bases: object Module: iqm.station_control.client.iqm_server.grpc_utils Attributes server_address  is_secure  quantum_computer  use_timeslot  Methods server_address ( str ) \u2013 is_secure ( bool ) \u2013 quantum_computer ( str ) \u2013 use_timeslot ( bool ) \u2013 previous ClientCallDetails next iqm_server_client \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "CalibrationsStub",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.calibration_pb2_grpc.CalibrationsStub.html",
    "description": "Bases: object Missing associated documentation comment in .proto file. Constructor. channel \u2013 A grpc.Channel. Module: iqm.station_control.client.iqm_server.proto.calibration_pb2_grpc Methods previous ...",
    "content": "Bases: object Missing associated documentation comment in .proto file. Constructor. channel \u2013 A grpc.Channel. Module: iqm.station_control.client.iqm_server.proto.calibration_pb2_grpc Methods previous CalibrationsServicer next common_pb2 \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "proto",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.html",
    "description": "Full path: iqm.station_control.client.iqm_server.proto Subpackages and modules calibration_pb2 Generated protocol buffer code. calibration_pb2_grpc Client and server classes corresponding to protobuf-...",
    "content": "Full path: iqm.station_control.client.iqm_server.proto Subpackages and modules calibration_pb2 Generated protocol buffer code. calibration_pb2_grpc Client and server classes corresponding to protobuf-defined services. common_pb2 Generated protocol buffer code. common_pb2_grpc Client and server classes corresponding to protobuf-defined services. job_pb2 Generated protocol buffer code. job_pb2_grpc Client and server classes corresponding to protobuf-defined services. qc_pb2 Generated protocol buffer code. qc_pb2_grpc Client and server classes corresponding to protobuf-defined services. uuid_pb2 Generated protocol buffer code. uuid_pb2_grpc Client and server classes corresponding to protobuf-defined services. previous IqmServerClientMeta next calibration_pb2 \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "RunConfigurationBase",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.run.RunConfigurationBase.html",
    "description": "Bases: object Abstract base class of the run configuration data. Module: iqm.station_control.interface.models.run Attributes additional_run_properties A free-form dictionary of data, used to store inf...",
    "content": "Bases: object Abstract base class of the run configuration data. Module: iqm.station_control.interface.models.run Attributes additional_run_properties A free-form dictionary of data, used to store information that does not fall into other categories. hard_sweeps Maps SweepBase.return_parameters to \"hardware sweep specification\" which specifies how the data measured at each spot should be interpreted and shaped. components Components that participate in this run. default_data_parameters The subset of SweepBase.return_parameters that were added by default, not by the user. default_sweep_parameters The subset of SweepBase.sweeps parameters were added by default, not by the user. Methods additional_run_properties ( dict [ str , Any ] | None ) \u2013 hard_sweeps ( dict [ str , list [ tuple [ Sweep , ... ] ] ] | None ) \u2013 components ( list [ str ] ) \u2013 default_data_parameters ( list [ str ] ) \u2013 default_sweep_parameters ( list [ str ] ) \u2013 A free-form dictionary of data, used to store information that does not fall into other categories. Maps SweepBase.return_parameters to \u201chardware sweep specification\u201d which specifies\nhow the data measured at each spot should be interpreted and shaped.\nThe hard sweep specification is in the same format as SweepBase.sweeps ,\nwhich means that the returned data can be interpreted as an N-dimensional sweep inside the spot.\nAn empty list is interpreted such that the return parameter is a scalar.\nThe hard sweep specification can also be None ,\nin which case the shape will be whatever the instrument returns. Components that participate in this run. The subset of SweepBase.return_parameters that were added by default, not by the user.\nUsed to select which data to analyze and plot. The subset of SweepBase.sweeps parameters were added by default, not by the user.\nUsed to select which data to analyze and plot. previous RunBase next RunData \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "SweepData",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.sweep.SweepData.html",
    "description": "Bases: SweepBase The content of the sweep stored in the database. Module: iqm.station_control.interface.models.sweep Attributes created_timestamp Time when the object was created in the database. modi...",
    "content": "Bases: SweepBase The content of the sweep stored in the database. Module: iqm.station_control.interface.models.sweep Attributes created_timestamp Time when the object was created in the database. modified_timestamp Time when the object was last modified in the database. begin_timestamp Time when the sweep began in the station control. end_timestamp Time when the sweep ended in the station control. sweep_status Status of sweep execution. sweep_id Unique identifier of the sweep. dut_label DUT label of the device being used. settings A tree representation of the initial settings to set before the sweep. sweeps Sweeps that define the swept parameters, i.e. a list of parallel sweeps, where the data values of all sweeps in the tuple are interleaved, and updated simultaneously during the sweep. return_parameters Parameters that will be queried from devices and saved for each spot (variable-tuple) of the N-dimensional sweep. Methods sweep_id ( UUID ) \u2013 dut_label ( str ) \u2013 settings ( SettingNode ) \u2013 sweeps ( list [ tuple [ Sweep , ... ] ] ) \u2013 return_parameters ( list [ str ] ) \u2013 created_timestamp ( datetime ) \u2013 modified_timestamp ( datetime ) \u2013 begin_timestamp ( datetime | None ) \u2013 end_timestamp ( datetime | None ) \u2013 sweep_status ( SweepStatus ) \u2013 Time when the object was created in the database. Time when the object was last modified in the database. Time when the sweep began in the station control. Time when the sweep ended in the station control. Status of sweep execution. previous SweepBase next SweepDefinition \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm_server_client",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.iqm_server_client.html",
    "description": "StationControlClient implementation for IQM Server Full path: iqm.station_control.client.iqm_server.iqm_server_client Functions parse_calibration_set (cal_set_data)  parse_json (data)  payload_to_swee...",
    "content": "StationControlClient implementation for IQM Server Full path: iqm.station_control.client.iqm_server.iqm_server_client Functions parse_calibration_set (cal_set_data)  parse_json (data)  payload_to_sweep (job_payload)  resolve_current_qc (channel,\u00a0alias)  subscribe_to_job_events (channel,\u00a0job_id)  to_sweep_status (job_status)  to_task_status (job_status)  wrap_error (title)  Classes IqmServerClient  Inheritance previous ConnectionParameters next iqm.station_control.client.iqm_server.iqm_server_client.parse_calibration_set \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "qc_pb2",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.qc_pb2.html",
    "description": "Generated protocol buffer code. Full path: iqm.station_control.client.iqm_server.proto.qc_pb2 previous JobsStub next qc_pb2_grpc \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on ...",
    "content": "Generated protocol buffer code. Full path: iqm.station_control.client.iqm_server.proto.qc_pb2 previous JobsStub next qc_pb2_grpc \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "ObservationDataList",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.list_models.ObservationDataList.html",
    "description": "alias of ListModel[list[ObservationData]] previous ListModel next ObservationDefinitionList \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27....",
    "content": "alias of ListModel[list[ObservationData]] previous ListModel next ObservationDefinitionList \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "client",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.html",
    "description": "Station control client implementation. Full path: iqm.station_control.client Subpackages and modules iqm_server StationControlClient implementation for IQM Server list_models Station control client ty...",
    "content": "Station control client implementation. Full path: iqm.station_control.client Subpackages and modules iqm_server StationControlClient implementation for IQM Server list_models Station control client type adapters. serializers Module for station control client serialization and deserialization. station_control Station control client implementation. utils Utility functions for IQM Station Control Client. previous API Reference next iqm_server \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "job_pb2",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.job_pb2.html",
    "description": "Generated protocol buffer code. Full path: iqm.station_control.client.iqm_server.proto.job_pb2 previous common_pb2_grpc next job_pb2_grpc \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last up...",
    "content": "Generated protocol buffer code. Full path: iqm.station_control.client.iqm_server.proto.job_pb2 previous common_pb2_grpc next job_pb2_grpc \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "DutData",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.dut.DutData.html",
    "description": "Bases: PydanticBase Represents a Device Under Test, or DUT, for short. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.Validati...",
    "content": "Bases: PydanticBase Represents a Device Under Test, or DUT, for short. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.dut Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. label DUT label of the device. dut_type String indicating the DUT type of the device Can be either 'chip' or 'twpa'. Methods label ( str ) \u2013 dut_type ( Literal [ 'chip' , 'twpa' ] ) \u2013 DUT label of the device. String indicating the DUT type of the device\nCan be either \u2018chip\u2019 or \u2018twpa\u2019. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous dut next DutFieldData \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "ObservationDefinitionList",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.list_models.ObservationDefinitionList.html",
    "description": "alias of ListModel[list[ObservationDefinition]] previous ObservationDataList next ObservationLiteList \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27....",
    "content": "alias of ListModel[list[ObservationDefinition]] previous ObservationDataList next ObservationLiteList \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "type_aliases",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.type_aliases.html",
    "description": "Type hint aliases used in the station control interface. Full path: iqm.station_control.interface.models.type_aliases previous SweepStatus next pydantic_base \u00a9 Copyright 2019-2025, IQM Finland Oy, Rel...",
    "content": "Type hint aliases used in the station control interface. Full path: iqm.station_control.interface.models.type_aliases previous SweepStatus next pydantic_base \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.iqm_server.grpc_utils.to_proto_uuid",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.grpc_utils.to_proto_uuid.html",
    "description": "value ( UUID ) \u2013 Uuid previous iqm.station_control.client.iqm_server.grpc_utils.to_datetime next ApiTokenAuth \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27....",
    "content": "value ( UUID ) \u2013 Uuid previous iqm.station_control.client.iqm_server.grpc_utils.to_datetime next ApiTokenAuth \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.iqm_server.iqm_server_client.to_sweep_status",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.iqm_server_client.to_sweep_status.html",
    "description": "job_status ( <google.protobuf.internal.enum_type_wrapper.EnumTypeWrapper object at 0x7f090e71b510> ) \u2013 SweepStatus previous iqm.station_control.client.iqm_server.iqm_server_client.subscribe_to_job_eve...",
    "content": "job_status ( <google.protobuf.internal.enum_type_wrapper.EnumTypeWrapper object at 0x7f090e71b510> ) \u2013 SweepStatus previous iqm.station_control.client.iqm_server.iqm_server_client.subscribe_to_job_events next iqm.station_control.client.iqm_server.iqm_server_client.to_task_status \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "SweepStatus",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.sweep.SweepStatus.html",
    "description": "Bases: Enum Status for sweeps. Module: iqm.station_control.interface.models.sweep Attributes PENDING Sweep waiting for execution or status unknown PROGRESS Sweep is currently being executed SUCCESS Sw...",
    "content": "Bases: Enum Status for sweeps. Module: iqm.station_control.interface.models.sweep Attributes PENDING Sweep waiting for execution or status unknown PROGRESS Sweep is currently being executed SUCCESS Sweep has succeeded, ready for result retrieval FAILURE Sweep has failed REVOKED Sweep was revoked from execution INTERRUPTED Sweep was interrupted during its execution Methods Sweep waiting for execution or status unknown Sweep is currently being executed Sweep has succeeded, ready for result retrieval Sweep has failed Sweep was revoked from execution Sweep was interrupted during its execution previous SweepDefinition next type_aliases \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.utils.get_progress_bar_callback",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.utils.get_progress_bar_callback.html",
    "description": "Returns a callback function that creates or updates existing progressbars when called. Callable [[ list [ tuple [ str , int , int ]]], None ] previous iqm.station_control.client.utils.calset_from_obse...",
    "content": "Returns a callback function that creates or updates existing progressbars when called. Callable [[ list [ tuple [ str , int , int ]]], None ] previous iqm.station_control.client.utils.calset_from_observations next interface \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "IqmServerClient",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.iqm_server_client.IqmServerClient.html",
    "description": "Bases: StationControlClient Module: iqm.station_control.client.iqm_server.iqm_server_client Attributes Methods create_observation_set Create an observation set in the database. create_observations Cre...",
    "content": "Bases: StationControlClient Module: iqm.station_control.client.iqm_server.iqm_server_client Attributes Methods create_observation_set Create an observation set in the database. create_observations Create observations in the database. create_sequence_metadata Create sequence metadata in the database. delete_sweep Delete sweep in the database. finalize_observation_set Finalize an observation set in the database. get_about Return information about the station control. get_calibration_set_values Get saved calibration set observations by UUID get_channel_properties Get channel properties from the station. get_chip_design_record Get a raw chip design record matching the given chip label. get_configuration Return the configuration of the station control. get_dut_fields Get DUT fields for the specified DUT label from the database. get_duts Get DUTs of the station control. get_latest_calibration_set_id Get UUID of the latest saved calibration set for the given dut_label. get_observation_set Get an observation set from the database. get_observation_set_observations Get the constituent observations of an observation set from the database. get_observations Get observations from the database. get_or_create_software_version_set Get software version set ID from the database, or create if it doesn't exist. get_run Get run data from the database. get_sequence_result Get sequence result from the database. get_settings Return a tree representation of the default settings as defined in the configuration file. get_sweep Get N-dimensional sweep data from the database. get_sweep_results Get N-dimensional sweep results from the database. get_task Get task data. init Initialize a new station control client instance connected to the given remote. query_observation_sets Query observation sets from the database. query_observations Query observations from the database. query_runs Query runs from the database. query_sequence_metadatas Query sequence metadatas from the database. revoke_sweep Either remove a sweep task from the queue, or abort it gracefully if it's already executing. run Execute an N-dimensional sweep of selected variables and save run, sweep and results. save_sequence_result Save sequence result in the database. sweep Execute an N-dimensional sweep of selected variables and save sweep and results. update_observation_set Update an observation set in the database. update_observations Update observations in the database. root_url ( str ) \u2013 get_token_callback ( Callable [ [ ] , str ] | None ) \u2013 grpc_channel ( Channel | None ) \u2013 Return information about the station control. dict Return the configuration of the station control. dict Return a tree representation of the default settings as defined in the configuration file. SettingNode Get a raw chip design record matching the given chip label. dut_label ( str ) \u2013 dict Get channel properties from the station. Channel properties contain information regarding hardware limitations e.g. sampling rate, granularity\nand supported instructions. Mapping from channel name to AWGProperties or ReadoutProperties dict [ str , ChannelProperties ] Get DUTs of the station control. list [ DutData ] Get DUT fields for the specified DUT label from the database. dut_label ( str ) \u2013 list [ DutFieldData ] Execute an N-dimensional sweep of selected variables and save sweep and results. The raw data for each spot in the sweep is saved as numpy arrays,\nand the complete data for the whole sweep is saved as an x-array dataset\nwhich has the sweep_definition.sweeps as coordinates and\ndata of sweep_definition.return_parameters data as DataArrays. The values of sweep_definition.playlist will be uploaded to the controllers given by the keys of sweep_definition.playlist . sweep_definition ( SweepDefinition ) \u2013 The content of the sweep to be created. Dict containing the task ID  and sweep ID, and corresponding hrefs, of a successful sweep execution\nin monolithic mode or successful submission to the task queue in remote mode. ExaError if submitting a sweep failed. \u2013 dict Get N-dimensional sweep data from the database. sweep_id ( UUID ) \u2013 SweepData Get N-dimensional sweep results from the database. sweep_id ( UUID ) \u2013 dict [ str , list [ ndarray ]] Either remove a sweep task from the queue, or abort it gracefully if it\u2019s already executing. If the task was already executing when revoked, the status of the task will be set to \"INTERRUPTED\" .\nIf the task had not started yet, the status will be set to \"REVOKED\" .\nIf the task is not found or is already finished nothing happens. sweep_id ( UUID ) \u2013 None Get task data. task_id ( UUID ) \u2013 dict Get saved calibration set observations by UUID calibration_set_id ( UUID ) \u2013 UUID of the calibration set to retrieve. Dictionary of observations belonging to the given calibration set. dict [ str , bool | str | int | float | complex | ndarray ] Get UUID of the latest saved calibration set for the given dut_label. dut_label ( str ) \u2013 Target DUT label UUID of the latest saved calibration set. UUID Create an observation set in the database. observation_set_definition \u2013 The content of the observation set to be created. The content of the observation set. ExaError \u2013 If creation failed. Create observations in the database. observation_definitions \u2013 A sequence of observation definitions,\neach containing the content of the observation which will be created. Created observations, each including also the database created fields like ID and timestamps. Create sequence metadata in the database. Delete sweep in the database. Finalize an observation set in the database. A finalized set is nearly immutable, allowing to change only invalid flag after finalization. observation_set_id \u2013 Observation set to finalize. ExaError \u2013 If finalization failed. Get an observation set from the database. observation_set_id \u2013 Observation set to retrieve. The content of the observation set. ExaError \u2013 If retrieval failed. Get the constituent observations of an observation set from the database. observation_set_id \u2013 UUID of the observation set to retrieve. Observations belonging to the given observation set. Get observations from the database. Observations are queried by the given query parameters. mode \u2013 The \u201cmode\u201d used to query the observations. Possible values \u201call_latest\u201d, \u201ctags_and\u201d, or \u201ctags_or\u201d. \u201dall_latest\u201d:Query all the latest observations for the given dut_label .\nNo other query parameters are accepted. \u201dtags_and\u201d: Query observations. Query all the observations that have all the given tags .\nBy default, only valid observations are included.\nAll other query parameters can be used to narrow down the query,\nexpect \u201crun_ids\u201d and \u201csequence_ids\u201d. \u201dtags_or\u201d: Query all the latest observations that have at least one of the given tags .\nAdditionally, dut_label must be given. No other query parameters are used. \u201dsequence\u201d: Query observations originating from a list of run and/or sequence IDs.\nNo other query parameters are accepted. The \u201cmode\u201d used to query the observations. Possible values \u201call_latest\u201d, \u201ctags_and\u201d, or \u201ctags_or\u201d. \u201dall_latest\u201d:Query all the latest observations for the given dut_label .\nNo other query parameters are accepted. \u201dtags_and\u201d: Query observations. Query all the observations that have all the given tags .\nBy default, only valid observations are included.\nAll other query parameters can be used to narrow down the query,\nexpect \u201crun_ids\u201d and \u201csequence_ids\u201d. \u201dtags_or\u201d: Query all the latest observations that have at least one of the given tags .\nAdditionally, dut_label must be given. No other query parameters are used. \u201dsequence\u201d: Query observations originating from a list of run and/or sequence IDs.\nNo other query parameters are accepted. dut_label \u2013 DUT label of the device the observations pertain to. dut_field \u2013 Name of the property the observation is about. tags \u2013 Human-readable tags of the observation. invalid \u2013 Flag indicating if the object is invalid. Automated systems must not use invalid objects.\nIf None , both valid and invalid objects are included. run_ids \u2013 The run IDs for which to query the observations. sequence_ids \u2013 The sequence IDs for which to query the observations. limit \u2013 Indicates the maximum number of items to return. Observations, each including also the database created fields like ID and timestamps. Get software version set ID from the database, or create if it doesn\u2019t exist. Get run data from the database. Get sequence result from the database. Initialize a new station control client instance connected to the given remote. Client implementation is selected automatically based on the remote station: if the remote station\nis running the IQM Server software stack, then the IQM Server client implementation (with a limited\nfeature set) is chosen. If the remote station is running the SC software stack, then the Station\nControl client implementation (with the full feature set) is chosen. root_url \u2013 Remote station control service URL. For IQM Server remotes, this is the \u201cQuantum Computer URL\u201d\nvalue from the web dashboard. get_token_callback \u2013 A callback function that returns a token (str) which will be passed in Authorization\nheader in all requests. Query observation sets from the database. observation_set_id: UUID observation_set_id__in: list[UUID] observation_set_type: Literal[\u201ccalibration-set\u201d, \u201cgeneric-set\u201d, \u201cquality-metric-set\u201d] observation_ids__overlap: list[int] observation_ids__contains: list[int] describes_id: UUID describes_id__in: list[UUID] invalid: bool created_timestamp__range: tuple[datetime, datetime] end_timestamp__isnull: bool dut_label: str dut_label__in: list[str] Queried observation sets with some query related metadata Query observations from the database. observation_id: int observation_id__in: list[int] dut_label: str dut_field: str dut_field__in: list[str] tags__overlap: list[str] tags__contains: list[str] invalid: bool source__run_id__in: list[uuid.UUID] source__sequence_id__in: list[uuid.UUID] source__type: str uncertainty__isnull: bool created_timestamp__range: tuple[datetime, datetime] observation_set_ids__overlap: list[uuid.UUID] observation_set_ids__contains: list[uuid.UUID] Queried observations with some query related metadata. Query runs from the database. run_id: uuid.UUID run_id__in: list[uuid.UUID] sweep_id: uuid.UUID sweep_id__in: list[uuid.UUID] username: str username__in: list[str] username__contains: str username__icontains: str experiment_label: str experiment_label__in: list[str] experiment_label__contains: str experiment_label__icontains: str experiment_name: str experiment_name__in: list[str] experiment_name__contains: str experiment_name__icontains: str software_version_set_id: int software_version_set_id__in: list[int] begin_timestamp__range: tuple[datetime, datetime] end_timestamp__range: tuple[datetime, datetime] end_timestamp__isnull: bool Queried runs with some query related metadata. Query sequence metadatas from the database. origin_id: str origin_id__in: list[str] origin_uri: str origin_uri__icontains: str created_timestamp__range: tuple[datetime, datetime] Sequence metadatas with some query related metadata. Execute an N-dimensional sweep of selected variables and save run, sweep and results. Save sequence result in the database. This method creates the object if it doesn\u2019t exist and completely replaces the \u201cdata\u201d and \u201cfinal\u201d if it does.\nTimestamps are assigned by the database. \u201cmodified_timestamp\u201d is not set on initial creation,\nbut it\u2019s updated on each subsequent call. Update an observation set in the database. observation_set_update \u2013 The content of the observation set to be updated. The content of the observation set. ExaError \u2013 If updating failed. Update observations in the database. observation_updates \u2013 A sequence of observation updates,\neach containing the content of the observation which will be updated. Updated observations, each including also the database created fields like ID and timestamps. previous iqm.station_control.client.iqm_server.iqm_server_client.wrap_error next meta_class \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "calibration_pb2_grpc",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.calibration_pb2_grpc.html",
    "description": "Client and server classes corresponding to protobuf-defined services. Full path: iqm.station_control.client.iqm_server.proto.calibration_pb2_grpc Functions add_CalibrationsServicer_to_server (servicer...",
    "content": "Client and server classes corresponding to protobuf-defined services. Full path: iqm.station_control.client.iqm_server.proto.calibration_pb2_grpc Functions add_CalibrationsServicer_to_server (servicer,\u00a0...)  Classes Calibrations Missing associated documentation comment in .proto file. CalibrationsServicer Missing associated documentation comment in .proto file. CalibrationsStub Missing associated documentation comment in .proto file. Inheritance previous calibration_pb2 next iqm.station_control.client.iqm_server.proto.calibration_pb2_grpc.add_CalibrationsServicer_to_server \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "ObservationSetDefinition",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.observation_set.ObservationSetDefinition.html",
    "description": "Bases: ObservationSetBase The content of the observation set object when creating it. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydanti...",
    "content": "Bases: ObservationSetBase The content of the observation set object when creating it. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.observation_set Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. observation_set_type Indicates the type (i.e. purpose) of the observation set. observation_ids Database IDs of the observations belonging to the observation set. describes_id Unique identifier of the observation set this observation set describes. invalid Flag indicating if the object is invalid. Methods observation_set_type ( Literal [ 'calibration-set' , 'characterization-set' , 'generic-set' , 'quality-metric-set' ] ) \u2013 observation_ids ( list [ int ] ) \u2013 describes_id ( UUID | None ) \u2013 invalid ( bool ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous ObservationSetData next ObservationSetUpdate \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "grpc_utils",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.grpc_utils.html",
    "description": "Internal utility functions used by IqmServerClient. Full path: iqm.station_control.client.iqm_server.grpc_utils Functions create_channel (connection_params[,\u00a0...])  extract_error (error[,\u00a0title])  fro...",
    "content": "Internal utility functions used by IqmServerClient. Full path: iqm.station_control.client.iqm_server.grpc_utils Functions create_channel (connection_params[,\u00a0...])  extract_error (error[,\u00a0title])  from_proto_uuid (value)  load_all (chunks)  parse_connection_params (qc_url)  to_datetime (timestamp)  to_proto_uuid (value)  Classes ApiTokenAuth  ClientCallDetails  ConnectionParameters  Inheritance previous iqm.station_control.client.iqm_server.error.IqmServerError next iqm.station_control.client.iqm_server.grpc_utils.create_channel \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.iqm_server.iqm_server_client.parse_calibration_set",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.iqm_server_client.parse_calibration_set.html",
    "description": "cal_set_data ( bytes ) \u2013 tuple [ UUID , dict [ str , bool | str | int | float | complex | ndarray ]] previous iqm_server_client next iqm.station_control.client.iqm_server.iqm_server_client.parse_json ...",
    "content": "cal_set_data ( bytes ) \u2013 tuple [ UUID , dict [ str , bool | str | int | float | complex | ndarray ]] previous iqm_server_client next iqm.station_control.client.iqm_server.iqm_server_client.parse_json \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "ObservationBase",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.observation.ObservationBase.html",
    "description": "Bases: PydanticBase Abstract base class of the observation models. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationEr...",
    "content": "Bases: PydanticBase Abstract base class of the observation models. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.observation Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. dut_field Name of the property the observation is about. value Value of the observation. unit SI unit of the value. uncertainty Uncertainty of the observation value. invalid Flag indicating if the object is invalid. Methods dut_field ( str ) \u2013 value ( bool | str | int | float | complex | ndarray ) \u2013 unit ( str ) \u2013 uncertainty ( int | float | complex | ndarray | None ) \u2013 invalid ( bool ) \u2013 Name of the property the observation is about. Value of the observation. SI unit of the value. Empty string means the value is dimensionless. Uncertainty of the observation value. None means unknown. Flag indicating if the object is invalid. Automated systems must not use invalid objects. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous observation next ObservationData \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "ObservationLiteList",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.list_models.ObservationLiteList.html",
    "description": "alias of ListModel[list[ObservationLite]] previous ObservationDefinitionList next ObservationSetDataList \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27....",
    "content": "alias of ListModel[list[ObservationLite]] previous ObservationDefinitionList next ObservationSetDataList \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_results",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_results.html",
    "description": "Convert SweepResults into binary string. sweep_id ( UUID ) \u2013 sweep_results ( dict [ str , list [ ndarray ] ] ) \u2013 bytes previous iqm.station_control.client.serializers.sweep_serializers.serialize_sweep...",
    "content": "Convert SweepResults into binary string. sweep_id ( UUID ) \u2013 sweep_results ( dict [ str , list [ ndarray ] ] ) \u2013 bytes previous iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_definition next task_serializers \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "common_pb2",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.common_pb2.html",
    "description": "Generated protocol buffer code. Full path: iqm.station_control.client.iqm_server.proto.common_pb2 previous CalibrationsStub next common_pb2_grpc \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. ...",
    "content": "Generated protocol buffer code. Full path: iqm.station_control.client.iqm_server.proto.common_pb2 previous CalibrationsStub next common_pb2_grpc \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "serializers",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.html",
    "description": "Module for station control client serialization and deserialization. Full path: iqm.station_control.client.serializers Subpackages and modules channel_property_serializer Serializers and deserializers...",
    "content": "Module for station control client serialization and deserialization. Full path: iqm.station_control.client.serializers Subpackages and modules channel_property_serializer Serializers and deserializers for ChannelProperties datetime_serializers Serializers and deserializers for datetime related models. playlist_serializers Serializers and deserializers for Playlist run_serializers Serializers and deserializers for run related models. setting_node_serializer Serializers and deserializers for setting node related models. struct_serializer Serializers and deserializers for struct related models. sweep_serializers Serializers and deserializers for sweep related models. task_serializers Serializers and deserializers for task related models. previous SequenceMetadataDataList next channel_property_serializer \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "DutList",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.list_models.DutList.html",
    "description": "alias of ListModel[list[DutData]] previous DutFieldDataList next ListModel \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27....",
    "content": "alias of ListModel[list[DutData]] previous DutFieldDataList next ListModel \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.channel_property_serializer.serialize_channel_properties",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.channel_property_serializer.serialize_channel_properties.html",
    "description": "Pack the given dictionary of channel properties into a protobuf format for further serialization. channel_properties \u2013 channel properties to pack channel_property_dictionary ( dict [ str , ChannelProp...",
    "content": "Pack the given dictionary of channel properties into a protobuf format for further serialization. channel_properties \u2013 channel properties to pack channel_property_dictionary ( dict [ str , ChannelProperties ] ) \u2013 ChannelPropertyDictionary ChannelPropertyDictionary previous iqm.station_control.client.serializers.channel_property_serializer.deserialize_instructions next iqm.station_control.client.serializers.channel_property_serializer.unpack_channel_properties \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.iqm_server.proto.calibration_pb2_grpc.add_CalibrationsServicer_to_server",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.calibration_pb2_grpc.add_CalibrationsServicer_to_server.html",
    "description": "previous calibration_pb2_grpc next Calibrations \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27....",
    "content": "previous calibration_pb2_grpc next Calibrations \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "ObservationSetUpdate",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.observation_set.ObservationSetUpdate.html",
    "description": "Bases: PydanticBase The observation set data to be updated in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.Val...",
    "content": "Bases: PydanticBase The observation set data to be updated in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.observation_set Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. observation_set_id Unique identifier of the observation set. observation_ids Database IDs of the observations belonging to the observation set. invalid Flag indicating if the object is invalid. Methods observation_set_id ( UUID ) \u2013 observation_ids ( list [ int ] | None ) \u2013 invalid ( bool ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Unique identifier of the observation set. Database IDs of the observations belonging to the observation set. This will only add new observations to the observation set, deleting existing ones is not possible.\nSetting this to None or omitting it will leave existing observation_ids as is with no changes. Flag indicating if the object is invalid. Automated systems must not use invalid objects. previous ObservationSetDefinition next run \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "DutFieldDataList",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.list_models.DutFieldDataList.html",
    "description": "alias of ListModel[list[DutFieldData]] previous list_models next DutList \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27....",
    "content": "alias of ListModel[list[DutFieldData]] previous list_models next DutList \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "JobsStub",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.job_pb2_grpc.JobsStub.html",
    "description": "Bases: object User job management APIs. Constructor. channel \u2013 A grpc.Channel. Module: iqm.station_control.client.iqm_server.proto.job_pb2_grpc Methods previous JobsServicer next qc_pb2 \u00a9 Copyright 20...",
    "content": "Bases: object User job management APIs. Constructor. channel \u2013 A grpc.Channel. Module: iqm.station_control.client.iqm_server.proto.job_pb2_grpc Methods previous JobsServicer next qc_pb2 \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "Meta",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.list_with_meta.Meta.html",
    "description": "Bases: object Class holding metadata for list return values, like pagination related data. Module: iqm.station_control.interface.list_with_meta Attributes count  errors  limit  offset  order_by  Metho...",
    "content": "Bases: object Class holding metadata for list return values, like pagination related data. Module: iqm.station_control.interface.list_with_meta Attributes count  errors  limit  offset  order_by  Methods count ( int | None ) \u2013 order_by ( str | None ) \u2013 limit ( int | None ) \u2013 offset ( int | None ) \u2013 errors ( list [ str ] | None ) \u2013 previous ListWithMeta next models \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.iqm_server.grpc_utils.to_datetime",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.grpc_utils.to_datetime.html",
    "description": "timestamp ( Timestamp ) \u2013 datetime previous iqm.station_control.client.iqm_server.grpc_utils.parse_connection_params next iqm.station_control.client.iqm_server.grpc_utils.to_proto_uuid \u00a9 Copyright 201...",
    "content": "timestamp ( Timestamp ) \u2013 datetime previous iqm.station_control.client.iqm_server.grpc_utils.parse_connection_params next iqm.station_control.client.iqm_server.grpc_utils.to_proto_uuid \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.iqm_server.grpc_utils.create_channel",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.grpc_utils.create_channel.html",
    "description": "connection_params ( ConnectionParameters ) \u2013 get_token_callback ( Callable [ [ ] , str ] | None ) \u2013 enable_compression ( bool ) \u2013 Channel previous grpc_utils next iqm.station_control.client.iqm_server...",
    "content": "connection_params ( ConnectionParameters ) \u2013 get_token_callback ( Callable [ [ ] , str ] | None ) \u2013 enable_compression ( bool ) \u2013 Channel previous grpc_utils next iqm.station_control.client.iqm_server.grpc_utils.extract_error \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "station_control",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.station_control.html",
    "description": "Station control client implementation. Full path: iqm.station_control.client.station_control Classes StationControlClient Station control client implementation. Inheritance previous iqm.station_contro...",
    "content": "Station control client implementation. Full path: iqm.station_control.client.station_control Classes StationControlClient Station control client implementation. Inheritance previous iqm.station_control.client.serializers.task_serializers.serialize_sweep_task_request next StationControlClient \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "ObservationUpdate",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.observation.ObservationUpdate.html",
    "description": "Bases: PydanticBase The observation data to be updated in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.Validat...",
    "content": "Bases: PydanticBase The observation data to be updated in the database. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.observation Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. observation_id Unique identifier of the observation. invalid Flag indicating if the object is invalid. Methods observation_id ( int ) \u2013 invalid ( bool ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. Unique identifier of the observation. Flag indicating if the object is invalid. Automated systems must not use invalid objects. previous ObservationLite next observation_set \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "SequenceMetadataDefinition",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.sequence.SequenceMetadataDefinition.html",
    "description": "Bases: SequenceMetadataBase The content of the sequence metadata object when creating it. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pyd...",
    "content": "Bases: SequenceMetadataBase The content of the sequence metadata object when creating it. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.sequence Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. sequence_id Unique identifier of the sequence. origin_id Unique identifier of the creator. origin_uri Uniform resource identifier (weak reference) for the creator. Methods sequence_id ( UUID ) \u2013 origin_id ( str ) \u2013 origin_uri ( str ) \u2013 Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous SequenceMetadataData next SequenceResultBase \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "qc_pb2_grpc",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.iqm_server.proto.qc_pb2_grpc.html",
    "description": "Client and server classes corresponding to protobuf-defined services. Full path: iqm.station_control.client.iqm_server.proto.qc_pb2_grpc Functions add_QuantumComputersServicer_to_server (...)  Classes...",
    "content": "Client and server classes corresponding to protobuf-defined services. Full path: iqm.station_control.client.iqm_server.proto.qc_pb2_grpc Functions add_QuantumComputersServicer_to_server (...)  Classes QuantumComputers Quantum Computer management APIs. QuantumComputersServicer Quantum Computer management APIs. QuantumComputersStub Quantum Computer management APIs. Inheritance previous qc_pb2 next iqm.station_control.client.iqm_server.proto.qc_pb2_grpc.add_QuantumComputersServicer_to_server \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.task_serializers.deserialize_sweep_task_request",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.task_serializers.deserialize_sweep_task_request.html",
    "description": "Deserializes sweep_definition and queue_name from the serialized bitstring. data ( bytes ) \u2013 The serialized data class: ` ~iqm.station_control.interface.model.SweepDefinition\nand queue name (string). ...",
    "content": "Deserializes sweep_definition and queue_name from the serialized bitstring. data ( bytes ) \u2013 The serialized data class: ` ~iqm.station_control.interface.model.SweepDefinition\nand queue name (string). Deserialized tuple previous task_serializers next iqm.station_control.client.serializers.task_serializers.serialize_run_task_request \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_definition",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_definition.html",
    "description": "Convert SweepDefinition into sweep proto. sweep_definition ( SweepDefinition ) \u2013 SweepRequest previous iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_data next iqm.station_co...",
    "content": "Convert SweepDefinition into sweep proto. sweep_definition ( SweepDefinition ) \u2013 SweepRequest previous iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_data next iqm.station_control.client.serializers.sweep_serializers.serialize_sweep_results \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "observation_set",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.observation_set.html",
    "description": "Observation set related station control interface models. Full path: iqm.station_control.interface.models.observation_set Classes ObservationSetBase Abstract base class of the observation set definiti...",
    "content": "Observation set related station control interface models. Full path: iqm.station_control.interface.models.observation_set Classes ObservationSetBase Abstract base class of the observation set definition and data. ObservationSetData The content of the observation set stored in the database. ObservationSetDefinition The content of the observation set object when creating it. ObservationSetUpdate The observation set data to be updated in the database. Inheritance previous ObservationUpdate next ObservationSetBase \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.run_serializers.deserialize_run_data",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.run_serializers.deserialize_run_data.html",
    "description": "Convert a JSON serializable dictionary to RunData object. data ( dict ) \u2013 RunData previous run_serializers next iqm.station_control.client.serializers.run_serializers.deserialize_run_definition \u00a9 Copy...",
    "content": "Convert a JSON serializable dictionary to RunData object. data ( dict ) \u2013 RunData previous run_serializers next iqm.station_control.client.serializers.run_serializers.deserialize_run_definition \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "SequenceMetadataBase",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.sequence.SequenceMetadataBase.html",
    "description": "Bases: PydanticBase Abstract base class of the sequence metadata definition and data. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydanti...",
    "content": "Bases: PydanticBase Abstract base class of the sequence metadata definition and data. Create a new model by parsing and validating input data from keyword arguments. Raises [ ValidationError ][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model. self is explicitly positional-only to allow self as a field name. Module: iqm.station_control.interface.models.sequence Attributes model_config Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. sequence_id Unique identifier of the sequence. origin_id Unique identifier of the creator. origin_uri Uniform resource identifier (weak reference) for the creator. Methods sequence_id ( UUID ) \u2013 origin_id ( str ) \u2013 origin_uri ( str ) \u2013 Unique identifier of the sequence. Unique identifier of the creator. E.g. notebook researcher username, or calibration service ID. Uniform resource identifier (weak reference) for the creator. E.g. calibration service ID. Configuration for the model, should be a dictionary conforming to [ ConfigDict ][pydantic.config.ConfigDict]. previous sequence next SequenceMetadataData \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "dut",
    "url": "/iqm-station-control-client/api/iqm.station_control.interface.models.dut.html",
    "description": "DUT related interface models. Full path: iqm.station_control.interface.models.dut Classes DutData Represents a Device Under Test, or DUT, for short. DutFieldData A DUT field or path and its unit. Inhe...",
    "content": "DUT related interface models. Full path: iqm.station_control.interface.models.dut Classes DutData Represents a Device Under Test, or DUT, for short. DutFieldData A DUT field or path and its unit. Inheritance previous models next DutData \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  },
  {
    "package": "iqm-station-control-client",
    "title": "iqm.station_control.client.serializers.setting_node_serializer.deserialize_setting_node",
    "url": "/iqm-station-control-client/api/iqm.station_control.client.serializers.setting_node_serializer.deserialize_setting_node.html",
    "description": "Convert binary string into SettingNode. setting_node_str ( bytes ) \u2013 SettingNode previous setting_node_serializer next struct_serializer \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last upd...",
    "content": "Convert binary string into SettingNode. setting_node_str ( bytes ) \u2013 SettingNode previous setting_node_serializer next struct_serializer \u00a9 Copyright 2019-2025, IQM Finland Oy, Release 3.17.0. Last updated on 2025-05-27."
  }
]